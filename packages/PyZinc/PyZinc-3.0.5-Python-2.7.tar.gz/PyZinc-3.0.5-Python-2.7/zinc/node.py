# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_node', [dirname(__file__)])
        except ImportError:
            import _node
            return _node
        if fp is not None:
            try:
                _mod = imp.load_module('_node', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _node = swig_import_helper()
    del swig_import_helper
else:
    import _node
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import field
import differentialoperator
import element
import stream
import fieldmodule
import timesequence
import optimisation
import fieldcache
class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _node.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    VALUE_TYPE_INVALID = _node.Node_VALUE_TYPE_INVALID
    VALUE = _node.Node_VALUE
    D_DS1 = _node.Node_D_DS1
    D_DS2 = _node.Node_D_DS2
    D_DS3 = _node.Node_D_DS3
    D2_DS1DS2 = _node.Node_D2_DS1DS2
    D2_DS1DS3 = _node.Node_D2_DS1DS3
    D2_DS2DS3 = _node.Node_D2_DS2DS3
    D3_DS1DS2DS3 = _node.Node_D3_DS1DS2DS3
    __swig_destroy__ = _node.delete_Node
    __del__ = lambda self : None;
    def isValid(self): return _node.Node_isValid(self)
    def getId(self): return _node.Node_getId(self)
    def getIdentifier(self): return _node.Node_getIdentifier(self)
    def merge(self, *args): return _node.Node_merge(self, *args)
Node_swigregister = _node.Node_swigregister
Node_swigregister(Node)

class NodeTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeTemplate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _node.new_NodeTemplate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _node.delete_NodeTemplate
    __del__ = lambda self : None;
    def isValid(self): return _node.NodeTemplate_isValid(self)
    VALUE_TYPE_INVALID = _node.NodeTemplate_VALUE_TYPE_INVALID
    NODAL_VALUE = _node.NodeTemplate_NODAL_VALUE
    NODAL_D_DS1 = _node.NodeTemplate_NODAL_D_DS1
    NODAL_D_DS2 = _node.NodeTemplate_NODAL_D_DS2
    NODAL_D_DS3 = _node.NodeTemplate_NODAL_D_DS3
    NODAL_D2_DS1DS2 = _node.NodeTemplate_NODAL_D2_DS1DS2
    NODAL_D2_DS1DS3 = _node.NodeTemplate_NODAL_D2_DS1DS3
    NODAL_D2_DS2DS3 = _node.NodeTemplate_NODAL_D2_DS2DS3
    NODAL_D3_DS1DS2DS3 = _node.NodeTemplate_NODAL_D3_DS1DS2DS3
    def getId(self): return _node.NodeTemplate_getId(self)
    def defineDerivative(self, *args): return _node.NodeTemplate_defineDerivative(self, *args)
    def defineField(self, *args): return _node.NodeTemplate_defineField(self, *args)
    def defineVersions(self, *args): return _node.NodeTemplate_defineVersions(self, *args)
    def undefineField(self, *args): return _node.NodeTemplate_undefineField(self, *args)
NodeTemplate_swigregister = _node.NodeTemplate_swigregister
NodeTemplate_swigregister(NodeTemplate)

class NodeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _node.new_NodeIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _node.delete_NodeIterator
    __del__ = lambda self : None;
    def isValid(self): return _node.NodeIterator_isValid(self)
    def next(self): return _node.NodeIterator_next(self)
NodeIterator_swigregister = _node.NodeIterator_swigregister
NodeIterator_swigregister(NodeIterator)

class Nodeset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nodeset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Nodeset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _node.new_Nodeset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _node.delete_Nodeset
    __del__ = lambda self : None;
    def isValid(self): return _node.Nodeset_isValid(self)
    def getId(self): return _node.Nodeset_getId(self)
    def containsNode(self, *args): return _node.Nodeset_containsNode(self, *args)
    def createNodeTemplate(self): return _node.Nodeset_createNodeTemplate(self)
    def createNode(self, *args): return _node.Nodeset_createNode(self, *args)
    def createNodeIterator(self): return _node.Nodeset_createNodeIterator(self)
    def destroyAllNodes(self): return _node.Nodeset_destroyAllNodes(self)
    def destroyNode(self, *args): return _node.Nodeset_destroyNode(self, *args)
    def destroyNodesConditional(self, *args): return _node.Nodeset_destroyNodesConditional(self, *args)
    def findNodeByIdentifier(self, *args): return _node.Nodeset_findNodeByIdentifier(self, *args)
    def getMaster(self): return _node.Nodeset_getMaster(self)
    def getName(self): return _node.Nodeset_getName(self)
    def getSize(self): return _node.Nodeset_getSize(self)
    def match(self, *args): return _node.Nodeset_match(self, *args)
Nodeset_swigregister = _node.Nodeset_swigregister
Nodeset_swigregister(Nodeset)

class NodesetGroup(Nodeset):
    __swig_setmethods__ = {}
    for _s in [Nodeset]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodesetGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Nodeset]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodesetGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _node.new_NodesetGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getId(self): return _node.NodesetGroup_getId(self)
    def addNode(self, *args): return _node.NodesetGroup_addNode(self, *args)
    def removeAllNodes(self): return _node.NodesetGroup_removeAllNodes(self)
    def removeNode(self, *args): return _node.NodesetGroup_removeNode(self, *args)
    def removeNodesConditional(self, *args): return _node.NodesetGroup_removeNodesConditional(self, *args)
    __swig_destroy__ = _node.delete_NodesetGroup
    __del__ = lambda self : None;
NodesetGroup_swigregister = _node.NodesetGroup_swigregister
NodesetGroup_swigregister(NodesetGroup)



