grammar = line*:l emptyline* end -> l

hspace    = ' ' | '\t'
vspace    = '\n'
optspace  = ?(self.parenthesis) (hspace | '\\'? vspace | comment)* | (hspace | '\\' vspace)* comment?
mandspace = ?(self.parenthesis) (hspace | '\\'? vspace | comment)+ | (hspace | '\\' vspace)+ comment?

indentation = hspace*:i ?(len(i) == self.indent_stack[-1])
indent      = hspace*:i ?(len(i) > self.indent_stack[-1]) !(self.indent_stack.append(len(i)))
dedent      = !(self.dedent())

comment  = '#' line_rest:c -> ['comment', c]
emptyline = hspace* ('\\')? vspace
block     = optspace comment?:c vspace unrestricted_line*:ul ~~(indent) real_line:s line*:l emptyline* dedent -> [c] if c else [] + ul + [s] + l
          | optspace stmt:s optspace ~~(vspace | end) -> [s]
indented_statement = indentation stmt:s -> s
unrestricted_line = emptyline 
                  | comment:c vspace -> c
line      = emptyline* (comment|indented_statement):s optspace (vspace | end) -> s
real_line = emptyline* indented_statement:s optspace (vspace | end) -> s
line_rest = (~vspace :x)*:x -> ''.join(x)

stmt = pass | global | nonlocal | continue | break | return | raise | while
     | del | if | def | for | try | augassign | assign | dowhile

global = "global" mandspace innercsv('name'):names -> ['global', names]
nonlocal = "nonlocal" mandspace innercsv('name'):names -> ['nonlocal', names]

continue = "continue"              -> ['continue']
break    = "break"                 -> ['break']
del      = "del" mandspace get:x   -> ['del', x]

pass   = "pass"                    -> ['pass']
return = "return" mandspace possibleunpackedtuple('expr'):expr optspace -> ['return', expr]
       | "return" optspace ~~(vspace | end) -> ['return']
raise  = "raise" mandspace expr:e  -> ['raise', e]

augassign = get:l optspace
            ("+=" | "-=" | "*=" | "/=" | "//=" | "%=" | "^=" | "&=" | "|=" | "~=" | "<<=" | ">>="):op
            optspace expr:r
            -> ['augassign', op, l, r]
assign = possibleunpackedtuple('get'):l optspace '=' optspace (rngop | possibleunpackedtuple('assign')):r optspace -> ['assign', l, r]
       | expr
expr = ifexpr
     | innerifexpr
innerifexpr = orop
orop  = orop:l optspace "or":op andop:r -> ['binop', "||", l, r]
      | andop
andop = andop:l optspace "and":op notop:r -> ['binop', "&&", l, r]
      | notop
notop = optspace "not":op mandspace notop:r -> ['unop', op, r]
      | cmpop
      | bitor
comparison = ( "in"                 -> 'in'
             | "not" mandspace "in" -> 'not in'
             | "is" mandspace "not" -> 'is not'
             | "is"                 -> 'is'
             ):x mandspace -> x
           | "<=" | ">=" | "<" | ">" | "!=" | "=="
cmpop = bitor:l (optspace comparison:op optspace bitor:r -> [op, r])+:r -> ['cmpop', l, r]

bitor = bitor:l optspace '|':op bitxor:r -> ['binop', op, l, r]
      | bitxor
bitxor = bitxor:l optspace '^':op bitand:r -> ['binop', op, l, r]
      | bitand
bitand = bitand:l optspace '&':op shift:r -> ['binop', op, l, r]
      | shift
shift = shift:l optspace ("<<" | ">>"):op addop:r -> ['binop', op, l, r]
      | addop
addop = addop:l optspace ('+' | '-'):op mulop:r -> ['binop', op, l, r]
      | mulop
mulop = mulop:l optspace ('*' | '/' | '//' | '%'):op unop:r -> ['binop', op, l, r]
      | unop
unop  = optspace ('-' | '+' | '~'):op unop:e -> ['unop', op, e]
      | callable
rngop = '[' optspace addop:l mandspace ("to" | "til"):op mandspace addop:r optspace ']' -> ['binop', op, l, r]

callable = optspace
         ( new
         | lambda
         | deflambda
         | get
         )

slice = expr?:start optspace ':' optspace expr?:end -> ['slice', start, end]
      | expr:e -> e

get = get:obj optspace '.' optspace name:n           -> ['getattr', obj, n]
    | get:obj optspace '[' !(self.enter_paren()) slice:s !(self.leave_paren()) ']' -> ['getitem', obj, s]
    | get:obj optspace '(' csv('expr'):params ')'    -> ['call', obj, params]
    | immediate

immediate = number
          | rstring
          | string
          | list
          | tuple
          | dict
          | set
          | name
          | '(' !(self.enter_paren()) expr:ix optspace ')' !(self.leave_paren()) -> ix

new = "new" mandspace get:c -> ['new', c]

name_start   = letter | '$' | '_'
name_rest    = name_start | digit
iname        = name_start:s name_rest*:r   -> s + ''.join(r)
iskeyword :x = ?(self.is_keyword(x))
name         = iname:n ~iskeyword(n)       -> ['name', n]

escaped_char = '\\' :x -> ('\\' + x).decode('string_escape')
string4 :e = match_string(e) (escaped_char | ~(?(len(e) != 3) vspace | match_string(e)) anything)*:c match_string(e) -> ''.join(c)
string3 = string4('"""') | string4("'''") | string4('"') | string4("'")
string2 = (string3:s optspace -> s)+:s -> ''.join(s)
rmodifiers = "i" -> 'i'
            |"m" -> 'm'
            |"s" -> 's'
            |"x" -> 'x'
rstring =  "r" string2:rs (rmodifiers)*:m  ->  ['rstring', rs, m]
string = string2:s -> ['string', s]

hexdigit     = letterOrDigit:x !(self.hex_digits.find(x.lower())):v ?(v >= 0)  -> v
hexlit       = hexlit:n hexdigit:d                                             -> (n * 16 + d)
             | hexdigit
number       = "0x" hexlit:n                                                   -> ['hexnumber', n]
             | digit+:ws ('.' digit+:fs                                        -> ['number', float('%s.%s' % (''.join(ws), ''.join(fs)))]
                         |                                                     -> ['number', int(''.join(ws))]
                         )

innercsv :rule = optspace (apply(rule):e optspace ',' optspace -> e)*:es (?(rule != 'tupleexpr' or len(es)) optspace apply(rule):l !(es.append(l)))? optspace -> es
possibleunpackedtuple :rule = (optspace apply(rule):e optspace ',' -> e)+:es (?(len(es)>0) optspace apply(rule):l !(es.append(l)))? -> ['tuple'] + es
       | apply(rule):e -> e
csv :rule = !(self.enter_paren()) innercsv(rule):es !(self.leave_paren()) -> es
list  = '[' csv('expr'):v       ']' -> ['list'] + v
tuple = '(' csv('tupleexpr'):v  ')' -> ['tuple'] + v
dict  = '{' csv('dictexpr'):v   '}' -> ['dict'] + v
set   = '{' csv('expr'):v       '}' -> ['set'] + v

tupleexpr = expr
dictexpr  = ( name:k | string:k ) optspace ':' optspace expr:v -> ['dictkv', k, v]

ifexpr = innerifexpr:t mandspace "if" mandspace innerifexpr:cond mandspace "else" mandspace expr:f -> ['ifexpr', cond, t, f]

commentlines = emptyline -> None
             | comment:c vspace -> c
ifcond = mandspace expr:cond -> cond
       | optspace '(' expr:cond ')' -> cond
if    = "if" ifcond:cond optspace ':' block:body elif*:ei else?:e -> ['if', [cond, body]] + [ei] + ([e] if e else [])
elif  = (commentlines)*:cmts indentation "elif" ifcond:cond optspace ':' block:body -> [cmts, cond, body]
else  = (commentlines)*:cmts indentation "else" optspace ':' block:body -> [cmts, body]

while = "while" ifcond:cond optspace ':' block:body -> ['while', cond, body]
dowhile = "do:" block:body emptyline* indentation ".while" ifcond:cond -> ['dowhile', body, cond]

for   = "for" mandspace possibleunpackedtuple('get'):var mandspace "in" mandspace (rngop | possibleunpackedtuple('expr')):data optspace ':' block:body -> ['for', var, data, body]

def   = "def" !(self.get_indent()):i mandspace !(self.indent_stack.append(i)) name:name optspace '(' csv('name'):args ')' optspace ':' block:body !(self.indent_stack.pop()) -> ['func', name, args, body]
deflambda = "def" !(self.get_indent()):i ~~(hspace | '(') !(self.enter_deflambda(i)) optspace '(' csv('name'):args ')' optspace ':' block:body !(self.leave_deflambda()) -> ['func', None, args, body]
lambda = "lambda" mandspace csv('name'):args optspace ':' expr:e -> ['func', None, args, [e]]

finally_block = (commentlines)*:cmts indentation "finally" optspace ':' block:body -> [cmts, body]
except_block  = (commentlines)*:cmts indentation "except" mandspace name:err optspace ':' block:body -> [cmts, err, body]
try = "try" optspace ':' block:body except_block:exc finally_block:fin -> ['try', body, 'except', exc, 'finally', fin]
    | "try" optspace ':' block:body except_block:exc -> ['try', body, 'except', exc]
    | "try" optspace ':' block:body finally_block:fin -> ['try', body, 'finally', fin]
    

