// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'serrano', './utils'], function($, _, Backbone, Serrano, utils) {
  var BaseControlView, FORM_ELEMENTS, FieldControlView, RangeControlView;
  FORM_ELEMENTS = 'input,select,textarea';
  BaseControlView = (function(_super) {

    __extends(BaseControlView, _super);

    function BaseControlView() {
      return BaseControlView.__super__.constructor.apply(this, arguments);
    }

    BaseControlView.prototype.options = {
      managed: false,
      idSelector: '[name=id],[data-id]',
      valueSelector: '[name=value],[data-value]',
      operatorSelector: '[name=operator],[data-operator]',
      nullsSelector: '[name=nulls],[data-nulls]',
      idAttr: 'data-id',
      valueAttr: 'data-value',
      operatorAttr: 'data-operator',
      nullsAttr: 'data-nulls'
    };

    BaseControlView.prototype.events = {
      'keyup input': 'change',
      'change select': 'change',
      'click input[type=radio],input[type=checkbox]': 'change'
    };

    BaseControlView.prototype.initialize = function() {
      BaseControlView.__super__.initialize.apply(this, arguments);
      this.idSelector = this.options.idSelector;
      this.valueSelector = this.options.valueSelector;
      this.operatorSelector = this.options.operatorSelector;
      this.nullsSelector = this.options.nullsSelector;
      this.idAttr = this.options.idAttr;
      this.valueAttr = this.options.valueAttr;
      this.operatorAttr = this.options.operatorAttr;
      return this.nullsAttr = this.options.nullsAttr;
    };

    BaseControlView.prototype._templateData = function() {
      throw new Error('Not implemented');
    };

    BaseControlView.prototype._renderTemplate = function() {
      if (this.template) {
        return this.setElement(this.template(this._templateData()));
      }
    };

    BaseControlView.prototype._resetReferences = function() {
      this.$id = this.$el.is(this.idSelector) ? this.$el : this.$(this.idSelector);
      this.$operator = this.$el.is(this.operatorSelector) ? this.$el : this.$(this.operatorSelector);
      this.$value = this.$el.is(this.valueSelector) ? this.$el : this.$(this.valueSelector);
      return this.$nulls = this.$el.is(this.nullsSelector) ? this.$el : this.$(this.nullsSelector);
    };

    BaseControlView.prototype._deferenceNode = function(cid) {
      var node;
      if ((node = this._nodeCache[cid]) != null) {
        delete this._nodeCache[cid];
        if (this.node.cid === id) {
          delete this.node;
        }
        return node;
      }
    };

    BaseControlView.prototype.render = function() {
      this._renderTemplate();
      this._resetReferences();
      return this.$el;
    };

    BaseControlView.prototype.cleanId = function(id) {
      return parseInt(id);
    };

    BaseControlView.prototype.cleanOperator = function(operator) {
      return utils.coerceValue(operator, 'string');
    };

    BaseControlView.prototype.cleanValue = function(value) {
      return utils.coerceValue(value, this.options.type);
    };

    BaseControlView.prototype.cleanNulls = function(nulls) {
      return utils.coerceValue(nulls, 'boolean');
    };

    BaseControlView.prototype.getId = function() {
      var id;
      if (this.options.id) {
        return this.options.id;
      } else {
        if (this.$id.is(FORM_ELEMENTS)) {
          id = utils.getInputValue(this.$id);
        } else {
          id = this.$id.attr(this.idAttr);
        }
        return this.cleanId(id);
      }
    };

    BaseControlView.prototype.getOperator = function() {
      var operator;
      if (this.$operator.is(FORM_ELEMENTS)) {
        operator = utils.getInputValue(this.$operator);
      } else {
        operator = this.$operator.attr(this.operatorAttr);
      }
      return this.cleanOperator(operator);
    };

    BaseControlView.prototype.getValue = function() {
      var cleaned, value;
      if (this.$value.is(FORM_ELEMENTS)) {
        value = utils.getInputValue(this.$value);
      } else {
        value = this.$value.attr(this.valueAttr);
      }
      cleaned = this.cleanValue(value);
      if (!utils.validateValue) {
        this.trigger('error', 'Invalid value for type', type, value);
      }
      return cleaned;
    };

    BaseControlView.prototype.getNulls = function() {
      var cleaned, nulls;
      if (this.$nulls.is(FORM_ELEMENTS)) {
        nulls = utils.getInputValue(this.$nulls);
      } else {
        nulls = this.$nulls.attr(this.nullsAttr);
      }
      cleaned = this.cleanNulls(nulls);
      if (!utils.validateValue) {
        this.trigger('error', 'Invalid value for type', type, value);
      }
      return cleaned;
    };

    BaseControlView.prototype.setId = function(id) {
      if (this.options.id) {
        return;
      }
      if (this.$id.is(FORM_ELEMENTS)) {
        utils.setInputValue(this.$id, id);
      } else {
        this.$id.attr(this.idAttr, id);
      }
    };

    BaseControlView.prototype.setOperator = function(operator) {
      if (this.$operator.is(FORM_ELEMENTS)) {
        utils.setInputValue(this.$operator, operator);
      } else {
        this.$operator.attr(this.operatorAttr, operator);
      }
    };

    BaseControlView.prototype.setValue = function(value) {
      if (this.$value.is(FORM_ELEMENTS)) {
        utils.setInputValue(this.$value, value);
      } else {
        this.$value.attr(this.valueAttr, value);
      }
    };

    BaseControlView.prototype.setNulls = function(value) {
      value = Boolean(value);
      if (this.$nulls.is(FORM_ELEMENTS)) {
        utils.setInputValue(this.$nulls, value);
      } else {
        this.$nulls.attr(this.nullsAttr, value);
      }
    };

    BaseControlView.prototype.change = function(event) {
      return this.trigger('change', this, this.get());
    };

    BaseControlView.prototype.add = function() {
      var node;
      this.node = node = new Serrano.DataContextNode(this.get());
      this._nodeCache[node.cid] = node;
      if (!this.options.managed) {
        this.$add.hide();
        this.$update.show();
      }
      return this.trigger('add', this, node);
    };

    BaseControlView.prototype.update = function() {
      this.node.set(this.get());
      return this.trigger('update', this, this.node);
    };

    BaseControlView.prototype.remove = function(cid) {
      var node;
      node = this._deferenceNode(cid);
      if (!this.options.managed && !this.node) {
        this.$update.hide();
        this.$add.show();
      }
      return this.trigger('remove', this, node);
    };

    BaseControlView.prototype.get = function() {
      return {
        id: this.getId(),
        operator: this.getOperator(),
        value: this.getValue(),
        "null": this.getNulls()
      };
    };

    BaseControlView.prototype.set = function(attrs) {
      if (attrs == null) {
        attrs = {};
      }
      this.setId(attrs.id);
      this.setValue(attrs.value);
      this.setOperator(attrs.operator);
      return this.setNulls(attrs["null"]);
    };

    BaseControlView.prototype.reset = function() {
      return this.set();
    };

    return BaseControlView;

  })(Backbone.View);
  FieldControlView = (function(_super) {

    __extends(FieldControlView, _super);

    function FieldControlView() {
      return FieldControlView.__super__.constructor.apply(this, arguments);
    }

    FieldControlView.prototype.template = _.template('\
            <div class=field-control-view>\
\
                <div class=control-group>\
                    <h4 class=control-label>{{ label }}\
                        <small class=units>({{ units }})</small>\
                    </h4>\
\
                    <p class=help-block>{{ help }}</p>\
\
                    <div class="controls controls-row">\
                        <select class=span6 name=operator></select>\
                        <input class=span6 type=text name=value>\
                    </div>\
                </div>\
\
                <div class=control-group>\
                    <div class=controls>\
                        <label class="checkbox muted">\
                            <input type=checkbox name=nulls value=>\
                            Include NULL or empty string values\
                        </label>\
                    </div>\
                </div>\
\
            </div>\
        ');

    FieldControlView.prototype._templateData = function() {
      return {
        label: this.model.get('alt_name') || this.model.get('name'),
        units: this.model.get('plural_unit'),
        help: this.model.get('description')
      };
    };

    FieldControlView.prototype.render = function() {
      FieldControlView.__super__.render.apply(this, arguments);
      if (!this.model.get('plural_unit')) {
        this.$('.units').hide();
      }
      if (!this.model.get('description')) {
        this.$('.description').hide();
      }
      if (!this.options.label) {
        this.$('.control-label').hide();
      }
      this._renderOperators();
      this._renderValues();
      return this.$el;
    };

    FieldControlView.prototype._renderOperators = function() {
      var $operator, i, operator, operators, text, _i, _len, _ref, _ref1;
      $operator = this.$('[name=operator]');
      _ref = (operators = this.model.get('operators'));
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        _ref1 = _ref[i], operator = _ref1[0], text = _ref1[1];
        $operator.append("<option value=\"" + operator + "\">" + text + "</option>");
      }
      if (i < 2) {
        $operator.hide();
        return this.$('[name-value]').removeClass('span6').addClass('span12');
      }
    };

    FieldControlView.prototype._renderValues = function() {};

    return FieldControlView;

  })(BaseControlView);
  RangeControlView = (function(_super) {

    __extends(RangeControlView, _super);

    function RangeControlView() {
      return RangeControlView.__super__.constructor.apply(this, arguments);
    }

    return RangeControlView;

  })(FieldControlView);
  return {
    BaseControlView: BaseControlView,
    FieldControlView: FieldControlView,
    RangeControlView: RangeControlView
  };
});
