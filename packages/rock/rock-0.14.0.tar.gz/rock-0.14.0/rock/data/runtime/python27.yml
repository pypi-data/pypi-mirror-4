env:
  PATH: "${ROCK_PATH}/scripts:${ROCK_PATH}/bin:${ROCK_PATH}/venv/bin:${PATH}"
  PYTHONPATH: "${ROCK_PATH}:${PYTHONPATH}"
  ROCK_PIP_INSTALL: "install -r ./requirements.txt"
  ROCK_PIP_INSTALL_DEPLOYMENT: "--verbose install -r ./requirements.txt"
  ROCK_VIRTUALENV: "--distribute ./venv"
  ROCK_VIRTUALENV_DEPLOYMENT: "--verbose --distribute ./venv"

build: |

  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock build [--deployment]'
    echo
    echo '  --help             show help message'
    echo '  --deployment       run build in deployment mode'
    exit
  fi

  if [[ "${ROCK_ARGS_DEPLOYMENT}" != "true" ]]; then
    if [[ ! -f ./venv/bin/activate ]]; then
      virtualenv ${ROCK_VIRTUALENV}
    fi
    if [[ -f ./requirements.txt ]]; then
      pip ${ROCK_PIP_INSTALL}
    else
      warn 'no "requirements.txt" file found'
    fi
    if [[ "${ROCK_PIP_FREEZE}" != "false" ]]; then
      pip freeze > requirements.txt
    fi
  else
    if [[ ! -f ./requirements.txt ]]; then
      die 'no "requirements.txt" file found'
    fi
    if [[ ! -f ./venv/bin/activate ]]; then
      virtualenv ${ROCK_VIRTUALENV_DEPLOYMENT}
    fi
    pip ${ROCK_PIP_INSTALL_DEPLOYMENT}
    virtualenv --relocatable ./venv
  fi

test: |

  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock test'
    echo
    echo '  --help             show help message'
    exit
  fi

  python -m unittest discover ./tests

clean: |

  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock clean'
    echo
    echo '  --help             show help message'
    exit
  fi

  if [[ -d ./venv ]]; then
    rm -fr ./venv
  fi
