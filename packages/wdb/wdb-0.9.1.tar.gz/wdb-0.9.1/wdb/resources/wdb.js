// Generated by CoffeeScript 1.4.0
(function() {
  var $sourcecode, $traceback, backsearch, breakset, breakunset, check, cmd_hist, code, cwd, dump, echo, execute, fallback, format_fun, get_random_port, historize, i, init, last_cmd, log, make_ws, open, print, print_help, print_hist, register_handlers, searchback, searchback_stop, select, send, session_cmd_hist, start, started, stop, suggest, suggest_stop, termscroll, time, title, toggle_break, trace, ws, __ws_port_index, __ws_ports, _i,
    _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  time = function() {
    var d;
    d = new Date();
    return "" + (d.getHours()) + ":" + (d.getMinutes()) + ":" + (d.getSeconds()) + "." + (d.getMilliseconds());
  };

  started = false;

  stop = false;

  ws = null;

  cwd = null;

  backsearch = null;

  get_random_port = function() {
    return 10000 + parseInt(Math.random() * 50000);
  };

  __ws_ports = [];

  for (i = _i = 0; _i <= 5; i = ++_i) {
    __ws_ports.push(get_random_port());
  }

  __ws_port_index = 0;

  cmd_hist = {};

  session_cmd_hist = {};

  $sourcecode = null;

  $traceback = null;

  send = function(msg) {
    console.log(time(), '->', msg);
    return ws.send(msg);
  };

  this.indexedDB = this.indexedDB || this.mozIndexedDB || this.webkitIndexedDB || this.msIndexedDB;

  this.IDBTransaction = this.IDBTransaction || this.webkitIDBTransaction || this.msIDBTransaction;

  this.IDBKeyRange = this.IDBKeyRange || this.webkitIDBKeyRange || this.msIDBKeyRange;

  fallback = function() {
    var file_cache;
    file_cache = {};
    this.get = function(type) {
      return function(obj, callback) {
        return callback(obj in file_cache && file_cache[obj]);
      };
    };
    return this.set = function(type) {
      return function(obj) {
        return file_cache[obj.name] = obj;
      };
    };
  };

  if (!this.indexedDB) {
    fallback();
  } else {
    open = this.indexedDB.open('wdbdb', 2);
    open.onerror = function(event) {
      return console.log('Error when opening wdbdb', event);
    };
    open.onupgradeneeded = function(event) {
      var db;
      db = event.target.result;
      db.createObjectStore("file", {
        keyPath: "name"
      });
      return db.createObjectStore("cmd", {
        keyPath: "name"
      });
    };
    open.onsuccess = function(event) {
      console.info('wdbdb is open');
      _this.wdbdb = open.result;
      _this.get = function(type) {
        return function(key, callback, notfound, always) {
          var rq;
          rq = this.wdbdb.transaction([type]).objectStore(type).get(key);
          rq.onsuccess = function(event) {
            if (event.target.result) {
              callback(event.target.result);
            } else {
              notfound && notfound();
            }
            return always && always();
          };
          if (notfound) {
            rq.onerror = function(event) {
              notfound();
              return always && always();
            };
          }
          return null;
        };
      };
      _this.set = function(type) {
        return function(obj) {
          var os, rq;
          rq = this.wdbdb.transaction([type], 'readwrite');
          os = rq.objectStore(type);
          os.put(obj);
          rq.onerror = function(event) {
            return console.log('Add error', event);
          };
          return null;
        };
      };
      return _this.wdbdb.transaction(['cmd']).objectStore('cmd').openCursor().onsuccess = function(event) {
        var cursor;
        cursor = event.target.result;
        if (cursor) {
          cmd_hist[cursor.value.name] = cursor.value.history;
          return cursor["continue"]();
        }
      };
    };
    open.onerror = function(event) {
      console.log('Error when opening wdbdb', event);
      return fallback();
    };
  }

  $.SyntaxHighlighter.loadedExtras = true;

  $.SyntaxHighlighter.init({
    debug: true,
    lineNumbers: false,
    highlight: false,
    load: false
  });

  make_ws = function() {
    var new_ws,
      _this = this;
    console.log('Opening new socket');
    new_ws = new WebSocket("ws://" + document.location.hostname + ":" + __ws_ports[__ws_port_index]);
    new_ws.onclose = function(m) {
      console.log("WebSocket closed " + m);
      if (!stop) {
        __ws_port_index++;
        if (__ws_port_index < __ws_ports.length) {
          return setTimeout((function() {
            return _this.ws = ws = make_ws();
          }), 100);
        }
      }
    };
    new_ws.onerror = function(m) {
      console.log("WebSocket error " + m);
      if (!stop) {
        return setTimeout((function() {
          return _this.ws = ws = make_ws();
        }), 1000);
      }
    };
    new_ws.onopen = function(m) {
      console.log("WebSocket is open", m);
      if (!started) {
        register_handlers();
        started = true;
      }
      start();
      $('#waiter').remove();
      $('#wdb').show();
      return $('#eval').focus();
    };
    new_ws.onmessage = function(m) {
      var cmd, data, message, pipe, treat;
      if (stop) {
        return;
      }
      message = m.data;
      pipe = message.indexOf('|');
      if (pipe > -1) {
        cmd = message.substr(0, pipe);
        data = JSON.parse(message.substr(pipe + 1));
      } else {
        cmd = message;
      }
      console.log(time(), '<-', cmd);
      treat = (function() {
        switch (cmd) {
          case 'Init':
            return init;
          case 'Title':
            return title;
          case 'Trace':
            return trace;
          case 'Check':
            return check;
          case 'Select':
            return select;
          case 'Print':
            return print;
          case 'Echo':
            return echo;
          case 'BreakSet':
            return breakset;
          case 'BreakUnset':
            return breakunset;
          case 'Dump':
            return dump;
          case 'Suggest':
            return suggest;
          case 'Log':
            return log;
        }
      })();
      if (!treat) {
        return console.log('Unknown command', cmd);
      } else {
        return treat(data);
      }
    };
    return new_ws;
  };

  $(function() {
    var end, xhr;
    setTimeout(function() {
      var dot;
      $('#waiter').text('Wdb is tracing your request. It may take some time.');
      dot = function() {
        if ($('#waiter').length) {
          $('#waiter').text($('#waiter').text() + '.');
          return setTimeout(dot, 250);
        }
      };
      return dot();
    }, 250);
    end = function(page) {
      stop = true;
      if (ws) {
        try {
          send('Quit');
          ws.close();
        } catch (e) {
          ({});
        }
      }
      document.open();
      document.write(page);
      return document.close();
    };
    if (__ws_post) {
      xhr = $.ajax(location.href, {
        type: 'POST',
        data: __ws_post.data,
        contentType: __ws_post.enctype,
        traditional: true,
        headers: {
          'X-Debugger': 'WDB-' + __ws_ports.join(',')
        }
      });
    } else {
      xhr = $.ajax(location.href, {
        headers: {
          'X-Debugger': 'WDB-' + __ws_ports.join(',')
        }
      });
    }
    xhr.done(function(data) {
      return end(data);
    }).fail(function(data) {
      if (data.responseText) {
        return end(data.responseText);
      }
    });
    _this.ws = ws = make_ws();
    return _this.onbeforeunload = function() {
      try {
        console.log('Try jit quit');
        send('Quit');
      } catch (e) {
        ({});
      }
      return void 0;
    };
  });

  start = function() {
    send('Start');
    $sourcecode = $('#sourcecode');
    return $traceback = $('#traceback');
  };

  init = function(data) {
    return cwd = data.cwd;
  };

  title = function(data) {
    $('#title').text(data.title).append($('<small>').text(data.subtitle));
    $('#source').css({
      height: $(window).height() - $('#title').outerHeight(true) - 10
    });
    return $traceback.css({
      height: $(window).height() - $('#title').outerHeight(true) - 10
    });
  };

  trace = function(data) {
    var $tracecode, $tracefile, $tracefilelno, $tracefun, $tracefunfun, $traceline, $tracelno, frame, suffix, _j, _len, _ref;
    $traceback.empty();
    _ref = data.trace;
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      frame = _ref[_j];
      $traceline = $('<div>').addClass('traceline').attr('id', 'trace-' + frame.level).attr('data-level', frame.level);
      $tracefile = $('<span>').addClass('tracefile').text(frame.file);
      $tracelno = $('<span>').addClass('tracelno').text(frame.lno);
      $tracefun = $('<span>').addClass('tracefun').text(frame["function"]);
      $tracefilelno = $('<div>').addClass('tracefilelno').append($tracefile).append($tracelno);
      $tracefunfun = $('<div>').addClass('tracefunfun').append($tracefun);
      if (frame.file.indexOf('site-packages') > 0) {
        suffix = frame.file.split('site-packages').slice(-1)[0];
        $tracefile.text(suffix);
        $tracefile.prepend($('<span>').addClass('tracestar').text('*').attr({
          title: frame.file
        }));
      }
      if (frame.file.indexOf(cwd) === 0) {
        suffix = frame.file.split(cwd).slice(-1)[0];
        $tracefile.text(suffix);
        $tracefile.prepend($('<span>').addClass('tracestar').text('.').attr({
          title: frame.file
        }));
      }
      $tracecode = $('<div>').addClass('tracecode');
      code($tracecode, frame.code);
      $traceline.append($tracefilelno);
      $traceline.append($tracecode);
      $traceline.append($tracefunfun);
      $traceback.prepend($traceline);
    }
    return $('.traceline').on('click', function() {
      return send('Select|' + $(this).attr('data-level'));
    });
  };

  check = function(data) {
    return _this.get('file')(data.name, (function(file) {
      if (file.sha512 !== data.sha512) {
        return send('File');
      } else {
        return send('NoFile');
      }
    }), (function() {
      return send('File');
    }));
  };

  select = function(data) {
    var current_frame, handle_file;
    if (data.file) {
      code($sourcecode.empty(), data.file, ['linenums']);
      $sourcecode.attr('title', data.name);
      set('file')({
        name: data.name,
        file: $sourcecode.html(),
        sha512: data.sha512
      });
    }
    current_frame = data.frame;
    $('.traceline').removeClass('selected');
    $('#trace-' + current_frame.level).addClass('selected');
    $('#eval').val('').attr('data-index', -1).attr('rows', 1);
    handle_file = function(file) {
      var $cur_line, $line, lno, _j, _k, _len, _ref, _ref1, _ref2;
      $sourcecode.html(file.file);
      $sourcecode.attr('title', current_frame.file);
      $('#sourcecode li.highlighted').removeClass('highlighted').addClass('highlighted-other');
      _ref = data.breaks;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        lno = _ref[_j];
        $('.linenums li').eq(lno - 1).addClass('breakpoint');
      }
      $cur_line = $sourcecode.find('li').eq(current_frame.lno - 1);
      $cur_line.addClass('highlighted');
      $sourcecode.find('li.ctx').removeClass('ctx');
      for (lno = _k = _ref1 = current_frame.flno, _ref2 = current_frame.llno + 1; _ref1 <= _ref2 ? _k < _ref2 : _k > _ref2; lno = _ref1 <= _ref2 ? ++_k : --_k) {
        $line = $sourcecode.find('li').eq(lno - 1);
        $line.addClass('ctx');
        if (lno === current_frame.flno) {
          $line.addClass('ctx-top');
        } else if (lno === current_frame.llno) {
          $line.addClass('ctx-bottom');
        }
      }
      return $sourcecode.stop().animate({
        scrollTop: $cur_line.position().top - $sourcecode.innerHeight() / 2 + $sourcecode.scrollTop()
      }, 100);
    };
    if (data.file) {
      return handle_file(data.file);
    } else {
      return get('file')(current_frame.file, handle_file);
    }
  };

  code = function(parent, code, classes) {
    var cls, _j, _len;
    if (classes == null) {
      classes = [];
    }
    code = $('<code class="language">' + code + '</code>');
    for (_j = 0, _len = classes.length; _j < _len; _j++) {
      cls = classes[_j];
      code.addClass(cls);
    }
    parent.append(code);
    code.syntaxHighlight();
    setTimeout((function() {
      return code.syntaxHighlight();
    }), 50);
    code.find('span').each(function() {
      var txt;
      txt = $(this).text();
      if (txt.length > 128) {
        $(this).text('');
        $(this).append($('<span class="short close">').text(txt.substr(0, 128)));
        return $(this).append($('<span class="long">').text(txt.substr(128)));
      }
    });
    return code;
  };

  historize = function(snippet) {
    var filename, index;
    filename = $('.selected .tracefile').text();
    if (!(filename in cmd_hist)) {
      cmd_hist[filename] = [];
    }
    if (!(filename in session_cmd_hist)) {
      session_cmd_hist[filename] = [];
    }
    while ((index = cmd_hist[filename].indexOf(snippet)) !== -1) {
      cmd_hist[filename].splice(index, 1);
    }
    cmd_hist[filename].unshift(snippet);
    session_cmd_hist[filename].unshift(snippet);
    return set('cmd')({
      name: filename,
      history: cmd_hist[filename]
    });
  };

  last_cmd = null;

  execute = function(snippet) {
    var cmd, data, key, space;
    snippet = snippet.trim();
    historize(snippet);
    cmd = function(cmd) {
      send(cmd);
      return last_cmd = cmd;
    };
    if (snippet.indexOf('.') === 0) {
      space = snippet.indexOf(' ');
      if (space > -1) {
        key = snippet.substr(1, space - 1);
        data = snippet.substr(space + 1);
      } else {
        key = snippet.substr(1);
        data = '';
      }
      switch (key) {
        case 's':
          cmd('Step');
          break;
        case 'n':
          cmd('Next');
          break;
        case 'r':
          cmd('Return');
          break;
        case 'c':
          cmd('Continue');
          break;
        case 'u':
          cmd('Until');
          break;
        case 'j':
          cmd('Jump|' + data);
          break;
        case 'b':
          toggle_break(data);
          break;
        case 't':
          toggle_break(data, true);
          break;
        case 'f':
          print_hist(session_cmd_hist[filename]);
          break;
        case 'd':
          cmd('Dump|' + data);
          break;
        case 'q':
          cmd('Quit');
          break;
        case 'h':
          print_help();
      }
      return;
    } else if (snippet.indexOf('?') === 0) {
      cmd('Dump|' + snippet.slice(1).trim());
      suggest_stop();
      return;
    } else if (snippet === '' && last_cmd) {
      cmd(last_cmd);
      return;
    }
    if (snippet) {
      return send("Eval|" + snippet);
    }
  };

  print_hist = function(hist) {
    return print({
      "for": 'History',
      result: hist.slice(0).reverse().filter(function(e) {
        return e.indexOf('.') !== 0;
      }).join('\n')
    });
  };

  print_help = function() {
    return print({
      "for": 'Supported commands',
      result: '.s or [Ctrl] + [↓] or [F11]  : Step into\n.n or [Ctrl] + [→] or [F10]  : Step over (Next)\n.r or [Ctrl] + [↑] or [F9]   : Step out (Return)\n.c or [Ctrl] + [←] or [F8]   : Continue\n.u or [F7]                   : Until (Next over loops)\n.j lineno                    : Jump to lineno (Must be at bottom frame and in the same function)\n.b [file:]lineno[, condition]: Break on file at lineno (file is the current file by default)\n.t [file:]lineno[, condition]: Same as b but break only once\n.f                           : Echo all typed commands in the current debugging session\n.d expression                : Dump the result of expression in a table\n.q                           : Quit\n.h                           : Get some help\nexpr !> file                 : Write the result of expr in file\n!< file                      : Eval the content of file\n[Enter]                      : Eval the current selected text in page, useful to eval code in the source'
    });
  };

  termscroll = function() {
    return $('#interpreter').stop(true).animate({
      scrollTop: $('#scrollback').height()
    }, 1000);
  };

  print = function(data) {
    var snippet;
    suggest_stop();
    snippet = $('#eval').val();
    code($('#scrollback'), data["for"], ['prompted']);
    code($('#scrollback'), data.result);
    $('#eval').val('').attr('data-index', -1).attr('rows', 1);
    return termscroll();
  };

  echo = function(data) {
    code($('#scrollback'), data["for"], ['prompted']);
    code($('#scrollback'), data.val || '');
    return termscroll();
  };

  dump = function(data) {
    var $attr_tbody, $container, $core_tbody, $method_tbody, $table, $tbody, key, val, _ref;
    code($('#scrollback'), data["for"], ['prompted']);
    $container = $('<div>');
    $table = $('<table>', {
      "class": 'object'
    }).appendTo($container);
    $table.append($('<tbody>', {
      "class": 'toggle hidden'
    }).append($('<tr>').append($('<td>', {
      "class": 'core',
      colspan: 2
    }).text('Core Members'))));
    $core_tbody = $('<tbody>', {
      "class": 'core hidden'
    }).appendTo($table);
    $table.append($('<tbody>', {
      "class": 'toggle hidden'
    }).append($('<tr>').append($('<td>', {
      "class": 'method',
      colspan: 2
    }).text('Methods'))));
    $method_tbody = $('<tbody>', {
      "class": 'method hidden'
    }).appendTo($table);
    $table.append($('<tbody>', {
      "class": 'toggle shown'
    }).append($('<tr>').append($('<td>', {
      "class": 'attr',
      colspan: 2
    }).text('Attributes'))));
    $attr_tbody = $('<tbody>', {
      "class": 'attr shown'
    }).appendTo($table);
    _ref = data.val;
    for (key in _ref) {
      val = _ref[key];
      $tbody = $attr_tbody;
      if (key.indexOf('__') === 0 && key.indexOf('__', key.length - 2) !== -1) {
        $tbody = $core_tbody;
      } else if (val.type.indexOf('method') !== -1) {
        $tbody = $method_tbody;
      }
      $tbody.append($('<tr>').append($('<td>').text(key)).append($('<td>').html(val.val)));
    }
    code($('#scrollback'), $container.html());
    termscroll();
    return $('#eval').val('');
  };

  breakset = function(data) {
    var $eval, $line;
    if (data.lno) {
      $line = $('.linenums li').eq(data.lno - 1);
      $line.removeClass('ask-breakpoint').addClass('breakpoint');
      if (data.cond) {
        $line.attr('title', "On [" + data.cond + "]");
      }
    }
    $eval = $('#eval');
    if ($eval.val().indexOf('.b ') === 0 || $eval.val().indexOf('.t ') === 0) {
      return $eval.val('');
    }
  };

  breakunset = function(data) {
    var $eval;
    $('.linenums li').eq(data.lno - 1).removeClass('ask-breakpoint').attr('title', '');
    $eval = $('#eval');
    if ($eval.val().indexOf('.b ') === 0) {
      return $eval.val('');
    }
  };

  toggle_break = function(lno, temporary) {
    var $line, cmd;
    cmd = temporary ? 'TBreak' : 'Break';
    if (('' + lno).indexOf(':') > -1) {
      send(cmd + '|' + lno);
      return;
    }
    $line = $('.linenums li').eq(lno - 1);
    if ($line.hasClass('breakpoint')) {
      send('Unbreak|' + lno);
      return $line.removeClass('breakpoint').addClass('ask-breakpoint');
    } else {
      $line.addClass('ask-breakpoint');
      return send(cmd + '|' + lno);
    }
  };

  format_fun = function(p) {
    var cls, param, tags, _j, _len, _ref;
    tags = [
      $('<span>', {
        "class": 'fun_name',
        title: p.module
      }).text(p.call_name), $('<span>', {
        "class": 'fun_punct'
      }).text('(')
    ];
    _ref = p.params;
    for (i = _j = 0, _len = _ref.length; _j < _len; i = ++_j) {
      param = _ref[i];
      cls = 'fun_param';
      if (i === p.index || (i === p.params.length - 1 && p.index > i)) {
        cls = 'fun_param active';
      }
      tags.push($('<span>', {
        "class": cls
      }).text(param));
      if (i !== p.params.length - 1) {
        tags.push($('<span>', {
          "class": 'fun_punct'
        }).text(', '));
      }
    }
    tags.push($('<span>', {
      "class": 'fun_punct'
    }).text(')'));
    return tags;
  };

  suggest = function(data) {
    var $appender, $comp, $eval, $tbody, $td, added, base_len, completion, index, _j, _len, _ref, _ref1;
    $eval = $('#eval');
    $comp = $('#completions table').empty();
    $comp.append($('<thead><tr><th id="comp-desc" colspan="5">'));
    added = [];
    if (data.params) {
      $('#comp-desc').append(format_fun(data.params));
    }
    if (data.completions.length) {
      $tbody = $('<tbody>');
      base_len = data.completions[0].base.length;
      $eval.data({
        root: $eval.val().substr(0, $eval.val().length - base_len)
      });
    }
    _ref = data.completions;
    for (index = _j = 0, _len = _ref.length; _j < _len; index = ++_j) {
      completion = _ref[index];
      if (_ref1 = completion.base + completion.complete, __indexOf.call(added, _ref1) >= 0) {
        continue;
      }
      added.push(completion.base + completion.complete);
      if (index % 5 === 0) {
        $tbody.append($appender = $('<tr>'));
      }
      $appender.append($td = $('<td>').attr('title', completion.description).append($('<span>').addClass('base').text(completion.base)).append($('<span>').addClass('completion').text(completion.complete)));
      if (!completion.complete) {
        $td.addClass('active complete');
        $('#comp-desc').html($td.attr('title'));
      }
    }
    $comp.append($tbody);
    return termscroll();
  };

  suggest_stop = function() {
    return $('#completions table').empty();
  };

  log = function(data) {
    return console.log(data.message);
  };

  searchback = function() {
    var h, index, re, val, _j, _len, _ref;
    suggest_stop();
    index = backsearch;
    val = $('#eval').val();
    _ref = cmd_hist[$('.selected .tracefile').text()];
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      h = _ref[_j];
      re = new RegExp('(' + val + ')', 'gi');
      if (re.test(h)) {
        index--;
        if (index === 0) {
          $('#backsearch').html(h.replace(re, '<span class="backsearched">$1</span>'));
          return;
        }
      }
    }
    if (backsearch === 1) {
      searchback_stop();
      return;
    }
    return backsearch = Math.max(backsearch - 1, 1);
  };

  searchback_stop = function(validate) {
    if (validate) {
      $('#eval').val($('#backsearch').text());
    }
    $('#backsearch').html('');
    return backsearch = null;
  };

  register_handlers = function() {
    $('body,html').on('keydown', function(e) {
      if ((e.ctrlKey && e.keyCode === 37) || e.keyCode === 119) {
        send('Continue');
        return false;
      }
      if ((e.ctrlKey && e.keyCode === 38) || e.keyCode === 120) {
        send('Return');
        return false;
      }
      if ((e.ctrlKey && e.keyCode === 39) || e.keyCode === 121) {
        send('Next');
        return false;
      }
      if ((e.ctrlKey && e.keyCode === 40) || e.keyCode === 122) {
        send('Step');
        return false;
      }
      if (e.keyCode === 118) {
        send('Until');
        return false;
      }
    });
    $('#eval').on('keydown', function(e) {
      var $active, $eval, $tds, base, completion, endPos, filename, index, startPos, to_set, txtarea;
      $eval = $(this);
      if (e.altKey && e.keyCode === 82 && backsearch) {
        backsearch = Math.max(backsearch - 1, 1);
        searchback();
        return false;
      }
      if (e.ctrlKey) {
        if (e.keyCode === 82) {
          if (backsearch === null) {
            backsearch = 1;
          } else {
            if (e.shiftKey) {
              backsearch = Math.max(backsearch - 1, 1);
            } else {
              backsearch++;
            }
          }
          searchback();
          return false;
        } else if (e.keyCode === 67) {
          searchback_stop();
        } else {
          e.stopPropagation();
          return;
        }
      }
      if (e.keyCode === 13) {
        if (backsearch) {
          searchback_stop(true);
          return false;
        }
        if ($('#completions table td.active').length && !$('#completions table td.complete').length) {
          suggest_stop();
          return false;
        }
        $eval = $(this);
        if (!e.shiftKey) {
          execute($eval.val());
          return false;
        } else {
          $eval.attr('rows', parseInt($eval.attr('rows')) + 1);
          return termscroll();
        }
      } else if (e.keyCode === 27) {
        suggest_stop();
        searchback_stop();
        return false;
      } else if (e.keyCode === 9) {
        if (e.shiftKey) {
          $eval = $(this);
          txtarea = $eval.get(0);
          startPos = txtarea.selectionStart;
          endPos = txtarea.selectionEnd;
          if (startPos || startPos === '0') {
            $eval.val($eval.val().substring(0, startPos) + '    ' + $eval.val().substring(endPos, $eval.val().length));
          } else {
            $eval.val($eval.val() + '    ');
          }
          return false;
        }
        if (backsearch) {
          return false;
        }
        $tds = $('#completions table td');
        $active = $tds.filter('.active');
        if ($tds.length) {
          if (!$active.length) {
            $active = $tds.first().addClass('active');
          } else {
            index = $tds.index($active);
            if (index === $tds.length - 1) {
              index = 0;
            } else {
              index++;
            }
            $active.removeClass('active complete');
            $active = $tds.eq(index).addClass('active');
          }
          base = $active.find('.base').text();
          completion = $active.find('.completion').text();
          $eval.val($eval.data().root + base + completion);
          $('#comp-desc').text($active.attr('title'));
          termscroll();
        }
        return false;
      } else if (e.keyCode === 38) {
        $eval = $(this);
        filename = $('.selected .tracefile').text();
        if (!e.shiftKey) {
          if (filename in cmd_hist) {
            index = parseInt($eval.attr('data-index')) + 1;
            if (index >= 0 && index < cmd_hist[filename].length) {
              to_set = cmd_hist[filename][index];
              if (index === 0) {
                $eval.attr('data-current', $eval.val());
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      } else if (e.keyCode === 40) {
        $eval = $(this);
        filename = $('.selected .tracefile').text();
        if (!e.shiftKey) {
          if (filename in cmd_hist) {
            index = parseInt($eval.attr('data-index')) - 1;
            if (index >= -1 && index < cmd_hist[filename].length) {
              if (index === -1) {
                to_set = $eval.attr('data-current');
              } else {
                to_set = cmd_hist[filename][index];
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      }
    });
    $("#scrollback").on('click', 'a.inspect', function() {
      send('Inspect|' + $(this).attr('href'));
      return false;
    }).on('click', '.short.close', function() {
      return $(this).addClass('open').removeClass('close').next('.long').show('fast');
    }).on('click', '.long,.short.open', function() {
      var elt;
      elt = $(this).hasClass('long') ? $(this) : $(this).next('.long');
      return elt.hide('fast').prev('.short').removeClass('open').addClass('close');
    }).on('click', '.toggle', function() {
      return $(this).add($(this).next()).toggleClass('hidden', 'shown');
    });
    $("#sourcecode").on('click', '.linenums li', function(e) {
      var lno;
      if (this === e.target && e.pageX < $(this).offset().left) {
        lno = $(this).parent().find('li').index(this) + 1;
        return toggle_break(lno);
      }
    });
    $("#sourcecode").on('mouseup', 'span', function(e) {
      var target;
      if (e.which === 2) {
        target = $(this).text().trim();
        historize(target);
        return send('Dump|' + target);
      }
    });
    $(document).on('keydown', function(e) {
      var sel;
      if (e.keyCode === 13) {
        sel = document.getSelection().toString().trim();
        if (sel) {
          historize(sel);
          return send('Dump|' + sel);
        }
      }
    });
    return $('#eval').on('input', function() {
      var hist, txt;
      txt = $(this).val();
      if (backsearch) {
        if (!txt) {
          searchback_stop();
        } else {
          backsearch = 1;
          searchback();
        }
        return;
      }
      hist = session_cmd_hist[$('.selected .tracefile').text()] || [];
      if (txt && txt[0] !== '.') {
        return send('Complete|' + hist.slice(0).reverse().filter(function(e) {
          return e.indexOf('.') !== 0;
        }).join('\n') + '\n' + txt);
      } else {
        return suggest_stop();
      }
    }).on('blur', function() {
      return searchback_stop();
    });
  };

}).call(this);
