<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
      lang="en-US"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

<head>
  <metal:block fill-slot="top_slot"
                 tal:define="dummy python:request.set('disable_border', 1)" />
  <metal:block fill-slot="style_slot">
    <!-- NOTE: order is important for these CSS style sheets. -->
    <!-- Import COMMON CALENDAR CSS style sheet. -->
    <LINK href="calendar.css" type=text/css rel=stylesheet 
          tal:attributes="href string:calendar.css"/>
    <!-- Import VIEW-SPECIFIC CSS style sheet. -->
    <!-- UNIQUE FOR EACH CALENDAR VIEW. -->
    <LINK href="weekbyday.css" type=text/css rel=stylesheet 
          tal:attributes="href string:weekbyday.css"/>
    <!-- Import PRINTING CSS style sheet -->
    <LINK href="calendarPrint.css" type="text/css" media="print" rel="stylesheet" 
          tal:attributes="href string:calendarPrint.css" />
    <!-- Import COMMON JavaScript files (one for basic dhtml-functions, the other for calendar-application specific functions. -->
    <script type="text/javascript" src="dhtml.js" 
          tal:attributes="src string:dhtml.js"></script>
    <script type="text/javascript" src="calendar.js" 
          tal:attributes="src string:calendar.js"></script>
    <!-- Set VIEW-SPECIFIC JS parameter -->
    <script type="text/javascript">
<!--
    setMax(7);
-->
    </script>
  </metal:block>
</head>                               

<body>
<!-- Defining global variables -->
<div metal:fill-slot="main"
       i18n:domain="calendarx"
       tal:define="
                 MODIFIED string:mod for 0.6.6 to use  tal:omit-tag in i18n date strings;
                 viewname string:weekbyday;
                 context python:here;
                 DateTime python:modules['DateTime'].DateTime; 
                 Dict python:here.getDictWeekbyday();
                 url here/absolute_url;
                 ampm Dict/ampm;
                 xmy Dict/xmy;
                 xsub Dict/xsub;
                 xpub Dict/xpub;
                 xcrt Dict/xcrt;
                 currentDate Dict/currentDate;
                 startDate Dict/startDate;
                 endDate Dict/endDate;
                 showHighlightFullEvent python: here.getCXAttribute('showHighlightFullEvent');
                 useSubjectIcons        python: here.getCXAttribute('useSubjectIcons');
                 useSubjCSS             python: here.getCXAttribute('useSubjectCSSClasses');  
                 useEventTypeIcons      python: here.getCXAttribute('useEventTypeIcons');
                 useETCSS               python: here.getCXAttribute('useEventTypeCSSClasses');
                 LEOAS                  python: here.getCXAttribute('labelEventsOnlyAtStart');
                 st python: startDate;
                 en python: endDate;
                 bigQ python: here.getCXEventsBetween(st, en, xmy, xsub, xpub, xcrt);
                 bigQB python: here.getCXEventsBefore(st, xmy, xsub, xpub, xcrt, en);">

    
<!-- HEADSTUFF: the Title/ID, the Document Action icons (print,etc), and Description -->
<metal:block metal:use-macro="python:here.getCXMacro('headstuff')"/>


<!-- the main table -->
<table cellspacing="0" class="caltabs">


<!-- ROW: the tabs "month", "week", "week2", "day" -->
<metal:block metal:use-macro="python:here.getCXMacro('caltabsforviews')"/>


<!-- ROW: the "subject categories" options -->
<metal:block metal:use-macro="python:here.getCXMacro('subjectlinks')"/>


  <tr> 
    <td class="body">


<!-- "previous", "next" and current date string. -->
<metal:block metal:use-macro="python:here.getCXMacro('prevnextcurrentlinks')"/>




<table class="calall" tal:define="startForContinuing Dict/startForContinuing;
                                  continuingEvents python:[ev for ev in bigQB if (ev.start < startForContinuing and ev.end >= startForContinuing)]"
                      tal:condition="continuingEvents">
  <tr><th i18n:translate="heading_continuing_events">Whole-Week-Events or Started-Already-And-Still-Running-Events</th></tr>
  <tr class="noevent" 
      tal:define="
                  dayID python: 0;"
      tal:attributes="class python: test(continuingEvents, 'event', 'noevent');
	                  id string:cal${dayID}">
    <td>
       <metal:block tal:repeat="event continuingEvents"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${dayID}event${repeat/event/number};
                              eDict python:here.getEventDictWeekbyday(event,type='C', dayID=dayID,cDate=currentDate);
                              eventstart  eDict/eventstart;
                              eventend  eDict/eventend;
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,context.getSubjectCSSClasses(event),'eventPrivate'); 
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished'); ">

<metal:block metal:use-macro="python:here.getCXMacro('eventlister')"/>
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>
            </span>
       </metal:block>&nbsp;
    </td>
  </tr>
</table>



<!-- the weekbyday-calendar-view. -->
<table class="cal">
<!-- iterate through the days (rows of the table) -->
  <metal:block tal:repeat="weekDay python:range(7)">
  <span tal:omit-tag="" 
        tal:define="
                  dayID python: weekDay + 1;
                  start python: here.getStartOfDay(startDate) + weekDay;
                  end python: here.getEndOfDay(start);
                  COMMENT string: OLD Way - events python: here.getCXEventsBetween(start, end, xmy, xsub, xpub, xcrt);
                  events python: [ev for ev in bigQ if (ev.start >= start and ev.start <= end)];
                  COMMENT string: OLD Way - startForBefore python: DateTime(str(start.year())+'/'+str(start.month())+'/'+str(start.day())+' 00:01:00');
                  startForBefore python: start + (1.0/24.0/60.0);
                  COMMENT string: OLD Way - eventsBefore python: here.getCXEventsBefore(startForBefore, xmy, xsub, xpub, xcrt); 
                  eventsBefore python: [ev for ev in bigQB if (ev.start < startForBefore and ev.end >= startForBefore)];
                  COMMENT string: tester determines whether to highlight full extent of events on the calendar; 
                  COMMENT string: test and use labelEventsOnlyAtStart (LEOAS) or not; 
                  events python: test(LEOAS,events,context.queriesUnique(eventsBefore+events)) ; 
                  tester python: test(showHighlightFullEvent,(events or eventsBefore),events);">
    <tr><th><a href="#" tal:attributes="href string: ${url}/day?currentDate=${start}&xmy=${xmy}&xsub=${xsub}">
          <span class="day">
            <span i18n:translate="heading_fmt_day_weekbyday" tal:omit-tag="">
                <span i18n:name="dayName"><span i18n:translate="" tal:content="python: start.Day()" tal:omit-tag="">dayName</span></span>
                <span i18n:name="month"><span i18n:translate="" tal:content="python: start.Month()" tal:omit-tag="">month</span></span>
                <span i18n:name="day" tal:content="python: start.day()" tal:omit-tag="">day</span>
                <span i18n:name="year" tal:content="python: start.year()" tal:omit-tag="">year</span>
            </span>
          </span></a></th></tr>
  <tr class="noevent" tal:attributes="class python:test(tester, 'event', 'noevent');
		                              id string:cal${dayID}">
    <td>
<!-- iterate through the events of the day -->
       <metal:block tal:repeat="event events"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${dayID}event${repeat/event/number};
                              eDict python:here.getEventDictWeekbyday(event,type='E',dayID=dayID,cDate=currentDate);
                              eventstart  eDict/eventstart;
                              eventend  eDict/eventend;
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,context.getSubjectCSSClasses(event),'eventPrivate'); 
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished'); ">

<!-- print the event text-->
<metal:block metal:use-macro="python:here.getCXMacro('eventlister')"/>

<!-- print the rollover popup text-->
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>

            </span>
       </metal:block>&nbsp;
   </td>
  </tr>
  </span>
  </metal:block>
</table>



<!-- "previous month", "next month" -links and the current month string. -->
<metal:block metal:use-macro="python:here.getCXMacro('prevnextcurrentlinks_nojump')"/>



    </td>
  </tr>
</table>


<metal:block metal:use-macro="python:here.getCXMacro('copyright')"/>
</div>


</body>
</html>



