# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_region', [dirname(__file__)])
        except ImportError:
            import _region
            return _region
        if fp is not None:
            try:
                _mod = imp.load_module('_region', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _region = swig_import_helper()
    del swig_import_helper
else:
    import _region
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import fieldmodule
import timesequence
import optimisation
import field
import differentialoperator
import element
import node
import stream
import fieldcache
class Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _region.new_Region(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _region.delete_Region
    __del__ = lambda self : None;
    def isValid(self): return _region.Region_isValid(self)
    def getId(self): return _region.Region_getId(self)
    def beginChange(self): return _region.Region_beginChange(self)
    def endChange(self): return _region.Region_endChange(self)
    def beginHierarchicalChange(self): return _region.Region_beginHierarchicalChange(self)
    def endHierarchicalChange(self): return _region.Region_endHierarchicalChange(self)
    def createChild(self, *args): return _region.Region_createChild(self, *args)
    def createSubregion(self, *args): return _region.Region_createSubregion(self, *args)
    def createRegion(self): return _region.Region_createRegion(self)
    def getFieldModule(self): return _region.Region_getFieldModule(self)
    def readFile(self, *args): return _region.Region_readFile(self, *args)
    def getName(self): return _region.Region_getName(self)
    def setName(self, *args): return _region.Region_setName(self, *args)
    def getParent(self): return _region.Region_getParent(self)
    def getFirstChild(self): return _region.Region_getFirstChild(self)
    def getNextSibling(self): return _region.Region_getNextSibling(self)
    def getPreviousSibling(self): return _region.Region_getPreviousSibling(self)
    def appendChild(self, *args): return _region.Region_appendChild(self, *args)
    def insertChildBefore(self, *args): return _region.Region_insertChildBefore(self, *args)
    def removeChild(self, *args): return _region.Region_removeChild(self, *args)
    def findChildByName(self, *args): return _region.Region_findChildByName(self, *args)
    def findSubregionAtPath(self, *args): return _region.Region_findSubregionAtPath(self, *args)
    def containsSubregion(self, *args): return _region.Region_containsSubregion(self, *args)
    def read(self, *args): return _region.Region_read(self, *args)
    def write(self, *args): return _region.Region_write(self, *args)
    def createStreamInformation(self): return _region.Region_createStreamInformation(self)
Region_swigregister = _region.Region_swigregister
Region_swigregister(Region)

class StreamInformationRegion(stream.StreamInformation):
    __swig_setmethods__ = {}
    for _s in [stream.StreamInformation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamInformationRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [stream.StreamInformation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamInformationRegion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _region.new_StreamInformationRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    REGION_ATTRIBUTE_INVALID = _region.StreamInformationRegion_REGION_ATTRIBUTE_INVALID
    REGION_ATTRIBUTE_TIME = _region.StreamInformationRegion_REGION_ATTRIBUTE_TIME
    def hasRegionAttribute(self, *args): return _region.StreamInformationRegion_hasRegionAttribute(self, *args)
    def getRegionAttributeReal(self, *args): return _region.StreamInformationRegion_getRegionAttributeReal(self, *args)
    def setRegionAttributeReal(self, *args): return _region.StreamInformationRegion_setRegionAttributeReal(self, *args)
    def hasRegionResourceAttribute(self, *args): return _region.StreamInformationRegion_hasRegionResourceAttribute(self, *args)
    def getRegionResourceAttributeReal(self, *args): return _region.StreamInformationRegion_getRegionResourceAttributeReal(self, *args)
    def setRegionResourceAttributeReal(self, *args): return _region.StreamInformationRegion_setRegionResourceAttributeReal(self, *args)
    __swig_destroy__ = _region.delete_StreamInformationRegion
    __del__ = lambda self : None;
StreamInformationRegion_swigregister = _region.StreamInformationRegion_swigregister
StreamInformationRegion_swigregister(StreamInformationRegion)



