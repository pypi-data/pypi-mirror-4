  !    -*- f90 -*-
  ! Note: the context of this file is case sensitive.
  
  python module mpmle ! in 
  interface  ! in :mpmle
     subroutine multi_process_mle(df,nr,nc,fml_lst,nf,res,fml_vec,ll_vec,pnum,threads_num) ! in :mpmle:mpmle.f90
       use omp_lib
       real(kind=8) dimension(nr,nc),intent(in) :: df
       integer, optional,check(shape(df,0)==nr),depend(df),intent(hide) :: nr=shape(df,0)
       integer, optional,check(shape(df,1)==nc),depend(df),intent(hide) :: nc=shape(df,1)
       integer dimension(nf),intent(in) :: fml_lst
       integer, optional,check(len(fml_lst)>=nf),depend(fml_lst),intent(hide) :: nf=len(fml_lst)
       real(kind=8) dimension(2,pnum),depend(nc),intent(out) :: res
       integer dimension(pnum),intent(out) :: fml_vec
       real(kind=8) dimension(pnum),intent(out) :: ll_vec
       integer intent(in) :: pnum
       integer intent(in) :: threads_num
     end subroutine multi_process_mle
     subroutine multi_process_loglik(df,nr,nc,par_vec,fml_vec,pnum,threads_num,ll) ! in :mpmle:mpmle.f90
       use omp_lib
       real(kind=8) dimension(nr,nc),intent(in) :: df
       integer, optional,check(shape(df,0)==nr),depend(df),intent(hide) :: nr=shape(df,0)
       integer, optional,check(shape(df,1)==nc),depend(df),intent(hide) :: nc=shape(df,1)
       real(kind=8) dimension(2,pnum),intent(in) :: par_vec
       integer dimension(pnum),depend(pnum),intent(in) :: fml_vec
       integer, optional,check(shape(par_vec,1)==pnum),depend(par_vec),intent(hide) :: pnum=shape(par_vec,1)       
       ! integer intent(in) :: pnum
       integer intent(in) :: threads_num
       real(kind=8) intent(out):: ll
     end subroutine multi_process_loglik
     function ad_stat(u,n)
       real(kind=8) dimension(n),intent(in) :: u
       integer, optional, check(len(u)>=n),depend(u),intent(hide) :: n=len(u)
       real(kind=8) intent(out) :: ad_stat
     end function ad_stat
     subroutine adinf(z,res,n)
       real(kind=8) dimension(n),intent(in) :: z
       real(kind=8) dimension(n),intent(out) :: res
       integer, optional, check(len(z)>=n),depend(z),intent(hide) :: n=len(z)
     end subroutine adinf
     subroutine kendalltau(u1,u2,n,tau)
       use qsort_c_module
       real(kind=8) dimension(n),intent(in) :: u1,u2
       integer, optional,check(len(u1)>=n),depend(u1),intent(hide) :: n=len(u1)
       real(kind=8) intent(out) :: tau
     end subroutine kendalltau
  end interface
end program

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
