# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fieldmodule', [dirname(__file__)])
        except ImportError:
            import _fieldmodule
            return _fieldmodule
        if fp is not None:
            try:
                _mod = imp.load_module('_fieldmodule', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fieldmodule = swig_import_helper()
    del swig_import_helper
else:
    import _fieldmodule
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import timesequence
import optimisation
import field
import differentialoperator
import element
import node
import stream
import fieldcache
class FieldModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldModule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fieldmodule.new_FieldModule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fieldmodule.delete_FieldModule
    __del__ = lambda self : None;
    def isValid(self): return _fieldmodule.FieldModule_isValid(self)
    def getId(self): return _fieldmodule.FieldModule_getId(self)
    def beginChange(self): return _fieldmodule.FieldModule_beginChange(self)
    def endChange(self): return _fieldmodule.FieldModule_endChange(self)
    def defineAllFaces(self): return _fieldmodule.FieldModule_defineAllFaces(self)
    def findFieldByName(self, *args): return _fieldmodule.FieldModule_findFieldByName(self, *args)
    def createCache(self): return _fieldmodule.FieldModule_createCache(self)
    def createElementBasis(self, *args): return _fieldmodule.FieldModule_createElementBasis(self, *args)
    def findNodesetByName(self, *args): return _fieldmodule.FieldModule_findNodesetByName(self, *args)
    def findMeshByDimension(self, *args): return _fieldmodule.FieldModule_findMeshByDimension(self, *args)
    def findMeshByName(self, *args): return _fieldmodule.FieldModule_findMeshByName(self, *args)
    def getMatchingTimeSequence(self, *args): return _fieldmodule.FieldModule_getMatchingTimeSequence(self, *args)
    def createOptimisation(self): return _fieldmodule.FieldModule_createOptimisation(self)
    def createAdd(self, *args): return _fieldmodule.FieldModule_createAdd(self, *args)
    def createPower(self, *args): return _fieldmodule.FieldModule_createPower(self, *args)
    def createMultiply(self, *args): return _fieldmodule.FieldModule_createMultiply(self, *args)
    def createDivide(self, *args): return _fieldmodule.FieldModule_createDivide(self, *args)
    def createSubtract(self, *args): return _fieldmodule.FieldModule_createSubtract(self, *args)
    def createSumComponents(self, *args): return _fieldmodule.FieldModule_createSumComponents(self, *args)
    def createLog(self, *args): return _fieldmodule.FieldModule_createLog(self, *args)
    def createSqrt(self, *args): return _fieldmodule.FieldModule_createSqrt(self, *args)
    def createExp(self, *args): return _fieldmodule.FieldModule_createExp(self, *args)
    def createAbs(self, *args): return _fieldmodule.FieldModule_createAbs(self, *args)
    def createIdentity(self, *args): return _fieldmodule.FieldModule_createIdentity(self, *args)
    def createComponent(self, *args): return _fieldmodule.FieldModule_createComponent(self, *args)
    def createIf(self, *args): return _fieldmodule.FieldModule_createIf(self, *args)
    def createConstant(self, *args): return _fieldmodule.FieldModule_createConstant(self, *args)
    def createStringConstant(self, *args): return _fieldmodule.FieldModule_createStringConstant(self, *args)
    def createCoordinateTransformation(self, *args): return _fieldmodule.FieldModule_createCoordinateTransformation(self, *args)
    def createVectorCoordinateTransformation(self, *args): return _fieldmodule.FieldModule_createVectorCoordinateTransformation(self, *args)
    def createFiniteElement(self, *args): return _fieldmodule.FieldModule_createFiniteElement(self, *args)
    def createEmbedded(self, *args): return _fieldmodule.FieldModule_createEmbedded(self, *args)
    def createFindMeshLocation(self, *args): return _fieldmodule.FieldModule_createFindMeshLocation(self, *args)
    def createNodeValue(self, *args): return _fieldmodule.FieldModule_createNodeValue(self, *args)
    def createStoredMeshLocation(self, *args): return _fieldmodule.FieldModule_createStoredMeshLocation(self, *args)
    def createStoredString(self): return _fieldmodule.FieldModule_createStoredString(self)
    def createGroup(self): return _fieldmodule.FieldModule_createGroup(self)
    def createImage(self): return _fieldmodule.FieldModule_createImage(self)
    def createImageFromSource(self, *args): return _fieldmodule.FieldModule_createImageFromSource(self, *args)
    def createAnd(self, *args): return _fieldmodule.FieldModule_createAnd(self, *args)
    def createEqualTo(self, *args): return _fieldmodule.FieldModule_createEqualTo(self, *args)
    def createGreaterThan(self, *args): return _fieldmodule.FieldModule_createGreaterThan(self, *args)
    def createLessThan(self, *args): return _fieldmodule.FieldModule_createLessThan(self, *args)
    def createOr(self, *args): return _fieldmodule.FieldModule_createOr(self, *args)
    def createNot(self, *args): return _fieldmodule.FieldModule_createNot(self, *args)
    def createXor(self, *args): return _fieldmodule.FieldModule_createXor(self, *args)
    def createDeterminant(self, *args): return _fieldmodule.FieldModule_createDeterminant(self, *args)
    def createEigenvalues(self, *args): return _fieldmodule.FieldModule_createEigenvalues(self, *args)
    def createEigenvectors(self, *args): return _fieldmodule.FieldModule_createEigenvectors(self, *args)
    def createMatrixInvert(self, *args): return _fieldmodule.FieldModule_createMatrixInvert(self, *args)
    def createMatrixMultiply(self, *args): return _fieldmodule.FieldModule_createMatrixMultiply(self, *args)
    def createProjection(self, *args): return _fieldmodule.FieldModule_createProjection(self, *args)
    def createTranspose(self, *args): return _fieldmodule.FieldModule_createTranspose(self, *args)
    def createNodesetSum(self, *args): return _fieldmodule.FieldModule_createNodesetSum(self, *args)
    def createNodesetMean(self, *args): return _fieldmodule.FieldModule_createNodesetMean(self, *args)
    def createNodesetSumSquares(self, *args): return _fieldmodule.FieldModule_createNodesetSumSquares(self, *args)
    def createNodesetMeanSquares(self, *args): return _fieldmodule.FieldModule_createNodesetMeanSquares(self, *args)
    def createNodeGroup(self, *args): return _fieldmodule.FieldModule_createNodeGroup(self, *args)
    def createElementGroup(self, *args): return _fieldmodule.FieldModule_createElementGroup(self, *args)
    def createTimeLookup(self, *args): return _fieldmodule.FieldModule_createTimeLookup(self, *args)
    def createTimeValue(self, *args): return _fieldmodule.FieldModule_createTimeValue(self, *args)
    def createSin(self, *args): return _fieldmodule.FieldModule_createSin(self, *args)
    def createCos(self, *args): return _fieldmodule.FieldModule_createCos(self, *args)
    def createTan(self, *args): return _fieldmodule.FieldModule_createTan(self, *args)
    def createAsin(self, *args): return _fieldmodule.FieldModule_createAsin(self, *args)
    def createAcos(self, *args): return _fieldmodule.FieldModule_createAcos(self, *args)
    def createAtan(self, *args): return _fieldmodule.FieldModule_createAtan(self, *args)
    def createAtan2(self, *args): return _fieldmodule.FieldModule_createAtan2(self, *args)
    def createCrossProduct3D(self, *args): return _fieldmodule.FieldModule_createCrossProduct3D(self, *args)
    def createDotProduct(self, *args): return _fieldmodule.FieldModule_createDotProduct(self, *args)
    def createMagnitude(self, *args): return _fieldmodule.FieldModule_createMagnitude(self, *args)
    def createNormalise(self, *args): return _fieldmodule.FieldModule_createNormalise(self, *args)
    def createConcatenate(self, *args): return _fieldmodule.FieldModule_createConcatenate(self, *args)
    def createCrossProduct(self, *args): return _fieldmodule.FieldModule_createCrossProduct(self, *args)
FieldModule_swigregister = _fieldmodule.FieldModule_swigregister
FieldModule_swigregister(FieldModule)



