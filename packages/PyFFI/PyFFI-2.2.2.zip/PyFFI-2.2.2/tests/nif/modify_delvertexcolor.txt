Doctests for the modify_delvertexcolor spell
============================================

NifToaster modify_delvertexcolor check
--------------------------------------

>>> from pyffi.formats.nif import NifFormat
>>> filename = "tests/nif/test_vertexcolor.nif"
>>> outfilename = "tests/nif/_test_vertexcolor.nif"
>>> # check that file has vertex color
>>> data = NifFormat.Data()
>>> data.read(open(filename, "rb"))
>>> print([block.__class__.__name__ for block in data.blocks])
['NiNode', 'NiTriStrips', 'NiStencilProperty', 'NiSpecularProperty', 'NiMaterialProperty', 'NiVertexColorProperty', 'NiTriStripsData']
>>> print(data.roots[0].children[0].data.has_vertex_colors)
True
>>> # delete vertex color
>>> import sys
>>> sys.path.append("scripts/nif")
>>> import niftoaster
>>> sys.argv = ["niftoaster.py", "--prefix", "_", "--noninteractive", "modify_delvertexcolor", filename]
>>> niftoaster.NifToaster().cli()
pyffi.toaster:INFO:=== tests/nif/test_vertexcolor.nif ===
pyffi.toaster:INFO:  --- modify_delvertexcolor ---
pyffi.toaster:INFO:    ~~~ NiNode [Scene Root] ~~~
pyffi.toaster:INFO:      ~~~ NiTriStrips [Cube] ~~~
pyffi.toaster:INFO:        ~~~ NiVertexColorProperty [] ~~~
pyffi.toaster:INFO:          stripping this branch
pyffi.toaster:INFO:        ~~~ NiTriStripsData [] ~~~
pyffi.toaster:INFO:          removing vertex colors
pyffi.toaster:INFO:  writing tests/nif/_test_vertexcolor.nif
pyffi.toaster:INFO:Finished.
>>> # check that file has no vertex color
>>> data = NifFormat.Data()
>>> data.read(open(outfilename, "rb"))
>>> print([block.__class__.__name__ for block in data.blocks])
['NiNode', 'NiTriStrips', 'NiStencilProperty', 'NiSpecularProperty', 'NiMaterialProperty', 'NiTriStripsData']
>>> print(data.roots[0].children[0].data.has_vertex_colors)
False
>>> # clean up
>>> import os
>>> os.remove(outfilename)
