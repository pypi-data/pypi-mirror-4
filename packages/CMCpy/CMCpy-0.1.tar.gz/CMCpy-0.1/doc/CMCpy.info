This is CMCpy.info, produced by makeinfo version 4.13 from CMCpy.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* CMCpy: (CMCpy.info). One line description of project.
END-INFO-DIR-ENTRY

     CMCpy 0.1, October 26, 2012

     David H. Ardell, Peter Becich and Brian Stark

     Copyright (C) 2012, David H. Ardell, Peter Becich and Brian Stark


File: CMCpy.info,  Node: Top,  Next: cmcpy Package,  Up: (dir)

CMCpy Documentation
*******************

     CMCpy 0.1, October 26, 2012

     David H. Ardell, Peter Becich and Brian Stark

     Copyright (C) 2012, David H. Ardell, Peter Becich and Brian Stark

  Contents:

* Menu:

* cmcpy Package::
* CMCpy: CMCpy -- Code-Message Coevolution Models in Python. Code-Message Coevolution Models in Python
* Dependencies::
* Installation::
* Usage::
* Documentation::
* Licensing and Attribution::
* Release Notes::
* References::
* Indices and tables::
* Python Module Index::
* Index::

 --- The Detailed Node Listing ---

cmcpy Package

* cmcpy Package: cmcpy Package<2>.
* __main__ Module::
* amino_acid_spaces Module::
* codon_spaces Module::
* evolvers Module::
* genetic_codes Module::
* misreading Module::
* observables Module::
* site_type_spaces Module::

evolvers Module

* evolvers: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers. cmcpy module for abstract base class of Ardell Sella
                        Evolvers


File: CMCpy.info,  Node: cmcpy Package,  Next: CMCpy -- Code-Message Coevolution Models in Python,  Prev: Top,  Up: Top

1 cmcpy Package
***************

* Menu:

* cmcpy Package: cmcpy Package<2>.
* __main__ Module::
* amino_acid_spaces Module::
* codon_spaces Module::
* evolvers Module::
* genetic_codes Module::
* misreading Module::
* observables Module::
* site_type_spaces Module::


File: CMCpy.info,  Node: cmcpy Package<2>,  Next: __main__ Module,  Up: cmcpy Package

1.1 `cmcpy' Package
===================


File: CMCpy.info,  Node: __main__ Module,  Next: amino_acid_spaces Module,  Prev: cmcpy Package<2>,  Up: cmcpy Package

1.2 `__main__' Module
=====================


File: CMCpy.info,  Node: amino_acid_spaces Module,  Next: codon_spaces Module,  Prev: __main__ Module,  Up: cmcpy Package

1.3 `amino_acid_spaces' Module
==============================

 -- Class: amino_acid_spaces.RegionAminoAcidSpace (num_aas=None,
          coords=None, num_dims=1, seed=42, labels=None)
     Bases: `amino_acid_spaces._AminoAcidSpace'

     Region amino acid spaces model amino acid (dis)similarities in
     bounded regions of a finite number of dimensions.

         >>> aa = RegionAminoAcidSpace(num_aas = 5,num_dims = 2)
         >>> map(lambda x:x.round(2),aa.coords)
         [array([[ 0.16,  0.71]]), array([[ 0.37,  0.16]]), array([[ 0.6,  0.6]]), array([[ 0.73,  0.87]]), array([[ 0.95,  0.06]])]
         >>> dm =  aa.get_distance_matrix()
         >>> dm.round(3)
         array([[ 0.   ,  0.594,  0.455,  0.597,  1.027],
                [ 0.594,  0.   ,  0.498,  0.795,  0.584],
                [ 0.455,  0.498,  0.   ,  0.297,  0.647],
                [ 0.597,  0.795,  0.297,  0.   ,  0.837],
                [ 1.027,  0.584,  0.647,  0.837,  0.   ]])



 -- Class: amino_acid_spaces.RingAminoAcidSpace (num_aas=None, seed=42,
          coords=None, labels=None)
     Bases: `amino_acid_spaces._AminoAcidSpace'

     Ring amino acid spaces model amino acid (dis)similarities in a
     one-dimensional circular physicochemical amino acid space

         >>> aa = RingAminoAcidSpace(num_aas = 5)
         >>> map(lambda x: x.round(3),aa.coords)
         [array([[ 0.156]]), array([[ 0.375]]), array([[ 0.599]]), array([[ 0.732]]), array([[ 0.951]])]
         >>> dm = aa.get_distance_matrix()
         >>> dm.round(3)
         array([[ 0.   ,  0.219,  0.443,  0.424,  0.205],
                [ 0.219,  0.   ,  0.224,  0.357,  0.424],
                [ 0.443,  0.224,  0.   ,  0.133,  0.352],
                [ 0.424,  0.357,  0.133,  0.   ,  0.219],
                [ 0.205,  0.424,  0.352,  0.219,  0.   ]])




File: CMCpy.info,  Node: codon_spaces Module,  Next: evolvers Module,  Prev: amino_acid_spaces Module,  Up: cmcpy Package

1.4 `codon_spaces' Module
=========================

 -- Class: codon_spaces.RingCodonSpace (num_codons, mu)
     Bases: `codon_spaces._CodonSpace'

     Ring codon spaces are wrapped linear mutation spaces where codons
     mutate only to their two immediate neighbors.  For ring codon
     models, mu defines the probability of change to one of two codon
     neighbors.  The probability of no change is [1 - (2*mu)]

         >>> codons = RingCodonSpace(num_codons = 5,mu = 0.1)
         >>> mm = codons.get_mutation_matrix()
         >>> mm.round(3)
         array([[ 0.9 ,  0.05,  0.  ,  0.  ,  0.05],
                [ 0.05,  0.9 ,  0.05,  0.  ,  0.  ],
                [ 0.  ,  0.05,  0.9 ,  0.05,  0.  ],
                [ 0.  ,  0.  ,  0.05,  0.9 ,  0.05],
                [ 0.05,  0.  ,  0.  ,  0.05,  0.9 ]])

     
      -- Method: get_derivative_matrix ()

      -- Method: post_process_perturbative_solution (lpert, vpert)

 -- Class: codon_spaces.WordCodonSpace (num_bases, num_positions, mu,
          kappa=1.0)
     Bases: `codon_spaces._CodonSpace'

     Word codon spaces model natural codons with a finite number of
     bases and a finite word-length.

     For word codon models, mu defines the total probability of change
     of a base to any neighbor.  The probability of no change of a
     single base is defined as (1 - mu).

     If kappa is not equal to 1.0, then num_bases must be even.

         >>> codons = WordCodonSpace(num_bases = 2,num_positions = 2, mu = 0.1)
         >>> mm = codons.get_mutation_matrix()
         >>> mm.round(3)
         array([[ 0.81 ,  0.045,  0.045,  0.003],
                [ 0.045,  0.81 ,  0.003,  0.045],
                [ 0.045,  0.003,  0.81 ,  0.045],
                [ 0.003,  0.045,  0.045,  0.81 ]])
         >>> codons = WordCodonSpace(num_bases = 4,num_positions = 2, mu = 0.2,kappa = 2)
         >>> mm = codons.get_mutation_matrix()
         >>> mm.round(3)

     
      -- Method: get_derivative_matrix ()
          This function exists to serve the perturbative solution in
          evolvers.py

      -- Method: post_process_perturbative_solution (lpert, vpert)


File: CMCpy.info,  Node: evolvers Module,  Next: genetic_codes Module,  Prev: codon_spaces Module,  Up: cmcpy Package

1.5 `evolvers' Module
=====================

* Menu:

* evolvers: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers. cmcpy module for abstract base class of Ardell Sella
                        Evolvers


File: CMCpy.info,  Node: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers,  Up: evolvers Module

1.5.1 evolvers - cmcpy module for abstract base class of Ardell Sella Evolvers
------------------------------------------------------------------------------

 -- Class: evolvers.ArdellSellaEvolverAbstractBase (initial_code,
          site_types, delta, epsilon, observables)
     Bases: `object'

     Abstract Base Class for ArdellSellaEvolvers for Code-Message
     Coevolution corresponding to models published in Ardell and Sella
     (2001, 2002) and Sella and Ardell (2002, 2006).  Concrete
     Implementations subclass from this for different implementations
     of Eigenvalue solutions.

      -- Method: compute_code_fitness_given_messages
               (equilibrated_messages, effective_code_matrix)
          Implement eg eqns. 2-7 from Sella and Ardell(2006)

      -- Method: compute_max_fitness_code_mutation ()

      -- Method: equilibrate_messages ()
          Compute eigensystems in site-types for an established genetic
          code.

          This finds eigensystems (codon frequencies and growth rates)
          for different site-types given the genetic code.

          Abstract method: subclasses must:

          1) store their results by setting self.eigenvalues and
          self.eigenmatrix

            2. set self.equilibrated to True

          3) call super(<<SubClass>>, self).equilibrate_messages() to
          print observables at end of subclass method where
          <<SubClass>> is the subclass name to print observables.

      -- Method: evolve_code_unless_frozen ()
          Mutate genetic code.

          Unless genetic code is frozen, mutate it according to the
          Ardell and Sella models, and update code to most fit mutant
          if it exists. If no more fit mutant code exists, set the
          "frozen" attribute to True.

      -- Method: evolve_one_step ()
          Mutate genetic code and equilibrate messages.

          Unless genetic code is frozen, mutate it according to the
          Ardell and Sella models, update code to most fit mutant if it
          exists, and equilibrate messages to the new mutant genetic
          code. If no more fit mutant code exists, set the "frozen"
          attribute to True.

      -- Method: evolve_until_frozen ()
          Iteratively evlove genetic code and messages.

          Until genetic code is frozen, mutate it according to the
          Ardell and Sella models, update code to most fit mutant if it
          exists, and equilibrate messages to the new mutant genetic
          code. Once no more fit mutant code exists, set the "frozen"
          attribute to True.

      -- Method: get_eigenvalue (msm, eigenvec)

      -- Method: get_mutation_selection_matrix (alpha)

      -- Method: get_selection_matrix (alpha)

      -- Method: growth_rate ()

      -- Method: growth_rate_from_lambda ()

      -- Method: initial_equilibrate_messages ()
          Compute eigensystems in site-types for an established genetic
          code.

          This finds eigensystems (codon frequencies and growth rates)
          for different site-types given the genetic code.

      -- Method: messages ()

      -- Method: print_initial_observables ()

      -- Method: print_observables ()

      -- Method: print_observables_header ()

 -- Class: evolvers.ArdellSellaEvolverNumpy (initial_code, site_types,
          num_processes, observables, delta=1e-32, epsilon=1e-12)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1b.

      -- Method: compute_eigensystem (alpha, max_time=60,
               numpy_type=<type 'numpy.float64'>)

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverNumpyMulticore (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1b.

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverNumpyProcessChild (in_queue,
          out_queue)
     Bases: `multiprocessing.process.Process'

     Finds the eigensystem (message equilibrium and growth rate) for an
     established genetic code

      -- Method: run ()

 -- Class: evolvers.ArdellSellaEvolverPerturbative (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1b.

      -- Method: choose (n, k)
          A fast way to calculate binomial coefficients by Andrew Dalke
          (contrib).

      -- Method: compute_eigensystem (alpha, max_time=60,
               numpy_type=<type 'numpy.float64'>)

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverPowerCUDA (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1b.

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverPowerMethod (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1b.

      -- Method: compute_eigensystem (alpha, max_time=60,
               numpy_type=<type 'numpy.float64'>)

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverPowerMethodProcessChild
          (in_queue, out_queue, num_codons, delta, max_time=60)
     Bases: `multiprocessing.process.Process'

     Finds the eigensystem (message equilibrium and growth rate) for an
     established genetic code

      -- Method: run ()

 -- Class: evolvers.ArdellSellaEvolverPowerMulticore (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1b.

      -- Method: equilibrate_messages ()

      -- Attribute: in_queue

      -- Attribute: out_queue

 -- Class: evolvers.eigensystem_CUDA_implementation (parent,
          max_time=60, delta=1e-32)
      -- Method: calculate ()

      -- Method: done ()

      -- Method: error_check ()

      -- Method: get_eigenmatrix ()

      -- Method: get_eigenvalue (alpha)

      -- Method: get_eigenvalues ()


File: CMCpy.info,  Node: genetic_codes Module,  Next: misreading Module,  Prev: evolvers Module,  Up: cmcpy Package

1.6 `genetic_codes' Module
==========================

 -- Class: genetic_codes.GeneticCodeMutation (code, codon, aa)
      -- Method: get_effective_code_matrix ()

 -- Class: genetic_codes.InitiallyAmbiguousGeneticCode (codons,
          amino_acids, misreading=None)
     Bases: `genetic_codes._GeneticCode'

 -- Class: genetic_codes.UserInitializedGeneticCode (codons,
          amino_acids, code_matrix=None, code_dict=None,
          misreading=None)
     Bases: `genetic_codes._GeneticCode'

     User-Initialized Genetic Codes are initialized with a
     numpy.ndarray code matrix or a dict of codons mapping to indices
     (not labels) of amino acids

         >>> codons = codon_spaces.WordCodonSpace(num_bases = 4,num_positions = 2, mu = 0.2,kappa = 2)
         >>> aas    = amino_acid_spaces.RegionAminoAcidSpace(num_aas = 20, seed = 40)
         >>> cm = numpy.eye(16)
         >>> cm = numpy.hstack((cm,numpy.zeros((16,4))))
         >>> cm.shape
         (16, 20)
         >>> cm[0][1] = 1
         >>> cm /= cm.sum(axis = 1).reshape(16,1)
         >>> gc = UserInitializedGeneticCode(codons,aas,code_matrix = cm)
         >>> gc.num_codons
         16
         >>> gc.num_amino_acids
         20
         >>> gc.ambiguous_codons()
         set([0])
         >>> gc.encoded_aas
         set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
         >>> print gc
         |* b c d|
         |e f g h|
         |i j k l|
         |m n o p|
         >>> gc.as_labelled_dict()
         {0: '*', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j', 10: 'k', 11: 'l', 12: 'm', 13: 'n', 14: 'o', 15: 'p'}
         >>> gc.as_dict()
         {0: '*', 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15}
         >>> gc2 = UserInitializedGeneticCode(codons,aas,code_dict = {0: '*', 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15})
         >>> print gc2
         |* b c d|
         |e f g h|
         |i j k l|
         |m n o p|
         >>> print gc2.code_matrix[0]
         [ 0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05
           0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05]




File: CMCpy.info,  Node: misreading Module,  Next: observables Module,  Prev: genetic_codes Module,  Up: cmcpy Package

1.7 `misreading' Module
=======================

 -- Class: misreading.PositionalMisreading (codons, misreading)
     Bases: `misreading._Misreading'

     Positional misreading models misreading on word codon spaces which
     model natural codons with a finite number of bases and a finite
     word-length.

     For positional misreading, the misreading parameter is a list of
     positional misreading parameters mr_i which define the total
     misreading probability of a base at position i to any neighbor.
     The probability of no misreading of a single base at position i is
     defined as (1 - mr_i).

         >>> codons = codon_spaces.WordCodonSpace(num_bases = 2,num_positions = 2, mu = 0.1)
         >>> misreading = PositionalMisreading(codons,[0.1,0.01])
         >>> mr = misreading.get_misreading_matrix()
         >>> mr.round(3)
         array([[ 0.891,  0.099,  0.009,  0.001],
                [ 0.099,  0.891,  0.001,  0.009],
                [ 0.009,  0.001,  0.891,  0.099],
                [ 0.001,  0.009,  0.099,  0.891]])



 -- Class: misreading.RingMisreading (codons, misreading)
     Bases: `misreading._Misreading'

     Ring misreading is one-dimensional misreading uniform over all
     other codons.  For ring misreading, (mr/(nc - 1)) is the
     probability of misreading as a specific codon.  The probability of
     no misreading is (1 - (mr)).

     The misreading parameter is a list with one element, mr.

         >>> codons = codon_spaces.RingCodonSpace(num_codons = 5,mu = 0.1)
         >>> misreading = RingMisreading(codons,[0.1])
         >>> mr = misreading.get_misreading_matrix()
         >>> mr.round(3)
         array([[ 0.9  ,  0.025,  0.025,  0.025,  0.025],
                [ 0.025,  0.9  ,  0.025,  0.025,  0.025],
                [ 0.025,  0.025,  0.9  ,  0.025,  0.025],
                [ 0.025,  0.025,  0.025,  0.9  ,  0.025],
                [ 0.025,  0.025,  0.025,  0.025,  0.9  ]])




File: CMCpy.info,  Node: observables Module,  Next: site_type_spaces Module,  Prev: misreading Module,  Up: cmcpy Package

1.8 `observables' Module
========================

Control and select output from CMCpy simulations

 -- Class: observables.Observables (show_codes=True,
          show_messages=False, show_initial_parameters=True,
          show_matrix_parameters=False, show_fitness_statistics=False,
          show_code_evolution_statistics=False,
          show_frozen_results_only=False, print_precision=6,
          show_all=False)


File: CMCpy.info,  Node: site_type_spaces Module,  Prev: observables Module,  Up: cmcpy Package

1.9 `site_type_spaces' Module
=============================

Site-type fitness matrices are intended as site-types over rows and
amino acids over columns

 -- Class: site_type_spaces.MirroringSiteTypeSpace (amino_acids, phi,
          weights=None)
     This class models site-types in one-to-one correspondence with
     amino acids as according to the published models of Ardell and
     Sella.

         >>> aa = amino_acid_spaces.RingAminoAcidSpace(num_aas = 5)
         >>> dm = aa.get_distance_matrix()
         >>> dm.round(3)
         array([[ 0.   ,  0.219,  0.443,  0.424,  0.205],
                [ 0.219,  0.   ,  0.224,  0.357,  0.424],
                [ 0.443,  0.224,  0.   ,  0.133,  0.352],
                [ 0.424,  0.357,  0.133,  0.   ,  0.219],
                [ 0.205,  0.424,  0.352,  0.219,  0.   ]])
         >>> st = MirroringSiteTypeSpace(aa,phi = 0.96)
         >>> fm = st.get_fitness_matrix()
         >>> fm.round(3)
         array([[ 1.   ,  0.991,  0.982,  0.983,  0.992],
                [ 0.991,  1.   ,  0.991,  0.986,  0.983],
                [ 0.982,  0.991,  1.   ,  0.995,  0.986],
                [ 0.983,  0.986,  0.995,  1.   ,  0.991],
                [ 0.992,  0.983,  0.986,  0.991,  1.   ]])

     
      -- Method: get_fitness_matrix ()

      -- Method: get_site_type_weights ()


File: CMCpy.info,  Node: CMCpy -- Code-Message Coevolution Models in Python,  Next: Dependencies,  Prev: cmcpy Package,  Up: Top

2 CMCpy - Code-Message Coevolution Models in Python
***************************************************

CMCpy provides an object-oriented python API, together with command-line
interface executables, that implement "Code-Message Coevolution" models.
These published evolutionary models pertain to the evolution by natural
selection of a genetic code in coevolution with a population of
protein-coding genes.

  Formally, CMC models are sets of quasispecies coupled together for
their fitness through a genetic code. The system alternates between
quasispecies equilibration and adaptive hill-climbing through codon
assignments and reassignment by code mutation.

  CMCpy can reproduce the statistics and results of *note
[Ardell_and_Sella_2001]: 58, *note [Sella_and_Ardell_2002]: 59, *note
[Ardell_and_Sella_2002]: 5a. and *note [Sella_and_Ardell_2006]: 5b.
CMCpy additionally implements additional extensions that have not yet
been studied in published work. It is easliy feasible to extend the
present code-base to implement the model studied by *note
[Vetsigian_et_al_2006]: 5c.

  CMC evolutionary trajectories are partly a sequence of eigensystem
solutions. Qualitative differences in results on different platforms can
originate from differences in convergence criteria when power
method-based eigensystem solvers are used, or from differences in
floating point representations. Python defers to the platform C library
for float representation. The default eigensystem solver is the eig()
function in Numpy.


File: CMCpy.info,  Node: Dependencies,  Next: Installation,  Prev: CMCpy -- Code-Message Coevolution Models in Python,  Up: Top

Dependencies
************

CMCpy relies heavily on, and absolutely requires, numpy as a
prerequisite.  You should install numpy with the easy_install framework
to be detected as installed when installing this package.

  If you wish to play with an experimental CUDA-based power-method
eigensystem solver, you must install pycuda. This implementation is not
faster than the NumPy default solver for many systems.


File: CMCpy.info,  Node: Installation,  Next: Usage,  Prev: Dependencies,  Up: Top

Installation
************

This installer requires setuptools, the most recent python packaging
framework. If you do not already have this installed, this package will
install it for you, so long as you have network access. Otherwise
preinstall the correct version of setuptools using the EasyInstall
installation instructions at
<http://peak.telecommunity.com/DevCenter/EasyInstall#installation-instructions>

  If you need to install this package somewhere other than the main
site-packages directory, install setuptools using the instructions for
Custom Installation Locations before installing this package. The
instructions are here:
<http://peak.telecommunity.com/DevCenter/EasyInstall#custom-installation-locations>

  Since you have downloaded the source-code package, the easiest way to
install the package is to execute (from within the source root
directory):

    easy_install .

Mac users may need to run this command with "sudo" prepended.


File: CMCpy.info,  Node: Usage,  Next: Documentation,  Prev: Installation,  Up: Top

Usage
*****

CMCpy comes with an executable inside the bin subdirectory to the
installation source package, a UNIX-compatible script called "cmc".

  Additionally, a platform-specific executable may be automatically
generated on installation.

  Published results with CMC models may be (at least qualitatively)
reproduced through the -demo option to the executables.

  Also try running the -help option to the executables after
installation and for a command-line example.

  Programmers may use the executable in bin as a guide and template for
how to program against the cmcpy API.


File: CMCpy.info,  Node: Documentation,  Next: Licensing and Attribution,  Prev: Usage,  Up: Top

Documentation
*************

Some documentation of the cmcpy API is available within the "doc"
subdirectory of the source distribution. HTML, pdf and texinfo
alternative formats are provided.


File: CMCpy.info,  Node: Licensing and Attribution,  Next: Release Notes,  Prev: Documentation,  Up: Top

Licensing and Attribution
*************************

The CMCpy project is distributed under the terms of the Apache License
2.0 as described in the file LICENSE.txt

  Please cite Becich et al. (2012) in all scientific works that use
this code.


File: CMCpy.info,  Node: Release Notes,  Next: References,  Prev: Licensing and Attribution,  Up: Top

Release Notes
*************

The most recent version is 0.1 released October 2012.

  See CHANGES.txt for version-related changes to the CMCpy code-base.


File: CMCpy.info,  Node: References,  Next: Indices and tables,  Prev: Release Notes,  Up: Top

References
**********

(Ardell_and_Sella_2001) D.H. Ardell and G. Sella (2001). On the
evolution of redundancy in genetic codes. Journal of Molecular
Evolution 53(4/5):269-281(1).  (Ardell_and_Sella_2002) D.H. Ardell and
G. Sella (2002). No accident: genetic codes freeze in error-correcting
patterns of the standard genetic code. Philosophical Transactions of
the Royal Society of London B 357:1625-1642(2).  (Sella_and_Ardell_2002)

  7. Sella and D.H. Ardell (2002). The impact of message mutation on
     the fitness of a genetic code. Journal of Molecular Evolution
     54(5):638-651(3).
       (Sella_and_Ardell_2006)

  7. Sella and D.H. Ardell (2006). The coevolution of genes and genetic
     codes: Crick's frozen accident revisited. J. Mol. Evol.
     63(3):297-313(4).
       (Vetsigian_et_al_2006) Vetsigian K., Woese C. R., Goldenfeld N.
(2006). Collective evolution and the genetic code. Proc. Natl. Acad.
Sci. U.S.A. 103, 10696-10701(5).

  ---------- Footnotes ----------

  (1) http://dx.doi.org/10.1007/s002390010217

  (2) http://dx.doi.org/10.1098/rstb.2002.1071

  (3) http://dx.doi.org/10.1007/s00239-001-0060-7

  (4) http://dx.doi.org/10.1007/s00239-004-0176-7

  (5) http://www.pnas.org/cgi/pmidlookup?view=long&pmid=16818880


File: CMCpy.info,  Node: Indices and tables,  Next: Python Module Index,  Prev: References,  Up: Top

Indices and tables
******************

   * _genindex_

   * _modindex_

   * _search_


File: CMCpy.info,  Node: Python Module Index,  Next: Index,  Prev: Indices and tables,  Up: Top

Python Module Index
*******************

* Menu:

* __init__: 0.
* __main__: 1.
* amino_acid_spaces: 2.
* codon_spaces: 3.
* evolvers: 4.
* genetic_codes: 5.
* misreading: 6.
* observables: 7.
* site_type_spaces: 8.


File: CMCpy.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* __init__ (module):                     cmcpy Package<2>.    (line   6)
* __main__ (module):                     __main__ Module.     (line   6)
* amino_acid_spaces (module):            amino_acid_spaces Module.
                                                              (line   6)
* ArdellSellaEvolverAbstractBase (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line   6)
* ArdellSellaEvolverNumpy (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  91)
* ArdellSellaEvolverNumpyMulticore (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 100)
* ArdellSellaEvolverNumpyProcessChild (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 107)
* ArdellSellaEvolverPerturbative (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 116)
* ArdellSellaEvolverPowerCUDA (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 130)
* ArdellSellaEvolverPowerMethod (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 137)
* ArdellSellaEvolverPowerMethodProcessChild (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 147)
* ArdellSellaEvolverPowerMulticore (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 156)
* calculate() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 169)
* choose() (evolvers.ArdellSellaEvolverPerturbative method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 121)
* codon_spaces (module):                 codon_spaces Module. (line   6)
* compute_code_fitness_given_messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  16)
* compute_eigensystem() (evolvers.ArdellSellaEvolverNumpy method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  95)
* compute_eigensystem() (evolvers.ArdellSellaEvolverPerturbative method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 125)
* compute_eigensystem() (evolvers.ArdellSellaEvolverPowerMethod method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 142)
* compute_max_fitness_code_mutation() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  20)
* done() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 171)
* eigensystem_CUDA_implementation (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 167)
* equilibrate_messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  22)
* equilibrate_messages() (evolvers.ArdellSellaEvolverNumpy method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  98)
* equilibrate_messages() (evolvers.ArdellSellaEvolverNumpyMulticore method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 105)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPerturbative method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 128)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPowerCUDA method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 135)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPowerMethod method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 145)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPowerMulticore method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 161)
* error_check() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 173)
* evolve_code_unless_frozen() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  40)
* evolve_one_step() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  48)
* evolve_until_frozen() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  57)
* evolvers (module):                     evolvers Module.     (line   6)
* genetic_codes (module):                genetic_codes Module.
                                                              (line   6)
* GeneticCodeMutation (class in genetic_codes): genetic_codes Module.
                                                              (line   6)
* get_derivative_matrix() (codon_spaces.RingCodonSpace method): codon_spaces Module.
                                                              (line  23)
* get_derivative_matrix() (codon_spaces.WordCodonSpace method): codon_spaces Module.
                                                              (line  52)
* get_effective_code_matrix() (genetic_codes.GeneticCodeMutation method): genetic_codes Module.
                                                              (line   7)
* get_eigenmatrix() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 175)
* get_eigenvalue() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  66)
* get_eigenvalue() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 177)
* get_eigenvalues() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 179)
* get_fitness_matrix() (site_type_spaces.MirroringSiteTypeSpace method): site_type_spaces Module.
                                                              (line  32)
* get_mutation_selection_matrix() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  68)
* get_selection_matrix() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  70)
* get_site_type_weights() (site_type_spaces.MirroringSiteTypeSpace method): site_type_spaces Module.
                                                              (line  35)
* growth_rate() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  72)
* growth_rate_from_lambda() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  74)
* in_queue (evolvers.ArdellSellaEvolverPowerMulticore attribute): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 163)
* initial_equilibrate_messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  76)
* InitiallyAmbiguousGeneticCode (class in genetic_codes): genetic_codes Module.
                                                              (line   9)
* messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  83)
* MirroringSiteTypeSpace (class in site_type_spaces): site_type_spaces Module.
                                                              (line   9)
* misreading (module):                   misreading Module.   (line   6)
* Observables (class in observables):    observables Module.  (line   8)
* observables (module):                  observables Module.  (line   6)
* out_queue (evolvers.ArdellSellaEvolverPowerMulticore attribute): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 165)
* PositionalMisreading (class in misreading): misreading Module.
                                                              (line   6)
* post_process_perturbative_solution() (codon_spaces.RingCodonSpace method): codon_spaces Module.
                                                              (line  26)
* post_process_perturbative_solution() (codon_spaces.WordCodonSpace method): codon_spaces Module.
                                                              (line  57)
* print_initial_observables() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  85)
* print_observables() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  87)
* print_observables_header() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  89)
* RegionAminoAcidSpace (class in amino_acid_spaces): amino_acid_spaces Module.
                                                              (line   6)
* RingAminoAcidSpace (class in amino_acid_spaces): amino_acid_spaces Module.
                                                              (line  26)
* RingCodonSpace (class in codon_spaces): codon_spaces Module.
                                                              (line   6)
* RingMisreading (class in misreading):  misreading Module.   (line  30)
* run() (evolvers.ArdellSellaEvolverNumpyProcessChild method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 114)
* run() (evolvers.ArdellSellaEvolverPowerMethodProcessChild method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 154)
* site_type_spaces (module):             site_type_spaces Module.
                                                              (line   6)
* UserInitializedGeneticCode (class in genetic_codes): genetic_codes Module.
                                                              (line  13)
* WordCodonSpace (class in codon_spaces): codon_spaces Module.
                                                              (line  28)



Tag Table:
Node: Top385
Ref: index doc650
Ref: 9650
Node: cmcpy Package1445
Ref: cmcpy cmcpy-package1568
Ref: a1568
Ref: cmcpy doc1568
Ref: b1568
Ref: cmcpy welcome-to-cmcpy-s-documentation1568
Ref: c1568
Node: cmcpy Package<2>1837
Ref: cmcpy id11926
Ref: d1926
Ref: cmcpy module-__init__1967
Ref: 01967
Node: __main__ Module1967
Ref: cmcpy main-module2089
Ref: e2089
Ref: cmcpy module-__main__2089
Ref: 12089
Node: amino_acid_spaces Module2134
Ref: cmcpy amino-acid-spaces-module2259
Ref: f2259
Ref: cmcpy module-amino_acid_spaces2259
Ref: 22259
Ref: cmcpy amino_acid_spaces RegionAminoAcidSpace2322
Ref: 102322
Ref: cmcpy amino_acid_spaces RingAminoAcidSpace3226
Ref: 113226
Node: codon_spaces Module4081
Ref: cmcpy module-codon_spaces4206
Ref: 34206
Ref: cmcpy codon-spaces-module4206
Ref: 124206
Ref: cmcpy codon_spaces RingCodonSpace4259
Ref: 134259
Ref: cmcpy codon_spaces RingCodonSpace get_derivative_matrix5032
Ref: 145032
Ref: cmcpy codon_spaces RingCodonSpace post_process_perturbative_solution5076
Ref: 155076
Ref: cmcpy codon_spaces WordCodonSpace5144
Ref: 165144
Ref: cmcpy codon_spaces WordCodonSpace get_derivative_matrix6147
Ref: 176147
Ref: cmcpy codon_spaces WordCodonSpace post_process_perturbative_solution6282
Ref: 186282
Node: evolvers Module6350
Ref: cmcpy module-evolvers6471
Ref: 46471
Ref: cmcpy evolvers-module6471
Ref: 196471
Node: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers6699
Ref: cmcpy evolvers-cmcpy-module-for-abstract-base-class-of-ardell-sella-evolvers6823
Ref: 1a6823
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase6982
Ref: 1b6982
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase compute_code_fitness_given_messages7422
Ref: 1c7422
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase compute_max_fitness_code_mutation7599
Ref: 1d7599
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase equilibrate_messages7654
Ref: 1e7654
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase evolve_code_unless_frozen8296
Ref: 1f8296
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase evolve_one_step8618
Ref: 208618
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase evolve_until_frozen9018
Ref: 219018
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase get_eigenvalue9423
Ref: 229423
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase get_mutation_selection_matrix9472
Ref: 239472
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase get_selection_matrix9528
Ref: 249528
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase growth_rate9575
Ref: 259575
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase growth_rate_from_lambda9608
Ref: 269608
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase initial_equilibrate_messages9653
Ref: 279653
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase messages9922
Ref: 289922
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase print_initial_observables9952
Ref: 299952
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase print_observables9999
Ref: 2a9999
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase print_observables_header10038
Ref: 2b10038
Ref: cmcpy evolvers ArdellSellaEvolverNumpy10084
Ref: 2c10084
Ref: cmcpy evolvers ArdellSellaEvolverNumpy compute_eigensystem10285
Ref: 2d10285
Ref: cmcpy evolvers ArdellSellaEvolverNumpy equilibrate_messages10394
Ref: 2e10394
Ref: cmcpy evolvers ArdellSellaEvolverNumpyMulticore10436
Ref: 2f10436
Ref: cmcpy evolvers ArdellSellaEvolverNumpyMulticore equilibrate_messages10656
Ref: 3010656
Ref: cmcpy evolvers ArdellSellaEvolverNumpyProcessChild10698
Ref: 3110698
Ref: cmcpy evolvers ArdellSellaEvolverNumpyProcessChild run10936
Ref: 3210936
Ref: cmcpy evolvers ArdellSellaEvolverPerturbative10961
Ref: 3310961
Ref: cmcpy evolvers ArdellSellaEvolverPerturbative choose11179
Ref: 3411179
Ref: cmcpy evolvers ArdellSellaEvolverPerturbative compute_eigensystem11304
Ref: 3511304
Ref: cmcpy evolvers ArdellSellaEvolverPerturbative equilibrate_messages11413
Ref: 3611413
Ref: cmcpy evolvers ArdellSellaEvolverPowerCUDA11455
Ref: 3711455
Ref: cmcpy evolvers ArdellSellaEvolverPowerCUDA equilibrate_messages11670
Ref: 3811670
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethod11712
Ref: 3911712
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethod compute_eigensystem11929
Ref: 3a11929
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethod equilibrate_messages12038
Ref: 3b12038
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethodProcessChild12080
Ref: 3c12080
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethodProcessChild run12356
Ref: 3d12356
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore12381
Ref: 3e12381
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore equilibrate_messages12601
Ref: 3f12601
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore in_queue12643
Ref: 4012643
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore out_queue12673
Ref: 4112673
Ref: cmcpy evolvers eigensystem_CUDA_implementation12704
Ref: 4212704
Ref: cmcpy evolvers eigensystem_CUDA_implementation calculate12801
Ref: 4312801
Ref: cmcpy evolvers eigensystem_CUDA_implementation done12832
Ref: 4412832
Ref: cmcpy evolvers eigensystem_CUDA_implementation error_check12858
Ref: 4512858
Ref: cmcpy evolvers eigensystem_CUDA_implementation get_eigenmatrix12891
Ref: 4612891
Ref: cmcpy evolvers eigensystem_CUDA_implementation get_eigenvalue12928
Ref: 4712928
Ref: cmcpy evolvers eigensystem_CUDA_implementation get_eigenvalues12969
Ref: 4812969
Node: genetic_codes Module13006
Ref: cmcpy module-genetic_codes13125
Ref: 513125
Ref: cmcpy genetic-codes-module13125
Ref: 4913125
Ref: cmcpy genetic_codes GeneticCodeMutation13180
Ref: 4a13180
Ref: cmcpy genetic_codes GeneticCodeMutation get_effective_code_matrix13243
Ref: 4b13243
Ref: cmcpy genetic_codes InitiallyAmbiguousGeneticCode13290
Ref: 4c13290
Ref: cmcpy genetic_codes UserInitializedGeneticCode13436
Ref: 4d13436
Node: misreading Module15369
Ref: cmcpy module-misreading15491
Ref: 615491
Ref: cmcpy misreading-module15491
Ref: 4e15491
Ref: cmcpy misreading PositionalMisreading15540
Ref: 4f15540
Ref: cmcpy misreading RingMisreading16549
Ref: 5016549
Node: observables Module17447
Ref: cmcpy observables-module17572
Ref: 5117572
Ref: cmcpy module-observables17572
Ref: 717572
Ref: cmcpy observables Observables17673
Ref: 5217673
Node: site_type_spaces Module17994
Ref: cmcpy module-site_type_spaces18093
Ref: 818093
Ref: cmcpy site-type-spaces-module18093
Ref: 5318093
Ref: cmcpy site_type_spaces MirroringSiteTypeSpace18248
Ref: 5418248
Ref: cmcpy site_type_spaces MirroringSiteTypeSpace get_fitness_matrix19338
Ref: 5519338
Ref: cmcpy site_type_spaces MirroringSiteTypeSpace get_site_type_weights19379
Ref: 5619379
Node: CMCpy -- Code-Message Coevolution Models in Python19422
Ref: index cmcpy-code-message-coevolution-models-in-python19554
Ref: 5719554
Node: Dependencies21070
Ref: index dependencies21201
Ref: 5d21201
Node: Installation21615
Ref: index installation21701
Ref: 5e21701
Node: Usage22656
Ref: index usage22743
Ref: 5f22743
Node: Documentation23330
Ref: index documentation23430
Ref: 6023430
Node: Licensing and Attribution23623
Ref: index licensing-and-attribution23731
Ref: 6123731
Node: Release Notes23977
Ref: index release-notes24082
Ref: 6224082
Node: References24237
Ref: index references24335
Ref: 6324335
Ref: index ardell-and-sella-200124358
Ref: 5824358
Ref: index ardell-and-sella-200224516
Ref: 5a24516
Ref: index sella-and-ardell-200224745
Ref: 5924745
Ref: index sella-and-ardell-200624936
Ref: 5b24936
Ref: index vetsigian-et-al-200625124
Ref: 5c25124
Ref: References-Footnote-125326
Ref: References-Footnote-225373
Ref: References-Footnote-325421
Ref: References-Footnote-425472
Ref: References-Footnote-525523
Node: Indices and tables25589
Ref: index proc-natl-acad-sci-u-s-a-103-10696-1070125693
Ref: 6425693
Ref: index indices-and-tables25693
Ref: 6525693
Node: Python Module Index25781
Node: Index26097

End Tag Table


Local Variables:
coding: utf-8
End:
