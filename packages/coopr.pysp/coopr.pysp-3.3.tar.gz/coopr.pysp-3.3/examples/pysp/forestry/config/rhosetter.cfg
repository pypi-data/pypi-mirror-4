# rhosetter.cfg

# users probably want this line intact so they can use model_instance
model_instance = self._model_instance

MyRhoFactorDelta = 0.001
MyRhoFactorGamma = 0.0001
MyRhoFactorF = 0.1
MyRhoFactorZ = 0.01

for t in model_instance.Times:

   if t != "Ano4":

      for h in model_instance.HarvestCells:
         self.setRhoAllScenarios( model_instance.delta[h,t] , model_instance.P[h,t] * model_instance.A[h] * MyRhoFactorDelta + MyRhoFactorDelta * model_instance.a[h, t] * model_instance.yr[t] * model_instance.A[h] * sum([ model_instance.Q[o, t] for o in model_instance.COriginNodeForCell[h]]) )
         # .a[h, t] * .A[h] * sum([ model_instance.Q[o, t] for o in model.OriginNodes for h in model.HCellsForOrigin[o]])
         # model_instance.a[h, t] * model_instance.A[h] * sum([ model_instance.Q[o, t] for o in model_instance.COriginNodeForCell[h]])

      for (i,j) in model_instance.PotentialRoads:
         self.setRhoAllScenarios( model_instance.gamma[i,j,t], model_instance.C[i,j,t] * MyRhoFactorGamma)

      for (i,j) in model_instance.AllRoads:
         self.setRhoAllScenarios( model_instance.f[i,j,t], model_instance.D[i,j,t] * MyRhoFactorF)

      for e in model_instance.ExitNodes:
      #for e in model.ExitNodes:
         self.setRhoAllScenarios( model_instance.z[e,t],  model_instance.R[e,t] * MyRhoFactorZ)

