def create_session(echo=False, zope_transaction=True):
    """Create engine and session, return session then
    
    """
    from sqlalchemy import create_engine
    from zope.sqlalchemy import ZopeTransactionExtension
    from {{project}}.models.tables import initdb
    
    engine = create_engine('sqlite:///', convert_unicode=True, echo=echo)
    initdb(engine)
    from ..models.tables import DeclarativeBase, DBSession
    DeclarativeBase.metadata.create_all(bind=engine)
    DBSession.configure(bind=engine,
                        extension=ZopeTransactionExtension())
    if zope_transaction:
        DBSession.configure(extension=ZopeTransactionExtension())
    return DBSession

def set_db_settings(settings):
    from sqlalchemy import engine_from_config
    from sqlalchemy.orm import scoped_session
    from sqlalchemy.orm import sessionmaker
    from zope.sqlalchemy import ZopeTransactionExtension
    
    engine = engine_from_config(settings, 'sqlalchemy.write.')
    settings['read_engine'] = engine
    settings['write_engine'] = engine
    
    write_session = scoped_session(sessionmaker(
        extension=ZopeTransactionExtension(),
        bind=settings['read_engine']
    ))
    
    zt = ZopeTransactionExtension()
    def before_commit(session):
        assert False, "Read session cannot be wrote"
    zt.before_commit = before_commit
    read_maker = sessionmaker(
        extension=zt,
        bind=settings['read_engine']
    )
    def stop_write(self):
        assert False, "Read session cannot be wrote"
    read_maker._old_flush = read_maker.flush
    read_maker.commit = stop_write
    read_session = scoped_session(read_maker)
     
    settings['read_session_maker'] = read_session
    settings['write_session_maker'] = write_session

def init_testing_env(settings):
    from webtest import TestApp
    from .. import main
    
    set_db_settings(settings)
    app = main({}, **settings)
    testapp = TestApp(app)
    testapp.settings = settings
    testapp.Session = settings['write_session_maker']
    testapp.session = testapp.Session()
    
    from ..models.tables import DeclarativeBase
    DeclarativeBase.metadata.create_all(bind=testapp.session.get_bind())
    return testapp