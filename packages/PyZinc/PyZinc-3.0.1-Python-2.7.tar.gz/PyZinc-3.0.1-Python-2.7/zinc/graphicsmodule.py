# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_graphicsmodule', [dirname(__file__)])
        except ImportError:
            import _graphicsmodule
            return _graphicsmodule
        if fp is not None:
            try:
                _mod = imp.load_module('_graphicsmodule', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _graphicsmodule = swig_import_helper()
    del swig_import_helper
else:
    import _graphicsmodule
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import region
import fieldmodule
import timesequence
import optimisation
import field
import differentialoperator
import element
import node
import stream
import fieldcache
import rendition
import graphic
import tessellation
import graphicsmaterial
import selection
import graphicsfilter
import scene
import spectrum
class GraphicsModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsModule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _graphicsmodule.new_GraphicsModule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _graphicsmodule.delete_GraphicsModule
    __del__ = lambda self : None;
    def isValid(self): return _graphicsmodule.GraphicsModule_isValid(self)
    def getId(self): return _graphicsmodule.GraphicsModule_getId(self)
    def enableRenditions(self, *args): return _graphicsmodule.GraphicsModule_enableRenditions(self, *args)
    def getRendition(self, *args): return _graphicsmodule.GraphicsModule_getRendition(self, *args)
    def createMaterial(self): return _graphicsmodule.GraphicsModule_createMaterial(self)
    def defineStandardMaterials(self): return _graphicsmodule.GraphicsModule_defineStandardMaterials(self)
    def findMaterialByName(self, *args): return _graphicsmodule.GraphicsModule_findMaterialByName(self, *args)
    def createFilterVisibilityFlags(self): return _graphicsmodule.GraphicsModule_createFilterVisibilityFlags(self)
    def createFilterGraphicName(self, *args): return _graphicsmodule.GraphicsModule_createFilterGraphicName(self, *args)
    def createFilterRegion(self, *args): return _graphicsmodule.GraphicsModule_createFilterRegion(self, *args)
    def createFilterOperatorAnd(self): return _graphicsmodule.GraphicsModule_createFilterOperatorAnd(self)
    def createFilterOperatorOr(self): return _graphicsmodule.GraphicsModule_createFilterOperatorOr(self)
    def findFilterByName(self, *args): return _graphicsmodule.GraphicsModule_findFilterByName(self, *args)
    def createScene(self): return _graphicsmodule.GraphicsModule_createScene(self)
    def findSceneByName(self, *args): return _graphicsmodule.GraphicsModule_findSceneByName(self, *args)
    def createSpectrum(self): return _graphicsmodule.GraphicsModule_createSpectrum(self)
    def findSpectrumByName(self, *args): return _graphicsmodule.GraphicsModule_findSpectrumByName(self, *args)
    def createTessellation(self): return _graphicsmodule.GraphicsModule_createTessellation(self)
    def findTessellationByName(self, *args): return _graphicsmodule.GraphicsModule_findTessellationByName(self, *args)
GraphicsModule_swigregister = _graphicsmodule.GraphicsModule_swigregister
GraphicsModule_swigregister(GraphicsModule)

# This file is compatible with both classic and new-style classes.


