# Copyright 2008-2012 Alex Zvoleff)
#
# This file is part of the chitwanabm agent-based model.
#
# rcparams.default provides the default values that are used for the chitwanabm 
# if no local chitwanabmrc file is provided when the model is run, or that are 
# used if any parameters are missing from it.
# 
# Parameters are specifed in the following format:
#
# 	'parameter_name' : [default_value | validation_function] # Comment
#
# where 'parameter_name' is the name of the parameter, 'default_value' is the 
# default value, and validation_function one of the set of validation functions 
# listed in rcsetup.py. The validation function is used to ensure that only 
# valid values are provided to the model.
#
# Any comments or newline characters after the 'START OF RC DEFINITION' line 
# below will be included in any rc files built using the 'write_RC_file' 
# function  in rcsetup.py. The order in which the parameters  are specified in 
# this file will be retained when rc files are generated by the 'write_RC_file' 
# function.
#
# Contact Alex Zvoleff in the Department of Geography at San Diego State 
# University with any comments or questions. See the README.txt file for 
# contact information.

##################################
###***START OF RC DEFINITION***###
###############################################################################
# Model-wide parameters
###############################################################################
# A string naming the scenario - for convenience only. Has no direct impact on 
# the model parameters
'scenario.name' : ["Default" | validate_string]
# The year and month the model starts and ends. Use 1 for January, and 12 for 
# December.
'model.timebounds' : [((1997, 1), (2020,1)) | validate_time_bounds]
 # The size of each timestep (in months)
'model.timestep' : [1 | validate_int]
'model.burnin_timesteps' : [36 | validate_int]
# Whether to reinitialize a new world from scratch for each model run
'model.reinitialize' : [True | validate_boolean] 
'model.resultspath' : ["M:/Data/Nepal/chitwanabm_runs" | validate_writable_dir]
# Whether to produce summary plots for the model run after the run is 
# completed. Requires a working R installation, and some of the plots require 
# the psn and NBH CSV files to be produced for every timestep (see these rc 
# params below).
'model.make_plots' : [True | validate_boolean]
# Whether to save psn data to CSV periodically while running the model. This 
# will slow down the model slightly.
'save_psn_data' : [False | validate_boolean]
# Whether to save NBH data to CSV periodically while running the model. This 
# will slow down the model slightly.
'save_NBH_data' : [False | validate_boolean]
# Whether to save the model results to a pickled file at the end of the model 
# (they will be saved to CSV either way).
'save_pickled_end_results' : [False | validate_boolean]
# Whether to save shapefiles of LULC periodically while running the model. This 
# will slow down the model considerably.
'save_LULC_shapefiles' : [False | validate_boolean]
# Whether to run the functions in test.py to check proper functioning of the 
# model code. This will slow down the model considerably.
'run_validation_checks' : [False | validate_boolean]

###############################################################################
# Submodel settings
###############################################################################
'submodels.fertility' : [True | validate_boolean]
'submodels.mortality' : [True | validate_boolean]
'submodels.marriage' : [True | validate_boolean]
'submodels.divorce' : [True | validate_boolean]
'submodels.migration_individual' : [True | validate_boolean]
'submodels.migration_household' : [True | validate_boolean]
'submodels.schooling' : [True | validate_boolean]
'submodel.parameterization.marriage': ["zvoleff" | validate_string]
'submodel.parameterization.firstbirth': ["zvoleff" | validate_string]
'submodel.parameterization.migration' : ["zvoleff" | validate_string]
'submodel.parameterization.fuelwood_usage' : ["simple" | validate_string]

###############################################################################
# Location of input data (these are restricted data)
###############################################################################
# This is the path to the processed data file containing the final output file 
# from the "initialize.py" script.
'path.input_data_file' : ["V:/Nepal/chitwanabm_Initialization/init_data.pickle" | validate_readable_file_warning]
# The following is the path to the original restricted CVFS data as received 
# from the ICPSR (to be used when running the "initialize.py" script. The
# data_preprocess.R script will output several new files here when it is
# run, so this directory must be writeable.
'path.raw_input_data' : ["V:/Nepal/chitwanabm_Initialization" | validate_writable_dir]
# The world_mask is a binary GeoTIFF (zeros and ones), indicating the land area 
# represented within the model.
'world_mask_file' : ["CVFS_Study_Area_Raster_30m.tif" | validate_string]
# The DEM_file is a GeoTIFF digital elevation model of the study area.
'DEM_file' : ["CVFS_Study_Area_DEM_Raster_30m.tif" | validate_string]
# Set the level of verbosity for console output while the model is running:
'loglevel.console' : ["info" | validate_string]
# Set the level of verbosity for logging messages to a file while the model is 
# running (note this does not affect results output):
'loglevel.file' : ["warning" | validate_string]
# The next option will cause every calculated probability for the marriage, 
# migration, and first birth timing models to be printed in the log file. This 
# will slow down the model considerably, and the log files will be several 
# hundred megabytes.
'log_stats_probabilities' : [False | validate_boolean]

###############################################################################
# Person agent parameters
###############################################################################
# probability.time_units specifies the time period for which precalculated 
# probabilities are specified.
'probability.time_units' : ['years' | validate_time_units] 
# birth.max_age.years is the maximum age a woman can give birth in years.
'birth.min_age.years' : [15 | validate_int] 
'birth.max_age.years' : [45 | validate_int] 
'prob.birth.intervals' : [((9, 12, 18, 24, 30, 36, 42, 48, 54), (0.046053, 0.194079, 0.266447, 0.236842, 0.148026, 0.042763, 0.042763, 0.023026))] | validate_prob_dist]
'probability.death.male' : [{(0, 3):0.010903, (3, 6):0.00093, (6, 12):0.00061, (12, 20):0.001144, (20, 40):0.003045, (40, 60):0.009662, (60, 80):0.034247, (80, 90):0.14876, (90, 199):0.302326} | validate_probability(0, 199)]
'probability.death.female' : [{(0, 3):0.013335, (3, 6):0.00093, (6, 12):0.00061, (12, 20):0.001144, (20, 40):0.002016, (40, 60):0.004577, (60, 80):0.032828, (80, 90):0.140105, (90, 199):0.302326} | validate_probability(0, 199)]
'probability.marriage.male' : [{(15, 18):0.031023, (18, 22):0.114269, (22, 30):0.231391, (30, 40):0.118592, (40, 60):0.049346, (60, 199):0.004103} | validate_probability(15, 199)]
'probability.marriage.female' : [{(15, 18):0.108413, (18, 22):0.198113, (22, 30):0.168199, (30, 40):0.095898, (40, 60):0.005689, (60, 199):0} | validate_probability(15, 199)]
# prob.marriage.moveout is the household fission rate
'prob.marriage.moveout' : [.30 | validate_float]
# prob.marriage.divorce is the monthly probability of divorce (monthly 
# probability given per marriage per month).
'prob.marriage.divorce' : [.0002 | validate_float]
'marriage.minimum_age_years' : [15 | validate_int]
'marriage.maximum_age_years' : [35 | validate_int]
'migration.minimum_age_years' : [15 | validate_int]
'prob.firstbirth.times' : [((0, 6, 9, 12, 17, 22, 30, 40), (0.052632, 0.127193, 0.337719, 0.263158, 0.140351, 0.048246, 0.030702))] | validate_prob_dist]
'prob.num.children.desired' : [((-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (0.0144, 8e-04, 0.0317, 0.5891, 0.2709, 0.0656, 0.0146, 0.0055, 0.0044, 0.0017, 0.0013))] | validate_prob_dist]
'prob.migration.lengths' : [((0, 1, 2, 4, 8, 12, 18, 24, 30, 36), (.4361, .2369, .1505, .0769, .0545, .0238, .0154, .0056, .0056))] | validate_prob_dist]
'prob.migration.length.permanent' : [.0790 | validate_float]
'probability.migration.male' : [{(0, 10):0, (10, 14):0.0029, (14, 18):0.0177, (18, 22):0.0296, (22, 30):0.054, (30, 40):0.02, (40, 60):0, (60, 199):0} | validate_probability(0, 199)]
'probability.migration.female' : [{(0, 10):0, (10, 14):0.0019, (14, 18):0.0087, (18, 22):0.0136, (22, 30):0.020, (30, 40):0.01, (40, 60):0, (60, 199):0} | validate_probability(0, 199)]
'inmigrant_HH.prob.ethnicity' : [((1, 2, 3, 4, 5, 6), (.43881, .23222, .14226, .06224, .12448)) | validate_prob_dist]
'inmigrant_HH.prob.hh_size' : [((1, 2, 3, 4, 5, 6, 7), (.09559, .22108, .28627, .22108, .12059, .05539)) | validate_prob_dist]
'inmigrant_HH.prob.hh_head_age' : [((15, 25, 35, 45, 55), (.2997, .4274, .1720, .1008)) | validate_prob_dist]
'inmigrant_HH.prob.num_HHs' : [((0, 5, 10), (.6, .4)) | validate_prob_dist]

'outmigrant_HH.prob' : [.001 | validate_float]

# Coefficients for marriage timing from Zvoleff's analysis of CVFS household 
# registry, following Yabiku (2006) findings.
'marrtime.zv.coef.(Intercept)' : [-15.158389 | validate_float]
'marrtime.zv.coef.ethnicHillTibeto' : [0.17128 | validate_float]
'marrtime.zv.coef.ethnicLowHindu' : [0.014098 | validate_float]
'marrtime.zv.coef.ethnicNewar' : [-0.241117 | validate_float]
'marrtime.zv.coef.ethnicTeraiTibeto' : [-0.098677 | validate_float]
'marrtime.zv.coef.genderfemale' : [0.808777 | validate_float]
'marrtime.zv.coef.age' : [0.745225 | validate_float]
'marrtime.zv.coef.I(age^2)' : [-0.01453 | validate_float]
'marrtime.zv.coef.interp_logpercagveg' : [0.129327 | validate_float]
'marrtime.zv.coef.SCHLFT_1996' : [0.012038 | validate_float]
'marrtime.zv.coef.HLTHFT_1996' : [-0.001142 | validate_float]
'marrtime.zv.coef.BUSFT_1996' : [0.004502 | validate_float]
'marrtime.zv.coef.MARFT_1996' : [-0.000663 | validate_float]
'marrtime.zv.coef.EMPFT_1996' : [0.002801 | validate_float]
'marrtime.zv.coef.schooling_yrs' : [-0.002706 | validate_float]
'marrtime.zv.coef.in_school_1996' : [-0.402457 | validate_float]
'marrtime.zv.coef.month2' : [1.066019 | validate_float]
'marrtime.zv.coef.month3' : [1.578344 | validate_float]
'marrtime.zv.coef.month4' : [0.357913 | validate_float]
'marrtime.zv.coef.month5' : [1.526668 | validate_float]
'marrtime.zv.coef.month6' : [0.815815 | validate_float]
'marrtime.zv.coef.month7' : [0.877598 | validate_float]
'marrtime.zv.coef.month8' : [-0.387935 | validate_float]
'marrtime.zv.coef.month9' : [-0.924965 | validate_float]
'marrtime.zv.coef.month10' : [-0.669746 | validate_float]
'marrtime.zv.coef.month11' : [-0.375912 | validate_float]
'marrtime.zv.coef.month12' : [0.920188 | validate_float]

# Coefficients for first birth timing from Zvoleff's analysis of CVFS household 
# registry, following Ghimire and Axinn (2010).
'firstbirth.zv.coef.(Intercept)' : [-3.560683 | validate_float]
'firstbirth.zv.coef.percagveg_t1' : [0.005667 | validate_float]
'firstbirth.zv.coef.elec_avail' : [0.260844 | validate_float]
'firstbirth.zv.coef.avg_yrs_services_lt15' : [-0.004098 | validate_float]
'firstbirth.zv.coef.dist_nara' : [0.007021 | validate_float]
'firstbirth.zv.coef.total_t1' : [-0.867198 | validate_float]
'firstbirth.zv.coef.ethnicHillTibeto' : [-0.61769 | validate_float]
'firstbirth.zv.coef.ethnicLowHindu' : [0.02607 | validate_float]
'firstbirth.zv.coef.ethnicNewar' : [-0.4801 | validate_float]
'firstbirth.zv.coef.ethnicTeraiTibeto' : [-0.042525 | validate_float]
'firstbirth.zv.coef.schooling_yrs_cat[4,7)' : [0.482985 | validate_float]
'firstbirth.zv.coef.schooling_yrs_cat[7,11)' : [0.852401 | validate_float]
'firstbirth.zv.coef.schooling_yrs_cat[11,99)' : [1.304992 | validate_float]
'firstbirth.zv.coef.mths_marr_pre_1997' : [-0.005929 | validate_float]
'firstbirth.zv.coef.marr_duration[0,6)' : [2.424799 | validate_float]
'firstbirth.zv.coef.marr_duration[6,12)' : [1.9626 | validate_float]
'firstbirth.zv.coef.marr_duration[12,18)' : [1.683867 | validate_float]
'firstbirth.zv.coef.marr_duration[18,24)' : [1.149281 | validate_float]
'firstbirth.zv.coef.marr_duration[24,30)' : [0.420585 | validate_float]
'firstbirth.zv.coef.marr_duration[30,36)' : [0.82313 | validate_float]
'firstbirth.zv.coef.marr_duration[36,42)' : [0.262433 | validate_float]
'firstbirth.zv.coef.age_at_first_marr' : [-0.032231 | validate_float]
'firstbirth.zv.coef.father_work' : [-0.327453 | validate_float]
'firstbirth.zv.coef.mother_work' : [-0.072918 | validate_float]
'firstbirth.zv.coef.father_school' : [-0.134425 | validate_float]
'firstbirth.zv.coef.mother_school' : [-0.081283 | validate_float]
'firstbirth.zv.coef.mother_num_children' : [-0.023222 | validate_float]
'firstbirth.zv.coef.parents_contracep_ever' : [-0.032068 | validate_float]

# Migration coefficents from Zvoleff's analysis of CVFS household registry, 
# following Massey, Axinn, and Ghimire (2010).
'migration.zv.coef.in_school' : [-.198 | validate_float]
'migration.zv.coef.years_schooling' : [.072 | validate_float]
'migration.zv.coef.log_market_min_ft' : [.025 | validate_float]
'migration.zv.coef.own_farmland' : [-.073 | validate_float]
'migration.zv.coef.female' : [-0.472 | validate_float]
'migration.zv.coef.age15-24' : [1.029 | validate_float]
'migration.zv.coef.age24-34' : [.434 | validate_float]
'migration.zv.coef.age34-44' : [-.062 | validate_float]
'migration.zv.coef.age45-55' : [.049 | validate_float]
'migration.zv.coef.ethnicLowHindu' : [.104 | validate_float]
'migration.zv.coef.ethnicNewar' : [-.158 | validate_float]
'migration.zv.coef.ethnicHillTibeto' : [.201 | validate_float]
'migration.zv.coef.ethnicTeraiTibeto' : [-.484 | validate_float]
'migration.zv.coef.intercept' : [-4.903 | validate_float]

###############################################################################
# Household agent parameters
###############################################################################
'fw_usageprob.coef.intercept' : [1.0346 | validate_float]
'fw_usageprob.coef.hhsize' : [.3320 | validate_float]
'fw_usageprob.coef.ethnicLowHindu' : [1.0965 | validate_float]
'fw_usageprob.coef.ethnicNewar' : [-.7423 | validate_float]
'fw_usageprob.coef.ethnicHillTibeto' : [-.0037 | validate_float]
'fw_usageprob.coef.ethnicTeraiTibeto' : [2.5426 | validate_float]
'fw_usageprob.coef.meangender' : [.9869 | validate_float]
'fw_usageprob.coef.elecavail' : [-1.3013 | validate_float]
'fw_usageprob.coef.distnara_km' : [.0949 | validate_float]
'fw_usageprob.coef.closest_typeCNP' : [-0.4760 | validate_float]

'fw_demand.simple.coef.intercept' : [1.816 | validate_float]
'fw_demand.simple.coef.hhsize' : [-.408 | validate_float]
'fw_demand.simple.coef.hhsize_squared' : [.034 | validate_float]
'fw_demand.simple.coef.upper_caste_hindu' : [-.051 | validate_float]
'fw_demand.simple.coef.own_non_wood_stove' : [-.0255 | validate_float]
'fw_demand.simple.residvariance' : [.0842 | validate_float]

'fw_demand.migfeedback.coef.intercept' : [1.816 | validate_float]
'fw_demand.migfeedback.coef.hhsize' : [-.408 | validate_float]
'fw_demand.migfeedback.coef.hhsize_squared' : [.034 | validate_float]
'fw_demand.migfeedback.coef.upper_caste_hindu' : [-.051 | validate_float]
'fw_demand.migfeedback.coef.own_non_wood_stove' : [-.0255 | validate_float]
'fw_demand.migfeedback.coef.anyLDmigr' : [-.943 | validate_float]
#'fw_demand.migfeedback.coef.anyLDmigr' : [-.25 | validate_float]
#'fw_demand.migfeedback.coef.anyLDmigr' : [-1.636 | validate_float]
'fw_demand.migfeedback.residvariance' : [.0842 | validate_float]

# Education OLR results
'education.start_school_age_years' : [6 | validate_int]
'education.depvar_levels' : [(0, 4, 8, 11, 15) | validate_nseq_int(5)]
'education.coef.intercepts' : [(2.0783, 1.3574, -.0135, -1.6826) | validate_nseq_float(4)]
'education.coef.female' : [-2.0839 | validate_float]
'education.coef.ethnicLowHindu' : [-2.0151 | validate_float]
'education.coef.ethnicHillTibeto' : [-1.4839 | validate_float]
'education.coef.ethnicNewar' : [-0.0171 | validate_float]
'education.coef.ethnicTeraiTibeto' : [-2.4833 | validate_float]
'education.coef.avg_yrs_services_lt15' : [0.0485 | validate_float]

# Spouse choice (dependent on age) parameters
'spousechoice.male.agediff' : [((20, -15, -10, -5, -2, -1, 0, 1, 2, 5, 10, 15, 30), (.0005411, .0032468, .0075758, .0205628, .0178571, .0524892, .0703463, .1049784, .3019481, .2732684, .0963203, .0508658)) | validate_prob_dist]

###############################################################################
# Landscape parameters
###############################################################################
'NFOs.change.type' : [('None') | validate_string_list]
'NFOs.rand_NBH_type' : ['inv_dist_narayangar_km' | validate_string]
'NFOs.change.prob_new_school' : [((0, 1, 3, 5), (.3, .5, .2)) | validate_prob_dist]
'NFOs.change.prob_new_health' : [((0, 1, 3, 5), (.3, .5, .2)) | validate_prob_dist]
'NFOs.change.prob_new_bus' : [((0, 1, 3, 5), (.3, .5, .2)) | validate_prob_dist]
'NFOs.change.prob_new_market' : [((0, 1, 3, 5), (.3, .5, .2)) | validate_prob_dist]
'NFOs.change.prob_new_employer' : [((0, 1, 3, 5), (.3, .5, .2)) | validate_prob_dist]

'lulc.area.hh' : [((30, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000), (0.0544, 0.0862, 0.1111, 0.1361, 0.1429, 0.1361, 0.0907, 0.1088, 0.0907, 0.0431)) | validate_prob_dist]

# Feedback parameters are named so that, for example: 
'feedback.birth.nonagveg': [True | validate_boolean]
'feedback.birth.nonagveg.area': [10 | validate_float]
