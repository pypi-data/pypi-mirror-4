<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
      lang="en-US"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

<head>
  <metal:block fill-slot="top_slot"
                 tal:define="dummy python:request.set('disable_border', 1)" />
  <metal:block fill-slot="style_slot">
    <!-- NOTE: order is important for these CSS style sheets. -->
    <!-- Import COMMON CALENDAR CSS style sheet. -->
    <LINK href="calendar.css" type=text/css rel=stylesheet 
          tal:attributes="href string:calendar.css"/>
    <!-- Import VIEW-SPECIFIC CSS style sheet. -->
    <!-- UNIQUE FOR EACH CALENDAR VIEW. -->
    <LINK href="multimonth.css" type=text/css rel=stylesheet 
          tal:attributes="href string:multimonth.css"/>
    <!-- Import PRINTING CSS style sheet -->
    <LINK href="calendarPrint.css" type="text/css" media="print" rel="stylesheet" 
          tal:attributes="href string:calendarPrint.css" />
    <!-- Import COMMON JavaScript files (one for basic dhtml-functions, the other for calendar-application specific functions. -->
    <script type="text/javascript" src="dhtml.js" 
          tal:attributes="src string:dhtml.js"></script>
    <script type="text/javascript" src="calendar.js" 
          tal:attributes="src string:calendar.js"></script>
    <!-- Set VIEW-SPECIFIC JS parameter -->
    <script type="text/javascript">
<!--
    setMax(506);
-->
    </script>
  </metal:block>
</head>  

<body>
<!-- Defining global variables -->
<div metal:fill-slot="main"
       i18n:domain="calendarx"
       tal:define="
                 MODIFIED string:mod for 0.6.5 to use prevnextcurrentlinks_nojump macro at the bottom of the page;
                 viewname string:multimonth;
                 context python:here;
                 DateTime python:modules['DateTime'].DateTime; 
                 Dict python:here.getDictMultiMonth();
                 url here/absolute_url;
                 nummonths Dict/nummonths;
                 ampm Dict/ampm;
                 xmy Dict/xmy;
                 xsub Dict/xsub;
                 xpub Dict/xpub;
                 xcrt Dict/xcrt;
                 currentDate Dict/currentDate;
                 startDateList Dict/startDateList;
                 endDateList Dict/endDateList;
                 startDateToShowList Dict/startDateToShowList;
                 howManyWeeksToShowList Dict/weeksInMonthToShowList;
                 endDateToShowList Dict/endDateToShowList;
                 showHighlightFullEvent python: here.getCXAttribute('showHighlightFullEvent');
                 useSubjectIcons        python: here.getCXAttribute('useSubjectIcons');
                 useSubjCSS             python: here.getCXAttribute('useSubjectCSSClasses');  
                 useEventTypeIcons      python: here.getCXAttribute('useEventTypeIcons');
                 useETCSS               python: here.getCXAttribute('useEventTypeCSSClasses');  
                 showOnlyEventsInMonth  python: here.getCXAttribute('showOnlyEventsInMonth');
                 LEOAS                  python: here.getCXAttribute('labelEventsOnlyAtStart');
                 st python: test(showOnlyEventsInMonth,startDateList[0],startDateToShowList[0]);
                 en python: test(showOnlyEventsInMonth,endDateList[-1],endDateToShowList[-1]);
                 bigQ python: here.getCXEventsBetween(st, en, xmy, xsub, xpub, xcrt);
                 bigQB python: here.getCXEventsBefore(st, xmy, xsub, xpub, xcrt, en);">



<!-- HEADSTUFF: the Title/ID, the Document Action icons (print,etc), and Description -->
<metal:block metal:use-macro="python:here.getCXMacro('headstuff')"/>


<!-- the main table -->
<table cellspacing="0" class="caltabs">


<!-- ROW: the tabs "month", "week", "week2", "day" -->
<metal:block metal:use-macro="python:here.getCXMacro('caltabsforviews')"/>


<!-- ROW: the "subject categories" options -->
<metal:block metal:use-macro="python:here.getCXMacro('subjectlinks')"/>

  <tr> 
    <td class="body">

<!-- "previous", "next" and current date string. -->
<metal:block metal:use-macro="python:here.getCXMacro('prevnextcurrentlinks')"/>

<!-- showing all events that started before the time displayed, but are still running. -->
<table class="calall" tal:define="startForContinuing Dict/startForContinuing;
                                  continuingEvents python:[ev for ev in bigQB if (ev.start < startForContinuing and ev.end >= startForContinuing)]" 
                      tal:condition="continuingEvents">
  <tr><th i18n:translate="heading_continuing_events">Whole-Month-Events or Events that already started but are still running.</th></tr>
  <tr class="noevent" 
      tal:define="dayID python: 0;
                  start python: startDateToShowList[0];"
      tal:attributes="class python: test(continuingEvents, 'event', 'noevent');
	                  id string:cal${dayID}">
    <td>
<!-- iterate through the events -->
       <metal:block tal:repeat="event continuingEvents"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${dayID}event${repeat/event/number};
                              eDict python:here.getEventDictMMonth(event,type='C',sDTS=startDateToShowList[0],eDTS=endDateToShowList[0],eWTS=howManyWeeksToShowList[0]);
                              eventstart eDict/eventstart;
                              eventend eDict/eventend;
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,here.getSubjectCSSClasses(event),'eventPublished');  
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished'); ">

<metal:block metal:use-macro="python:here.getCXMacro('eventlister')"/>
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>
            </span>
       </metal:block>&nbsp;
    </td>
  </tr>
</table>


<table class="multimonth">
  <metal:block tal:repeat="mMonth python:range(nummonths)">
  <tr><td>

<!-- the month-calendar-view. showing 4-6 weeks. -->
<table class="cal">
  <tr>
<!--  Generate monthname here  -->
  <metal:block metal:use-macro="python:here.getCXMacro('monthnameformultimonths')"/>
  </tr>
  <tr>
<!--  Generate days of week <th> tags here  -->
<metal:block metal:use-macro="python:here.getCXMacro('monthdaysofweek')"/>
  </tr>
<!-- iterate through the weeks (rows of the table) -->
  <metal:block tal:repeat="weekMonth python:range(howManyWeeksToShowList[mMonth])">
  <tr class="odd" tal:define="start python: startDateToShowList[mMonth] + (weekMonth)*7"> 
<!-- iterate through the days of the week (columns of the table) -->
    <metal:block tal:repeat="dayMonth python:range(7)">
    <td id="cal#"
	    tal:define="
                        COMMENT string: dayID bumped up by 1000x for each mMonth to avoid collisions;
                        dayID python: (mMonth*1000)+(weekMonth)*7 + dayMonth + 1;
                        start python: here.getStartOfDay(startDateToShowList[mMonth] + (weekMonth)*7 + dayMonth);
                        end python: here.getEndOfDay(start);
                        dayName python: start.Day();
                        COMMENT string: events python: here.getCXEventsBetween(start, end, xmy, xsub, xpub, xcrt);
                        events python: [ev for ev in bigQ if (ev.start >= start and ev.start <= end)];
                        COMMENT string: startForBefore is set to eliminate events ending ON the hour; 
                        COMMENT string: IGNORE if not showHighlightFullEvent;
                        startForBefore python: DateTime(str(startDateList[mMonth].year())+'/'+str(start.month())+'/'+str(start.day())+' 00:01:00');
                        COMMENT string: OLD Way - eventsBefore   python: test(showHighlightFullEvent,here.getCXEventsBefore(startForBefore, xmy, xsub, xpub, xcrt),[]); 
                        eventsBefore python: [ev for ev in bigQB if (ev.start < startForBefore and ev.end >= startForBefore)];
                        isInMonth python: test(start.month() == startDateList[mMonth].month(), 1, 0);
                        COMMENT string: test and use labelEventsOnlyAtStart (LEOAS) or not; 
                        events python: test(LEOAS,events,context.queriesUnique(eventsBefore+events)) ; 
                        COMMENT string: tester determines whether to highlight full extent of events on the calendar; 
                        tester python: test(showHighlightFullEvent,(events or eventsBefore),events);"
        tal:attributes="class python:test(isInMonth, test(tester, 'event', 'noevent'), 'outOfMonth');
                        id string:cal${dayID}">
<!-- the link to the day-view -->
        <a href="#" tal:attributes="href string: ${url}/day?currentDate=${start}&xmy=${xmy}&xsub=${xsub}"><span class="day" tal:content="python: start.day()">daydate</span></a><br/>&nbsp;<br/>
<!-- iterate through the events of the day -->
        <metal:block tal:repeat="event events"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${dayID}event${repeat/event/number};
                              eDict python:here.getEventDictMMonth(event,type='E',sDTS=startDateToShowList[mMonth],eDTS=endDateToShowList[mMonth],dayID=dayID,eWTS=howManyWeeksToShowList[mMonth],mMonth=mMonth,vDict=Dict,nummons=nummonths);
                              eventstart eDict/eventstart;
                              eventend eDict/eventend;
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              jsArray eDict/jsArray; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,here.getSubjectCSSClasses(event),'eventPublished'); 
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished'); ">

<!-- print the event text-->
<metal:block metal:use-macro="python:here.getCXMacro('mMeventlister')"/>

<!-- print the rollover popup text-->
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>

            </span>
       </metal:block>&nbsp;
    </td>
    </metal:block>
  </tr>
  </metal:block>
</table>

  </td></tr>
  </metal:block>
</table>

<!-- "previous month", "next month" -links and the current month string. -->
<metal:block metal:use-macro="python:here.getCXMacro('prevnextcurrentlinks_nojump')"/>


    </td>
  </tr>
</table>


<metal:block metal:use-macro="python:here.getCXMacro('copyright')"/>



</div>
</body>
</html>


