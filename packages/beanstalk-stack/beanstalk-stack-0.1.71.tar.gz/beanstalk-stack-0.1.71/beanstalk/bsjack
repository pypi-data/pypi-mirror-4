#!/usr/bin/env python

import os
import sys
from fabric.api import local, hide, settings
from fabric.colors import magenta, green
import beanstalk


def main():
    command_name = os.path.split(os.path.splitext(__file__)[0])[-1]
    # Get fab file
    beanstalk_install_path = os.path.split(os.path.split(beanstalk.__file__)[0])[0]
    beanstalk_package_path = os.path.join(beanstalk_install_path, 'beanstalk')
    fab_file_path = os.path.join(beanstalk_package_path, 'tasks/__init__.py')

    # Paths
    current_dir = os.getcwd()
    current_container = os.path.abspath(os.path.join(current_dir, '..'))
    original_python_path = os.environ.get('PYTHONPATH', '')
    if original_python_path:
        original_python_path += ':'
    python_path = original_python_path + ':'.join([current_dir, current_container])

    # Task
    # Escaping '"'
    tasks = ' '.join(map(lambda x: '"{0}"'.format(x.replace('"', r'\"')), sys.argv[1:]))

    # Prepare for the command
    exec_context = {
        'python_path': python_path,
        'fab_file': fab_file_path,
        'fab_arguments': '--linewise -u beanstalk --hide=status',
        'tasks': tasks,
    }

    # Show usage
    if len(sys.argv) < 2:
        print magenta('Beanstalk-Stack man: {0}'.format(command_name), bold=True)
        print 'Hello, I\'m Jack who plant the beanstalk.'
        print 'Beanstalk-Stack version: {0}'.format(beanstalk.__version__)
        print ''
        print 'Usage: '
        print ''
        print '    {0} command1:argument1-1,argument1-2 [command2:argument2-1,argument2-2 ...]'.format(command_name)
        print '    {0} --list'.format(command_name)
        print ''
        with hide('running'):
            local('PYTHONPATH={python_path} fab -f {fab_file} --list'.format(**exec_context))
        print ''
        print 'Beanstalk-Stack is built with ' + green('Python-Fabric') + '.'
        print 'So you can pass all arguments for fabric to {0}.'.format(command_name)
        print ''
        sys.exit(1)

    # Go!
    with settings(hide('running', 'warnings', 'status'), warn_only=True):
        local('PYTHONPATH={python_path} fab -f {fab_file} {fab_arguments} {tasks}'.format(**exec_context))


if __name__ == '__main__':
    main()
