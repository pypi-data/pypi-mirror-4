	.file	"cutils.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"O|O&ii"
	.text
	.p2align 4,,15
	.type	numpy_dimarray, @function
numpy_dimarray:
.LFB91:
	pushq	%rbx
.LCFI0:
	movq	%rsi, %rdi
	leaq	.LC0(%rip), %rsi
	subq	$48, %rsp
.LCFI1:
	movq	PyArray_API(%rip), %rax
	leaq	24(%rsp), %rbx
	leaq	32(%rsp), %rdx
	leaq	44(%rsp), %r9
	movq	$0, 24(%rsp)
	movl	$1, 44(%rsp)
	movq	1392(%rax), %rcx
	leaq	40(%rsp), %rax
	movq	%rbx, %r8
	movl	$0, 40(%rsp)
	movq	%rax, (%rsp)
	xorl	%eax, %eax
	call	PyArg_ParseTuple@PLT
	testl	%eax, %eax
	je	.L2
	cmpq	$0, 24(%rsp)
	je	.L9
.L4:
	movq	PyArray_API(%rip), %rax
	movl	44(%rsp), %ecx
	xorl	%r9d, %r9d
	movl	40(%rsp), %edx
	movq	24(%rsp), %rsi
	xorl	%r8d, %r8d
	movq	32(%rsp), %rdi
	call	*552(%rax)
	addq	$48, %rsp
	popq	%rbx
	ret
.L9:
	movq	PyArray_API(%rip), %rax
	movq	PyBaseObject_Type@GOTPCREL(%rip), %rdi
	movq	%rbx, %rsi
	call	*1392(%rax)
	testl	%eax, %eax
	jne	.L4
	.p2align 4,,7
.L2:
	addq	$48, %rsp
	xorl	%eax, %eax
	popq	%rbx
	ret
.LFE91:
	.size	numpy_dimarray, .-numpy_dimarray
	.section	.rodata.str1.1
.LC1:
	.string	"OO"
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC2:
	.string	"Sequence should be a contiguous 1-dimensional numpy array of unsigned 64bit integers."
	.align 8
.LC3:
	.string	"Indexes should be a contiguous 1-dimensional numpy array of unsigned 32bit integers."
	.align 8
.LC4:
	.string	"Index should be between 0 and len(seq)."
	.text
	.p2align 4,,15
	.type	bitor_reduceat, @function
bitor_reduceat:
.LFB94:
	movq	%rbx, -24(%rsp)
.LCFI2:
	movq	%rbp, -16(%rsp)
.LCFI3:
	movq	%rsi, %rdi
	movq	%r12, -8(%rsp)
.LCFI4:
	subq	$56, %rsp
.LCFI5:
	leaq	.LC1(%rip), %rsi
	leaq	16(%rsp), %rcx
	leaq	24(%rsp), %rdx
	xorl	%eax, %eax
	call	PyArg_ParseTuple@PLT
	testl	%eax, %eax
	je	.L11
	movq	24(%rsp), %rcx
	movq	PyArray_API(%rip), %rax
	movq	8(%rcx), %rdi
	movq	16(%rax), %rsi
	cmpq	%rsi, %rdi
	je	.L13
	call	PyType_IsSubtype@PLT
	testl	%eax, %eax
	je	.L15
	movq	24(%rsp), %rcx
.L13:
	movq	56(%rcx), %rsi
	movl	28(%rsi), %edx
	leal	-1(%rdx), %eax
	cmpl	$9, %eax
	ja	.L15
	cmpl	$2, %edx
	je	.L17
	cmpl	$4, %edx
	je	.L17
	cmpl	$6, %edx
	.p2align 4,,5
	je	.L17
	cmpl	$8, %edx
	.p2align 4,,5
	je	.L17
	cmpl	$10, %edx
	.p2align 4,,5
	je	.L17
	.p2align 4,,7
.L15:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC2(%rip), %rsi
	xorl	%ebx, %ebx
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
.L24:
	movq	%rbx, %rax
	movq	40(%rsp), %rbp
	movq	32(%rsp), %rbx
	movq	48(%rsp), %r12
	addq	$56, %rsp
	ret
	.p2align 4,,7
.L11:
	xorl	%ebx, %ebx
	jmp	.L24
	.p2align 4,,7
.L17:
	cmpl	$1, 24(%rcx)
	jne	.L15
	testb	$1, 64(%rcx)
	.p2align 4,,5
	je	.L15
	cmpl	$8, 32(%rsi)
	.p2align 4,,5
	jne	.L15
	movq	16(%rsp), %rcx
	movq	PyArray_API(%rip), %rax
	movq	8(%rcx), %rdi
	movq	16(%rax), %rsi
	cmpq	%rsi, %rdi
	je	.L25
	call	PyType_IsSubtype@PLT
	testl	%eax, %eax
	je	.L27
	movq	16(%rsp), %rcx
.L25:
	movq	56(%rcx), %rsi
	movl	28(%rsi), %edx
	leal	-1(%rdx), %eax
	cmpl	$9, %eax
	ja	.L27
	cmpl	$2, %edx
	je	.L29
	cmpl	$4, %edx
	je	.L29
	cmpl	$6, %edx
	.p2align 4,,5
	je	.L29
	cmpl	$8, %edx
	.p2align 4,,5
	je	.L29
	cmpl	$10, %edx
	.p2align 4,,5
	je	.L29
.L27:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC3(%rip), %rsi
	xorl	%ebx, %ebx
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	jmp	.L24
.L29:
	cmpl	$1, 24(%rcx)
	jne	.L27
	testb	$1, 64(%rcx)
	.p2align 4,,7
	je	.L27
	cmpl	$4, 32(%rsi)
	.p2align 4,,5
	jne	.L27
	movq	24(%rsp), %rax
	movl	24(%rax), %esi
	movq	32(%rax), %rdi
	movq	PyArray_API(%rip), %rax
	call	*1264(%rax)
	movq	%rax, %r12
	movq	16(%rsp), %rax
	movl	24(%rax), %esi
	movq	32(%rax), %rdi
	movq	PyArray_API(%rip), %rax
	call	*1264(%rax)
	movq	%rax, %rbp
	movq	PyArray_API(%rip), %rax
	movl	$10, %edi
	call	*360(%rax)
	movq	PyArray_API(%rip), %r10
	movq	%rax, %rsi
	movq	16(%rsp), %rax
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$1, %edx
	movq	32(%rax), %rcx
	movq	16(%r10), %rdi
	movq	$0, 8(%rsp)
	movl	$0, (%rsp)
	call	*752(%r10)
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L24
	testl	%ebp, %ebp
	je	.L24
	movq	16(%rax), %rsi
	movq	24(%rsp), %rax
	movl	%r12d, %r8d
	movl	%r12d, %r11d
	movq	16(%rax), %r9
	movq	16(%rsp), %rax
	movq	16(%rax), %rcx
	movl	(%rcx), %edx
	cmpl	%r12d, %edx
	ja	.L43
	movslq	%ebp,%rax
	leaq	4(%rcx), %rdi
	leaq	(%rcx,%rax,4), %r10
	mov	%edx, %eax
	leaq	(%r9,%rax,8), %rdx
	cmpq	%rdi, %r10
	jbe	.L41
	movl	4(%rcx), %eax
	cmpl	%r12d, %eax
	ja	.L43
	addq	$8, %rsi
.L46:
	mov	%eax, %eax
	addq	$4, %rdi
	leaq	(%r9,%rax,8), %rax
	cmpq	%rax, %rdx
	jae	.L48
	movq	(%rdx), %rcx
	addq	$8, %rdx
	cmpq	%rdx, %rax
	movq	%rcx, -8(%rsi)
	jbe	.L50
.L55:
	orq	(%rdx), %rcx
	addq	$8, %rdx
	cmpq	%rdx, %rax
	movq	%rcx, -8(%rsi)
	ja	.L55
.L50:
	cmpq	%rdi, %r10
	jbe	.L41
	movl	(%rdi), %eax
	addq	$8, %rsi
	cmpl	%eax, %r11d
	jae	.L46
.L43:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC4(%rip), %rsi
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	jne	.L11
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	xorl	%ebx, %ebx
	call	*48(%rax)
	jmp	.L24
.L48:
	movq	$0, -8(%rsi)
	.p2align 4,,3
	jmp	.L50
.L41:
	movslq	%r8d,%rax
	movq	$0, (%rsi)
	leaq	(%r9,%rax,8), %rax
	cmpq	%rax, %rdx
	jae	.L24
	xorl	%ecx, %ecx
.L53:
	orq	(%rdx), %rcx
	addq	$8, %rdx
	cmpq	%rdx, %rax
	movq	%rcx, (%rsi)
	ja	.L53
	jmp	.L24
.LFE94:
	.size	bitor_reduceat, .-bitor_reduceat
	.section	.rodata.str1.8
	.align 8
.LC5:
	.string	"Input should be a contiguous 1-dimensional numpy array of unsigned 64bit integers."
.globl __popcountdi2
	.text
	.p2align 4,,15
	.type	bit_count, @function
bit_count:
.LFB93:
	movq	%rbx, -32(%rsp)
.LCFI6:
	movq	%rbp, -24(%rsp)
.LCFI7:
	movq	%rsi, %rbx
	movq	%r12, -16(%rsp)
.LCFI8:
	movq	%r13, -8(%rsp)
.LCFI9:
	subq	$56, %rsp
.LCFI10:
	movq	PyArray_API(%rip), %rax
	movq	8(%rsi), %rdi
	movq	16(%rax), %rsi
	cmpq	%rsi, %rdi
	je	.L63
	call	PyType_IsSubtype@PLT
	testl	%eax, %eax
	jne	.L63
	.p2align 4,,7
.L65:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC5(%rip), %rsi
	xorl	%ebp, %ebp
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
.L74:
	movq	%rbp, %rax
	movq	24(%rsp), %rbx
	movq	32(%rsp), %rbp
	movq	40(%rsp), %r12
	movq	48(%rsp), %r13
	addq	$56, %rsp
	ret
	.p2align 4,,7
.L63:
	movq	56(%rbx), %rcx
	movl	28(%rcx), %edx
	leal	-1(%rdx), %eax
	cmpl	$9, %eax
	ja	.L65
	cmpl	$2, %edx
	je	.L67
	cmpl	$4, %edx
	je	.L67
	cmpl	$6, %edx
	.p2align 4,,5
	je	.L67
	cmpl	$8, %edx
	.p2align 4,,5
	je	.L67
	cmpl	$10, %edx
	.p2align 4,,5
	jne	.L65
	.p2align 4,,7
.L67:
	cmpl	$1, 24(%rbx)
	.p2align 4,,5
	jne	.L65
	testb	$1, 64(%rbx)
	.p2align 4,,5
	je	.L65
	cmpl	$8, 32(%rcx)
	.p2align 4,,5
	jne	.L65
	movq	PyArray_API(%rip), %rax
	movl	$1, %esi
	movq	32(%rbx), %rdi
	call	*1264(%rax)
	movq	%rax, %r12
	movq	PyArray_API(%rip), %rax
	movl	$2, %edi
	call	*360(%rax)
	movq	%rax, %rsi
	movq	PyArray_API(%rip), %rax
	movq	32(%rbx), %rcx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$1, %edx
	movq	16(%rax), %rdi
	movq	$0, 8(%rsp)
	movl	$0, (%rsp)
	call	*752(%rax)
	testq	%rax, %rax
	movq	%rax, %rbp
	je	.L74
	subl	$1, %r12d
	movq	16(%rax), %r13
	movq	16(%rbx), %rax
	cmpl	$-1, %r12d
	je	.L74
	movq	%rax, %rbx
.L77:
	movq	(%rbx), %rdi
	subl	$1, %r12d
	addq	$8, %rbx
	call	__popcountdi2@PLT
	movb	%al, (%r13)
	addq	$1, %r13
	cmpl	$-1, %r12d
	jne	.L77
	jmp	.L74
.LFE93:
	.size	bit_count, .-bit_count
	.section	.rodata.str1.1
.LC6:
	.string	"getrandbits"
.LC7:
	.string	"i"
	.section	.rodata.str1.8
	.align 8
.LC8:
	.string	"Input should be a contiguous 1-dimensional numpy array of uint8, containing bit counts."
	.align 8
.LC9:
	.string	"Cannot allocate aligned memory"
	.align 8
.LC10:
	.string	"Values in input array should be <= 64"
	.text
	.p2align 4,,15
	.type	random_bits, @function
random_bits:
.LFB92:
	movq	%rbx, -48(%rsp)
.LCFI11:
	movq	%rbp, -40(%rsp)
.LCFI12:
	movq	%r12, -32(%rsp)
.LCFI13:
	movq	%r13, -24(%rsp)
.LCFI14:
	movq	%rsi, %r12
	movq	%r14, -16(%rsp)
.LCFI15:
	movq	%r15, -8(%rsp)
.LCFI16:
	subq	$88, %rsp
.LCFI17:
	movq	random_module@GOTPCREL(%rip), %rax
	leaq	.LC6(%rip), %rsi
	movq	(%rax), %rdi
	call	PyObject_GetAttrString@PLT
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	movl	$32, %edx
	xorl	%eax, %eax
	call	PyObject_CallFunction@PLT
	movq	%rax, %rbp
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L131
.L81:
	movq	8(%rbp), %rax
	testb	$1, 171(%rax)
	jne	.L132
.L83:
	xorl	%ebx, %ebx
.L98:
	movq	%rbx, %rax
	movq	48(%rsp), %rbp
	movq	40(%rsp), %rbx
	movq	56(%rsp), %r12
	movq	64(%rsp), %r13
	movq	72(%rsp), %r14
	movq	80(%rsp), %r15
	addq	$88, %rsp
	ret
	.p2align 4,,7
.L132:
	movq	%rbp, %rdi
	call	PyLong_AsUnsignedLong@PLT
	movq	%rax, %rbx
	movq	(%rbp), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbp)
	je	.L133
.L85:
	movl	%ebx, %edi
	call	init_gen_rand@PLT
	movq	PyArray_API(%rip), %rax
	movq	8(%r12), %rdi
	movq	16(%rax), %rsi
	cmpq	%rsi, %rdi
	je	.L87
	call	PyType_IsSubtype@PLT
	testl	%eax, %eax
	jne	.L87
	.p2align 4,,7
.L89:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC8(%rip), %rsi
	xorl	%ebx, %ebx
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	jmp	.L98
	.p2align 4,,7
.L87:
	movq	56(%r12), %rcx
	movl	28(%rcx), %edx
	leal	-1(%rdx), %eax
	cmpl	$9, %eax
	ja	.L89
	cmpl	$2, %edx
	je	.L91
	cmpl	$4, %edx
	je	.L91
	cmpl	$6, %edx
	.p2align 4,,5
	je	.L91
	cmpl	$8, %edx
	.p2align 4,,5
	je	.L91
	cmpl	$10, %edx
	.p2align 4,,5
	jne	.L89
	.p2align 4,,7
.L91:
	cmpl	$1, 24(%r12)
	.p2align 4,,5
	jne	.L89
	testb	$1, 64(%r12)
	.p2align 4,,5
	je	.L89
	cmpl	$1, 32(%rcx)
	.p2align 4,,5
	jne	.L89
	movq	PyArray_API(%rip), %rax
	movl	$1, %esi
	movq	32(%r12), %rdi
	call	*1264(%rax)
	movq	%rax, %rbp
	movq	PyArray_API(%rip), %rax
	movl	$10, %edi
	call	*360(%rax)
	movq	%rax, %rsi
	movq	PyArray_API(%rip), %rax
	movq	32(%r12), %rcx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$1, %edx
	movq	16(%rax), %rdi
	movq	$0, 8(%rsp)
	movl	$0, (%rsp)
	call	*752(%rax)
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L98
	leaq	32(%rsp), %rdi
	movl	$32768, %edx
	movl	$16, %esi
	call	posix_memalign@PLT
	testl	%eax, %eax
	jne	.L130
	movq	32(%rsp), %rdi
	testq	%rdi, %rdi
	je	.L130
	movl	$4096, %esi
	call	fill_array64@PLT
	movq	32(%rsp), %rdi
	movq	16(%r12), %r12
	movq	16(%rbx), %rdx
	leaq	32256(%rdi), %rax
	movq	%rdi, %rsi
	movq	%rax, 16(%rsp)
	movslq	%ebp,%rax
	leaq	(%rax,%r12), %r15
	cmpq	%r15, %r12
	jae	.L106
	movq	%rdx, %r13
.L108:
	movzbl	(%r12), %ebp
	xorl	%r14d, %r14d
	cmpb	$32, %bpl
	jbe	.L111
	cmpb	$64, %bpl
	ja	.L134
	movl	$64, %eax
	movl	$1, %r14d
	subb	%bpl, %al
	movl	%eax, %ebp
.L111:
	cmpq	%rsi, 16(%rsp)
	jb	.L135
.L116:
	xorl	%edx, %edx
	jmp	.L118
.L119:
	movzbl	(%rsi), %ecx
	movl	$1, %eax
	sarb	$2, %cl
	salq	%cl, %rax
	orq	%rdx, %rax
	cmpq	%rdx, %rax
	sete	%dl
	addq	$1, %rsi
	addl	%edx, %ebp
	movq	%rax, %rdx
.L118:
	subl	$1, %ebp
	cmpb	$-1, %bpl
	jne	.L119
	testb	%r14b, %r14b
	je	.L123
	notq	%rdx
	movq	%rdx, (%r13)
.L125:
	addq	$1, %r12
	cmpq	%r15, %r12
	je	.L106
	addq	$8, %r13
	jmp	.L108
	.p2align 4,,7
.L131:
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	call	*48(%rax)
	.p2align 4,,5
	jmp	.L81
	.p2align 4,,7
.L133:
	movq	8(%rbp), %rax
	movq	%rbp, %rdi
	.p2align 4,,3
	call	*48(%rax)
	.p2align 4,,7
	jmp	.L85
.L135:
	subq	%rdi, %rsi
	shrq	$3, %rsi
	addl	$2, %esi
	andl	$-2, %esi
	call	fill_array64@PLT
	movq	32(%rsp), %rdi
	movq	%rdi, %rsi
	jmp	.L116
.L123:
	movq	%rdx, (%r13)
	jmp	.L125
.L106:
	call	free@PLT
	.p2align 4,,6
	jmp	.L98
.L134:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC10(%rip), %rsi
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L136
.L114:
	movq	32(%rsp), %rdi
	xorl	%ebx, %ebx
	call	free@PLT
	jmp	.L98
.L130:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC9(%rip), %rsi
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	jne	.L83
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	xorl	%ebx, %ebx
	call	*48(%rax)
	jmp	.L98
.L136:
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	call	*48(%rax)
	.p2align 4,,7
	jmp	.L114
.LFE92:
	.size	random_bits, .-random_bits
	.section	.rodata.str1.1
.LC11:
	.string	"argument should be a sequence"
	.section	.rodata.str1.8
	.align 8
.LC12:
	.string	"argument should be a nested sequence"
	.align 8
.LC13:
	.string	"Nested sequences should have equal length."
	.text
	.p2align 4,,15
	.type	transpose, @function
transpose:
.LFB90:
	movq	%rbx, -48(%rsp)
.LCFI18:
	movq	%rbp, -40(%rsp)
.LCFI19:
	movq	%rsi, %rbx
	movq	%r12, -32(%rsp)
.LCFI20:
	movq	%r13, -24(%rsp)
.LCFI21:
	movq	%r14, -16(%rsp)
.LCFI22:
	movq	%r15, -8(%rsp)
.LCFI23:
	subq	$72, %rsp
.LCFI24:
	movq	PyArray_API(%rip), %rax
	movq	8(%rsi), %rdi
	movq	16(%rax), %rsi
	cmpq	%rsi, %rdi
	je	.L200
	call	PyType_IsSubtype@PLT
	testl	%eax, %eax
	je	.L201
.L200:
	addq	$1, (%rbx)
.L141:
	movq	%rbx, %rax
	movq	32(%rsp), %rbp
	movq	24(%rsp), %rbx
	movq	40(%rsp), %r12
	movq	48(%rsp), %r13
	movq	56(%rsp), %r14
	movq	64(%rsp), %r15
	addq	$72, %rsp
	ret
	.p2align 4,,7
.L201:
	movq	%rbx, %rdi
	call	PySequence_Check@PLT
	testl	%eax, %eax
	jne	.L142
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC11(%rip), %rsi
	xorl	%ebx, %ebx
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	jmp	.L141
.L142:
	movq	%rbx, %rdi
	call	PySequence_Size@PLT
	cmpq	$-1, %rax
	movq	%rax, %rbp
	.p2align 4,,2
	je	.L144
	testq	%rax, %rax
	je	.L200
	movq	%rbx, %rdi
	call	PyObject_GetIter@PLT
	testq	%rax, %rax
	movq	%rax, %r14
	jne	.L202
.L144:
	xorl	%ebx, %ebx
	jmp	.L141
.L202:
	.p2align 4,,5
	call	PyErr_Occurred@PLT
	testq	%rax, %rax
	.p2align 4,,4
	jne	.L144
	movq	8(%r14), %rax
	cmpb	$0, 168(%rax)
	jns	.L144
	xorl	%r15d, %r15d
	cmpq	$0, 224(%rax)
	movq	$-1, 8(%rsp)
	movq	$0, 16(%rsp)
	je	.L144
.L152:
	movq	%r14, %rdi
	call	PyIter_Next@PLT
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L203
	cmpq	$-1, 8(%rsp)
	je	.L204
.L154:
	movq	8(%rbx), %rax
	movq	168(%rax), %rax
	testl	$67108864, %eax
	je	.L166
	movq	16(%rbx), %rsi
	cmpq	8(%rsp), %rsi
	jne	.L181
	xorl	%ecx, %ecx
	cmpq	$0, 8(%rsp)
	jle	.L171
.L172:
	movq	24(%rbx,%rcx,8), %rax
	movq	24(%r15,%rcx,8), %rdx
	addq	$1, %rcx
	movq	16(%rsp), %rdi
	addq	$1, (%rax)
	cmpq	%rsi, %rcx
	movq	%rax, 24(%rdx,%rdi,8)
	jne	.L172
.L171:
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	jne	.L186
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	call	*48(%rax)
.L186:
	addq	$1, 16(%rsp)
	jmp	.L152
.L203:
	movq	(%r14), %rax
	movq	%r15, %rbx
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%r14)
	jne	.L141
	movq	8(%r14), %rax
	movq	%r14, %rdi
	call	*48(%rax)
	jmp	.L141
.L181:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC13(%rip), %rsi
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
.L158:
	testq	%r15, %r15
	je	.L160
.L164:
	movq	(%r15), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%r15)
	jne	.L160
	movq	8(%r15), %rax
	movq	%r15, %rdi
	call	*48(%rax)
.L160:
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	jne	.L192
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	call	*48(%rax)
.L192:
	movq	(%r14), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%r14)
	jne	.L144
	movq	8(%r14), %rax
	movq	%r14, %rdi
	xorl	%ebx, %ebx
	call	*48(%rax)
	jmp	.L141
.L166:
	testl	$33554432, %eax
	.p2align 4,,3
	je	.L173
	movq	16(%rbx), %rsi
	cmpq	8(%rsp), %rsi
	.p2align 4,,4
	jne	.L181
	cmpq	$0, 8(%rsp)
	jle	.L171
	movq	24(%rbx), %rdi
	xorl	%ecx, %ecx
.L178:
	movq	(%rdi,%rcx,8), %rax
	movq	24(%r15,%rcx,8), %rdx
	addq	$1, %rcx
	movq	16(%rsp), %r8
	addq	$1, (%rax)
	cmpq	%rsi, %rcx
	movq	%rax, 24(%rdx,%r8,8)
	jne	.L178
	jmp	.L171
.L204:
	movq	%rbx, %rdi
	call	PySequence_Check@PLT
	testl	%eax, %eax
	.p2align 4,,4
	je	.L179
	movq	%rbx, %rdi
	call	PySequence_Size@PLT
	cmpq	$-1, %rax
	movq	%rax, 8(%rsp)
	je	.L158
	movq	%rax, %rdi
	call	PyTuple_New@PLT
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L160
	cmpq	$0, 8(%rsp)
	jle	.L154
	xorl	%r12d, %r12d
.L163:
	movq	%rbp, %rdi
	call	PyTuple_New@PLT
	testq	%rax, %rax
	je	.L164
	movq	%rax, 24(%r15,%r12,8)
	addq	$1, %r12
	cmpq	8(%rsp), %r12
	jne	.L163
	jmp	.L154
.L173:
	movq	%rbx, %rdi
	call	PySequence_Check@PLT
	testl	%eax, %eax
	.p2align 4,,4
	je	.L179
	movq	%rbx, %rdi
	call	PySequence_Size@PLT
	cmpq	8(%rsp), %rax
	movq	%rax, %r12
	jne	.L181
	xorl	%esi, %esi
	xorl	%r13d, %r13d
	testq	%rax, %rax
	jle	.L171
.L184:
	movq	%rbx, %rdi
	call	PySequence_GetItem@PLT
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L158
	movq	24(%r15,%r13,8), %rax
	movq	16(%rsp), %rcx
	addq	$1, %r13
	cmpq	%r12, %r13
	movq	%r13, %rsi
	movq	%rdx, 24(%rax,%rcx,8)
	jne	.L184
	jmp	.L171
.L179:
	movq	PyExc_TypeError@GOTPCREL(%rip), %rax
	leaq	.LC12(%rip), %rsi
	movq	(%rax), %rdi
	call	PyErr_SetString@PLT
	jmp	.L158
.LFE90:
	.size	transpose, .-transpose
	.section	.rodata.str1.1
.LC14:
	.string	"C utility functions"
.LC15:
	.string	"cutils"
.LC16:
	.string	"numpy.core.multiarray"
.LC17:
	.string	"_ARRAY_API"
	.section	.rodata.str1.8
	.align 8
.LC18:
	.string	"module compiled against ABI version %x but this version of numpy is %x"
	.align 8
.LC19:
	.string	"module compiled against API version %x but this version of numpy is %x"
	.align 8
.LC20:
	.string	"FATAL: module compiled as unknown endian"
	.align 8
.LC21:
	.string	"FATAL: module compiled as little endian, but detected different endianness at runtime"
	.align 8
.LC22:
	.string	"numpy.core.multiarray failed to import"
	.section	.rodata.str1.1
.LC23:
	.string	"random"
	.text
	.p2align 4,,15
.globl initcutils
	.type	initcutils, @function
initcutils:
.LFB95:
	pushq	%rbp
.LCFI25:
	leaq	.LC14(%rip), %rdx
	leaq	module_methods(%rip), %rsi
	leaq	.LC15(%rip), %rdi
	xorl	%ecx, %ecx
	movl	$1013, %r8d
	pushq	%rbx
.LCFI26:
	subq	$8, %rsp
.LCFI27:
	call	Py_InitModule4_64@PLT
	leaq	.LC16(%rip), %rdi
	call	PyImport_ImportModule@PLT
	testq	%rax, %rax
	movq	%rax, %rbp
	je	.L206
	leaq	.LC17(%rip), %rsi
	movq	%rax, %rdi
	call	PyObject_GetAttrString@PLT
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L228
	movq	PyCObject_Type@GOTPCREL(%rip), %rax
	cmpq	%rax, 8(%rbx)
	je	.L229
.L211:
	movq	(%rbx), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L230
.L213:
	movq	(%rbp), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbp)
	je	.L231
	movq	PyArray_API(%rip), %rax
	testq	%rax, %rax
	je	.L206
.L232:
	call	*(%rax)
	cmpl	$16777225, %eax
	.p2align 4,,2
	je	.L218
	movq	PyArray_API(%rip), %rax
	.p2align 4,,4
	call	*(%rax)
	movl	%eax, %ecx
	movq	PyExc_RuntimeError@GOTPCREL(%rip), %rax
	leaq	.LC18(%rip), %rsi
	movl	$16777225, %edx
	movq	(%rax), %rdi
	xorl	%eax, %eax
	call	PyErr_Format@PLT
	.p2align 4,,7
.L206:
	call	PyErr_Print@PLT
	movq	PyExc_ImportError@GOTPCREL(%rip), %rax
	leaq	.LC22(%rip), %rsi
	movq	(%rax), %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	PyErr_SetString@PLT
	.p2align 4,,7
.L231:
	movq	8(%rbp), %rax
	movq	%rbp, %rdi
	call	*48(%rax)
	movq	PyArray_API(%rip), %rax
	testq	%rax, %rax
	jne	.L232
	jmp	.L206
	.p2align 4,,7
.L230:
	movq	8(%rbx), %rax
	movq	%rbx, %rdi
	call	*48(%rax)
	.p2align 4,,7
	jmp	.L213
	.p2align 4,,7
.L228:
	movq	(%rbp), %rax
	subq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%rbp)
	jne	.L206
	movq	8(%rbp), %rax
	movq	%rbp, %rdi
	call	*48(%rax)
	jmp	.L206
	.p2align 4,,7
.L218:
	movq	PyArray_API(%rip), %rax
	call	*1688(%rax)
	cmpl	$3, %eax
	ja	.L220
	movq	PyArray_API(%rip), %rax
	call	*1688(%rax)
	movl	%eax, %ecx
	movq	PyExc_RuntimeError@GOTPCREL(%rip), %rax
	leaq	.LC19(%rip), %rsi
	movl	$4, %edx
	movq	(%rax), %rdi
	xorl	%eax, %eax
	call	PyErr_Format@PLT
	jmp	.L206
.L220:
	movq	PyArray_API(%rip), %rax
	call	*1680(%rax)
	testl	%eax, %eax
	je	.L233
	subl	$1, %eax
	je	.L224
	movq	PyExc_RuntimeError@GOTPCREL(%rip), %rax
	leaq	.LC21(%rip), %rsi
	movq	(%rax), %rdi
	xorl	%eax, %eax
	call	PyErr_Format@PLT
	jmp	.L206
.L229:
	movq	%rbx, %rdi
	call	PyCObject_AsVoidPtr@PLT
	movq	%rax, PyArray_API(%rip)
	jmp	.L211
.L233:
	movq	PyExc_RuntimeError@GOTPCREL(%rip), %rax
	leaq	.LC20(%rip), %rsi
	movq	(%rax), %rdi
	xorl	%eax, %eax
	call	PyErr_Format@PLT
	jmp	.L206
.L224:
	call	PyEval_GetGlobals@PLT
	leaq	.LC23(%rip), %rdi
	xorl	%edx, %edx
	movq	%rax, %rsi
	movl	$-1, %r8d
	xorl	%ecx, %ecx
	call	PyImport_ImportModuleLevel@PLT
	movq	random_module@GOTPCREL(%rip), %rdx
	movq	%rax, (%rdx)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	ret
.LFE95:
	.size	initcutils, .-initcutils
	.section	.rodata.str1.1
.LC24:
	.string	"transpose"
.LC25:
	.string	"Transposes nested sequence"
.LC26:
	.string	"darray"
	.section	.rodata.str1.8
	.align 8
.LC27:
	.string	"Constructor for numpy arrays, with min/max dim support."
	.section	.rodata.str1.1
.LC28:
	.string	"random_bits"
	.section	.rodata.str1.8
	.align 8
.LC29:
	.string	"Generates an numpy array with uint64 values, containing n randomly set bits."
	.section	.rodata.str1.1
.LC30:
	.string	"bit_count"
	.section	.rodata.str1.8
	.align 8
.LC31:
	.string	"Count bits for reach element in a 64-bit unsigned integer  numpy array."
	.section	.rodata.str1.1
.LC32:
	.string	"bitor_reduceat"
	.section	.rodata.str1.8
	.align 8
.LC33:
	.string	"Reduceats an 64 uint numpy array based on index."
	.section	.data.rel.local,"aw",@progbits
	.align 32
	.type	module_methods, @object
	.size	module_methods, 192
module_methods:
	.quad	.LC24
	.quad	transpose
	.long	8
	.zero	4
	.quad	.LC25
	.quad	.LC26
	.quad	numpy_dimarray
	.long	1
	.zero	4
	.quad	.LC27
	.quad	.LC28
	.quad	random_bits
	.long	8
	.zero	4
	.quad	.LC29
	.quad	.LC30
	.quad	bit_count
	.long	8
	.zero	4
	.quad	.LC31
	.quad	.LC32
	.quad	bitor_reduceat
	.long	1
	.zero	4
	.quad	.LC33
	.quad	0
	.zero	24
	.local	PyArray_API
	.comm	PyArray_API,8,8
	.comm	random_module,8,8
	.section	.eh_frame,"a",@progbits
.Lframe1:
	.long	.LECIE1-.LSCIE1
.LSCIE1:
	.long	0x0
	.byte	0x1
	.string	"zR"
	.uleb128 0x1
	.sleb128 -8
	.byte	0x10
	.uleb128 0x1
	.byte	0x1b
	.byte	0xc
	.uleb128 0x7
	.uleb128 0x8
	.byte	0x90
	.uleb128 0x1
	.align 8
.LECIE1:
.LSFDE1:
	.long	.LEFDE1-.LASFDE1
.LASFDE1:
	.long	.LASFDE1-.Lframe1
	.long	.LFB91-.
	.long	.LFE91-.LFB91
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI0-.LFB91
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE1:
.LSFDE3:
	.long	.LEFDE3-.LASFDE3
.LASFDE3:
	.long	.LASFDE3-.Lframe1
	.long	.LFB94-.
	.long	.LFE94-.LFB94
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI5-.LFB94
	.byte	0xe
	.uleb128 0x40
	.byte	0x8c
	.uleb128 0x2
	.byte	0x86
	.uleb128 0x3
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE3:
.LSFDE5:
	.long	.LEFDE5-.LASFDE5
.LASFDE5:
	.long	.LASFDE5-.Lframe1
	.long	.LFB93-.
	.long	.LFE93-.LFB93
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI7-.LFB93
	.byte	0x86
	.uleb128 0x4
	.byte	0x83
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI10-.LCFI7
	.byte	0xe
	.uleb128 0x40
	.byte	0x8d
	.uleb128 0x2
	.byte	0x8c
	.uleb128 0x3
	.align 8
.LEFDE5:
.LSFDE7:
	.long	.LEFDE7-.LASFDE7
.LASFDE7:
	.long	.LASFDE7-.Lframe1
	.long	.LFB92-.
	.long	.LFE92-.LFB92
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI14-.LFB92
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x6
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI17-.LCFI14
	.byte	0xe
	.uleb128 0x60
	.byte	0x8f
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE7:
.LSFDE9:
	.long	.LEFDE9-.LASFDE9
.LASFDE9:
	.long	.LASFDE9-.Lframe1
	.long	.LFB90-.
	.long	.LFE90-.LFB90
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI19-.LFB90
	.byte	0x86
	.uleb128 0x6
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI24-.LCFI19
	.byte	0xe
	.uleb128 0x50
	.byte	0x8f
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE9:
.LSFDE11:
	.long	.LEFDE11-.LASFDE11
.LASFDE11:
	.long	.LASFDE11-.Lframe1
	.long	.LFB95-.
	.long	.LFE95-.LFB95
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI25-.LFB95
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI26-.LCFI25
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI27-.LCFI26
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.align 8
.LEFDE11:
	.ident	"GCC: (GNU) 4.2.4 (Gentoo 4.2.4-r01.2 p1.1)"
	.section	.note.GNU-stack,"",@progbits
