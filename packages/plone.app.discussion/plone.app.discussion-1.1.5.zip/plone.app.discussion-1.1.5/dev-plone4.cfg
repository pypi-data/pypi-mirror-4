[buildout]
extends = test-plone-4.0.x.cfg

extensions = mr.developer buildout.dumppickedversions buildout.eggtractor
unzip = true
parts =
    instance
    zopepy
    omelette
    ipzope
    releaser
    sphinxbuilder

dump-picked-versions-file = versions.plone4.cfg
overwrite-picked-versions-file = True

tractor-src-directory = src

# Add additional eggs here
eggs +=
    plone.app.discussion
    Sphinx
    Sphinx-PyPI-upload
    repoze.sphinx.autointerface
    plone.formwidget.captcha
    plone.formwidget.recaptcha
    collective.akismet 
    collective.autoresizetextarea
    Products.PdbDebugMode
    Products.PrintingMailHost
    plone.reload

develop =
    .

auto-checkout =
    Products.PloneTestCase
    plone.formwidget.captcha
    plone.formwidget.recaptcha
    collective.akismet
    collective.autoresizetextarea
    collective.z3cform.norobots
    plone.app.registry
    plone.app.z3cform
    plone.z3cform
    z3c.form

[versions]
zope.schema = 3.6.0
Sphinx = 0.6.6
collective.recipe.sphinxbuilder = 0.6.3.3
Products.TinyMCE = 1.1.1

[instance]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
#debug-mode = on
#verbose-security = on
blob-storage = var/blobstorage
# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs =
    Zope2
    Plone
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =
    collective.akismet
    collective.autoresizetextarea
    plone.formwidget.captcha
    plone.formwidget.recaptcha


[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy


[ipzope]
recipe = zc.recipe.egg
eggs =
    ipython
    ${instance:eggs}
initialization =
    import sys, os
    os.environ["SOFTWARE_HOME"] = "${instance:location}/lib/python"
    os.environ["INSTANCE_HOME"] = "${instance:location}"
    sys.argv[1:1] = "-p zope".split()
extra-paths = ${instance:location}/lib/python
scripts = ipython=ipzope


[releaser]
recipe = zc.recipe.egg
eggs = jarn.mkrelease


[sphinxbuilder]
recipe = collective.recipe.sphinxbuilder
interpreter = ${buildout:directory}/bin/zopepy

[sphinxupload]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    bin/zopepy setup.py upload_sphinx
output = ${buildout:directory}/bin/sphinxupload
mode = 755

[sources]
Products.PloneTestCase = svn http://svn.plone.org/svn/collective/Products.PloneTestCase/trunk/
plone.formwidget.captcha = svn https://svn.plone.org/svn/plone/plone.formwidget.captcha/trunk
plone.formwidget.recaptcha = svn https://svn.plone.org/svn/plone/plone.formwidget.recaptcha/trunk
collective.akismet = svn https://svn.plone.org/svn/collective/collective.akismet/trunk
collective.autoresizetextarea = svn https://svn.plone.org/svn/collective/collective.autoresizetextarea/trunk
collective.z3cform.norobots = svn https://svn.plone.org/svn/collective/collective.z3cform.norobots/branches/p4-discussion-captchaplugin/
plone.app.registry = svn http://svn.plone.org/svn/plone/plone.app.registry/trunk
plone.app.z3cform = svn http://svn.plone.org/svn/plone/plone.app.z3cform/trunk
plone.z3cform = svn http://svn.zope.org/repos/main/plone.z3cform/trunk/
z3c.form = svn http://svn.zope.org/repos/main/z3c.form/trunk
