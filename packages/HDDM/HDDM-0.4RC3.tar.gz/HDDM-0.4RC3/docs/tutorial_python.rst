.. index:: Tutorial
.. _chap_tutorial_python:


****************************
Specifiying Models in Python
****************************

As an alternative to the configuration file, HDDM offers model
specification directly from Python. For this, you first import hddm:

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 1

Next, we have to load the data into Python. HDDM expects a NumPy
structured array which you can either create yourself or load it from
a csv file. Information on how to create a proper structured NumPy
array can be found here. If you want to load a csv file make sure it
is in the proper format outlined above. You can then load the data as follows:

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 4

After you loaded the data you can create the model object which is called Multi because it allows you to dynamically create multiple HDDM models depending on your data. In the simplest case, you'll want to create a simple DDM (default):

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 7

You may then sample from the posterior distribution by calling:

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 10

Depending on the model and amount of data this can take some time. After enough samples were generated, you may want to print some statistics on the screen:

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 13

You can currently generate two plots to examine model fit. If you want to see if your chains converged and what the posteriors for each parameter look like you can call:

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 16

To see how well the RT distributions are fit by the mean of the posterior distribution we can plot the theoretical RT distribution on top of our empirical RT distribution by calling:

.. literalinclude :: ../hddm/examples/simple_model.py
   :lines: 17

The closer the two distributions look like, the better the fit. Note
that the RT distribution for the second response is mirrored on the
y-axis.

The final program then looks as follows:

.. literalinclude :: ../hddm/examples/simple_model.py

More complex models can be generated by specifiying different
paramters during model creation. Say we wanted to create a model where
each subject receives its own set of parameters which are themselves
sampled from a group parameter distribution. Morever, as in the
example above, we have two trial types in our data, easy and
hard. Based on previous research, we assume that difficulty affects
drift-rate 'v'. Thus, we want to fit different drift rate parameters
for those two conditions while keeping the other parameters fixed
across conditions. Finally, we want to use the full DDM with
inter-trial variability for drift, non-decision time ter and starting
point z. The full model requires integration of these variability
parameters and is hence much slower. The model creation and sampling
then might look like this (assuming we imported hddm and loaded the
data as above):

>>> model = hddm.HDDM(data, include=('V','Z','T'), bias=True, depends_on={'v':'difficulty'})
>>> model.sample(10000, burn=5000)
