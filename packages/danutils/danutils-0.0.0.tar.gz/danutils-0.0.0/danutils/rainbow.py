rainbowColors = [
    [ 1.00, 0.00, 0.00 ],
    [ 0.00, 1.00, 0.00 ],
    [ 0.00, 0.00, 1.00 ],
    [ 1.00, 1.00, 0.00 ],
    [ 0.00, 1.00, 1.00 ],
    [ 1.00, 0.00, 1.00 ],
    [ 1.00, 1.00, 0.50 ],
    [ 1.00, 0.50, 1.00 ],
    [ 1.00, 0.50, 0.50 ],
    [ 0.50, 1.00, 1.00 ],
    [ 0.50, 1.00, 0.50 ],
    [ 0.50, 0.50, 1.00 ],
    [ 0.50, 0.50, 0.50 ],
    [ 1.00, 1.00, 0.75 ],
    [ 1.00, 0.50, 0.75 ],
    [ 1.00, 0.75, 1.00 ],
    [ 1.00, 0.75, 0.50 ],
    [ 1.00, 0.75, 0.75 ],
    [ 0.50, 1.00, 0.75 ],
    [ 0.50, 0.50, 0.75 ],
    [ 0.50, 0.75, 1.00 ],
    [ 0.50, 0.75, 0.50 ],
    [ 0.50, 0.75, 0.75 ],
    [ 0.75, 1.00, 1.00 ],
    [ 0.75, 1.00, 0.50 ],
    [ 0.75, 1.00, 0.75 ],
    [ 0.75, 0.50, 1.00 ],
    [ 0.75, 0.50, 0.50 ],
    [ 0.75, 0.50, 0.75 ],
    [ 0.75, 0.75, 1.00 ],
    [ 0.75, 0.75, 0.50 ],
    [ 0.75, 0.75, 0.75 ],
    [ 1.00, 1.00, 0.62 ],
    [ 1.00, 0.50, 0.62 ],
    [ 1.00, 0.75, 0.62 ],
    [ 1.00, 0.62, 1.00 ],
    [ 1.00, 0.62, 0.50 ],
    [ 1.00, 0.62, 0.75 ],
    [ 1.00, 0.62, 0.62 ],
    [ 0.50, 1.00, 0.62 ],
    [ 0.50, 0.50, 0.62 ],
    [ 0.50, 0.75, 0.62 ],
    [ 0.50, 0.62, 1.00 ],
    [ 0.50, 0.62, 0.50 ],
    [ 0.50, 0.62, 0.75 ],
    [ 0.50, 0.62, 0.62 ],
    [ 0.75, 1.00, 0.62 ],
    [ 0.75, 0.50, 0.62 ],
    [ 0.75, 0.75, 0.62 ],
    [ 0.75, 0.62, 1.00 ],
    [ 0.75, 0.62, 0.50 ],
    [ 0.75, 0.62, 0.75 ],
    [ 0.75, 0.62, 0.62 ],
    [ 0.62, 1.00, 1.00 ],
    [ 0.62, 1.00, 0.50 ],
    [ 0.62, 1.00, 0.75 ],
    [ 0.62, 1.00, 0.62 ],
    [ 0.62, 0.50, 1.00 ],
    [ 0.62, 0.50, 0.50 ],
    [ 0.62, 0.50, 0.75 ],
    [ 0.62, 0.50, 0.62 ],
    [ 0.62, 0.75, 1.00 ],
    [ 0.62, 0.75, 0.50 ],
    [ 0.62, 0.75, 0.75 ],
    [ 0.62, 0.75, 0.62 ],
    [ 0.62, 0.62, 1.00 ],
    [ 0.62, 0.62, 0.50 ],
    [ 0.62, 0.62, 0.75 ],
    [ 0.62, 0.62, 0.62 ],
]

def numColors():
    """Number of distinct colors getColor can produce."""
    return len(rainbowColors)

def getColor(i):
    """Generate a color from a chain of distinct colors.
    
    Returns an array of values [r,g,b] between 0 and 1 such that getColor(i) and
    getColor(i+1) are visually distinct from each other. Note that this function
    is deterministic, i.e. getColor(i) will always return the same color given
    the same i, and that there are only numColors() available colors, so 
    getColor(i) = getColor(i%numColors()).
    
    """
    return rainbowColors[i%len(rainbowColors)]

def getColorA(i):
    """Wraps getColor, returning a numpy.ndarray"""
    import numpy
    return numpy.array(getColor(i))