This is CMCpy.info, produced by makeinfo version 4.13 from CMCpy.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* CMCpy: (CMCpy.info). One line description of project.
END-INFO-DIR-ENTRY

     CMCpy 0.1, December 21, 2012

     David H. Ardell, Peter Becich and Brian Stark

     Copyright (C) 2012, David H. Ardell, Peter Becich and Brian Stark


File: CMCpy.info,  Node: Top,  Next: cmcpy Package,  Up: (dir)

CMCpy Documentation
*******************

     CMCpy 0.1, December 21, 2012

     David H. Ardell, Peter Becich and Brian Stark

     Copyright (C) 2012, David H. Ardell, Peter Becich and Brian Stark

  Contents:

* Menu:

* cmcpy Package::
* CMCpy: CMCpy -- Code-Message Coevolution Models in Python. Code-Message Coevolution Models in Python
* Dependencies::
* Installation::
* Usage::
* Documentation::
* Licensing and Attribution::
* Release Notes::
* References::
* Indices and tables::
* Python Module Index::
* Index::

 --- The Detailed Node Listing ---

cmcpy Package

* cmcpy Package: cmcpy Package<2>.
* __main__ Module::
* amino_acid_spaces Module::
* codon_spaces Module::
* evolvers Module::
* genetic_codes Module::
* misreading Module::
* observables Module::
* site_type_spaces Module::

evolvers Module

* evolvers: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers. cmcpy module for abstract base class of Ardell Sella
                        Evolvers


File: CMCpy.info,  Node: cmcpy Package,  Next: CMCpy -- Code-Message Coevolution Models in Python,  Prev: Top,  Up: Top

1 cmcpy Package
***************

* Menu:

* cmcpy Package: cmcpy Package<2>.
* __main__ Module::
* amino_acid_spaces Module::
* codon_spaces Module::
* evolvers Module::
* genetic_codes Module::
* misreading Module::
* observables Module::
* site_type_spaces Module::


File: CMCpy.info,  Node: cmcpy Package<2>,  Next: __main__ Module,  Up: cmcpy Package

1.1 `cmcpy' Package
===================


File: CMCpy.info,  Node: __main__ Module,  Next: amino_acid_spaces Module,  Prev: cmcpy Package<2>,  Up: cmcpy Package

1.2 `__main__' Module
=====================


File: CMCpy.info,  Node: amino_acid_spaces Module,  Next: codon_spaces Module,  Prev: __main__ Module,  Up: cmcpy Package

1.3 `amino_acid_spaces' Module
==============================

 -- Class: amino_acid_spaces.RegionAminoAcidSpace (num_aas=None,
          coords=None, num_dims=1, seed=42, labels=None)
     Bases: `amino_acid_spaces._AminoAcidSpace'

     Region amino acid spaces model amino acid (dis)similarities in
     bounded regions of a finite number of dimensions.

         >>> aa = RegionAminoAcidSpace(num_aas = 5,num_dims = 2)
         >>> map(lambda x:x.round(2),aa.coords)
         [array([[ 0.16,  0.71]]), array([[ 0.37,  0.16]]), array([[ 0.6,  0.6]]), array([[ 0.73,  0.87]]), array([[ 0.95,  0.06]])]
         >>> dm =  aa.get_distance_matrix()
         >>> dm.round(3)
         array([[ 0.   ,  0.594,  0.455,  0.597,  1.027],
                [ 0.594,  0.   ,  0.498,  0.795,  0.584],
                [ 0.455,  0.498,  0.   ,  0.297,  0.647],
                [ 0.597,  0.795,  0.297,  0.   ,  0.837],
                [ 1.027,  0.584,  0.647,  0.837,  0.   ]])



 -- Class: amino_acid_spaces.RingAminoAcidSpace (num_aas=None, seed=42,
          coords=None, labels=None)
     Bases: `amino_acid_spaces._AminoAcidSpace'

     Ring amino acid spaces model amino acid (dis)similarities in a
     one-dimensional circular physicochemical amino acid space

         >>> aa = RingAminoAcidSpace(num_aas = 5)
         >>> map(lambda x: x.round(3),aa.coords)
         [array([[ 0.156]]), array([[ 0.375]]), array([[ 0.599]]), array([[ 0.732]]), array([[ 0.951]])]
         >>> dm = aa.get_distance_matrix()
         >>> dm.round(3)
         array([[ 0.   ,  0.219,  0.443,  0.424,  0.205],
                [ 0.219,  0.   ,  0.224,  0.357,  0.424],
                [ 0.443,  0.224,  0.   ,  0.133,  0.352],
                [ 0.424,  0.357,  0.133,  0.   ,  0.219],
                [ 0.205,  0.424,  0.352,  0.219,  0.   ]])




File: CMCpy.info,  Node: codon_spaces Module,  Next: evolvers Module,  Prev: amino_acid_spaces Module,  Up: cmcpy Package

1.4 `codon_spaces' Module
=========================

 -- Class: codon_spaces.RingCodonSpace (num_codons, mu)
     Bases: `codon_spaces._CodonSpace'

     Ring codon spaces are wrapped linear mutation spaces where codons
     mutate only to their two immediate neighbors.  For ring codon
     models, mu defines the probability of change to one of two codon
     neighbors.  The probability of no change is [1 - (2*mu)]

         >>> codons = RingCodonSpace(num_codons = 5,mu = 0.1)
         >>> mm = codons.get_mutation_matrix()
         >>> mm.round(3)
         array([[ 0.8,  0.1,  0. ,  0. ,  0.1],
                [ 0.1,  0.8,  0.1,  0. ,  0. ],
                [ 0. ,  0.1,  0.8,  0.1,  0. ],
                [ 0. ,  0. ,  0.1,  0.8,  0.1],
                [ 0.1,  0. ,  0. ,  0.1,  0.8]])

     
      -- Method: get_derivative_matrix ()

      -- Method: get_mutation_eigensystem ()

      -- Method: post_process_perturbative_solution (lhtopy, vhtopy)

 -- Class: codon_spaces.WordCodonSpace (num_bases, num_positions, mu,
          kappa=1.0)
     Bases: `codon_spaces._CodonSpace'

     Word codon spaces model natural codons with a finite number of
     bases and a finite word-length.

     For word codon models, mu defines the total probability of change
     of a base to any neighbor.  The probability of no change of a
     single base is defined as (1 - mu).

     If kappa is not equal to 1.0, then num_bases must be even.

         >>> codons = WordCodonSpace(num_bases = 2,num_positions = 2, mu = 0.1)
         >>> mm = codons.get_mutation_matrix()
         >>> mm.round(3)
         array([[ 0.81,  0.09,  0.09,  0.01],
                [ 0.09,  0.81,  0.01,  0.09],
                [ 0.09,  0.01,  0.81,  0.09],
                [ 0.01,  0.09,  0.09,  0.81]])
         >>> codons = WordCodonSpace(num_bases = 4,num_positions = 2, mu = 0.2,kappa = 2)
         >>> mm = codons.get_mutation_matrix()
         >>> mm.round(3)
         array([[ 0.64 ,  0.08 ,  0.04 ,  0.04 ,  0.08 ,  0.01 ,  0.005,  0.005,
                  0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003],
                [ 0.08 ,  0.64 ,  0.04 ,  0.04 ,  0.01 ,  0.08 ,  0.005,  0.005,
                  0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003],
                [ 0.04 ,  0.04 ,  0.64 ,  0.08 ,  0.005,  0.005,  0.08 ,  0.01 ,
                  0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005],
                [ 0.04 ,  0.04 ,  0.08 ,  0.64 ,  0.005,  0.005,  0.01 ,  0.08 ,
                  0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ],
                [ 0.08 ,  0.01 ,  0.005,  0.005,  0.64 ,  0.08 ,  0.04 ,  0.04 ,
                  0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003],
                [ 0.01 ,  0.08 ,  0.005,  0.005,  0.08 ,  0.64 ,  0.04 ,  0.04 ,
                  0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003],
                [ 0.005,  0.005,  0.08 ,  0.01 ,  0.04 ,  0.04 ,  0.64 ,  0.08 ,
                  0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005],
                [ 0.005,  0.005,  0.01 ,  0.08 ,  0.04 ,  0.04 ,  0.08 ,  0.64 ,
                  0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ],
                [ 0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003,
                  0.64 ,  0.08 ,  0.04 ,  0.04 ,  0.08 ,  0.01 ,  0.005,  0.005],
                [ 0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003,
                  0.08 ,  0.64 ,  0.04 ,  0.04 ,  0.01 ,  0.08 ,  0.005,  0.005],
                [ 0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005,
                  0.04 ,  0.04 ,  0.64 ,  0.08 ,  0.005,  0.005,  0.08 ,  0.01 ],
                [ 0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ,
                  0.04 ,  0.04 ,  0.08 ,  0.64 ,  0.005,  0.005,  0.01 ,  0.08 ],
                [ 0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003,
                  0.08 ,  0.01 ,  0.005,  0.005,  0.64 ,  0.08 ,  0.04 ,  0.04 ],
                [ 0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003,
                  0.01 ,  0.08 ,  0.005,  0.005,  0.08 ,  0.64 ,  0.04 ,  0.04 ],
                [ 0.003,  0.003,  0.04 ,  0.005,  0.003,  0.003,  0.04 ,  0.005,
                  0.005,  0.005,  0.08 ,  0.01 ,  0.04 ,  0.04 ,  0.64 ,  0.08 ],
                [ 0.003,  0.003,  0.005,  0.04 ,  0.003,  0.003,  0.005,  0.04 ,
                  0.005,  0.005,  0.01 ,  0.08 ,  0.04 ,  0.04 ,  0.08 ,  0.64 ]])

     
      -- Method: get_base_mutation_matrix ()
          Returns the mutation matrix of bases in one site.

      -- Method: get_derivative_matrix ()
          This function exists to serve the perturbative solution draft
          in evolvers.py

      -- Method: get_mutation_eigensystem ()

      -- Method: post_process_perturbative_solution (lpert, vpert)


File: CMCpy.info,  Node: evolvers Module,  Next: genetic_codes Module,  Prev: codon_spaces Module,  Up: cmcpy Package

1.5 `evolvers' Module
=====================

* Menu:

* evolvers: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers. cmcpy module for abstract base class of Ardell Sella
                        Evolvers


File: CMCpy.info,  Node: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers,  Up: evolvers Module

1.5.1 evolvers - cmcpy module for abstract base class of Ardell Sella Evolvers
------------------------------------------------------------------------------

 -- Class: evolvers.ArdellSellaEvolverAbstractBase (initial_code,
          site_types, delta, epsilon, observables)
     Bases: `object'

     Abstract Base Class for ArdellSellaEvolvers for Code-Message
     Coevolution corresponding to models published in Ardell and Sella
     (2001, 2002) and Sella and Ardell (2002, 2006).  Concrete
     Implementations subclass from this for different implementations
     of Eigenvalue solutions.

      -- Method: compute_code_fitness_given_messages
               (equilibrated_messages, effective_code_matrix)
          Implement eg eqns. 2-7 from Sella and Ardell(2006)

      -- Method: compute_max_fitness_code_mutation ()

      -- Method: equilibrate_messages ()
          Compute eigensystems in site-types for an established genetic
          code.

          This finds eigensystems (codon frequencies and growth rates)
          for different site-types given the genetic code.

          Abstract method: subclasses must:

          1) store their results by setting self.eigenvalues and
          self.eigenmatrix

            2. set self.equilibrated to True

          3) call super(<<SubClass>>, self).equilibrate_messages() to
          print observables at end of subclass method where
          <<SubClass>> is the subclass name to print observables.

      -- Method: evolve_code_unless_frozen ()
          Mutate genetic code.

          Unless genetic code is frozen, mutate it according to the
          Ardell and Sella models, and update code to most fit mutant
          if it exists. If no more fit mutant code exists, set the
          "frozen" attribute to True.

      -- Method: evolve_one_step ()
          Mutate genetic code and equilibrate messages.

          Unless genetic code is frozen, mutate it according to the
          Ardell and Sella models, update code to most fit mutant if it
          exists, and equilibrate messages to the new mutant genetic
          code. If no more fit mutant code exists, set the "frozen"
          attribute to True.

      -- Method: evolve_until_frozen ()
          Iteratively evlove genetic code and messages.

          Until genetic code is frozen, mutate it according to the
          Ardell and Sella models, update code to most fit mutant if it
          exists, and equilibrate messages to the new mutant genetic
          code. Once no more fit mutant code exists, set the "frozen"
          attribute to True.

      -- Method: get_eigenvalue (msm, eigenvec)

      -- Method: get_mutation_selection_matrix (alpha)

      -- Method: get_selection_matrix (alpha)

      -- Method: growth_rate ()

      -- Method: growth_rate_from_lambda ()

      -- Method: initial_equilibrate_messages ()
          Compute eigensystems in site-types for an established genetic
          code.

          This finds eigensystems (codon frequencies and growth rates)
          for different site-types given the genetic code.

      -- Method: messages ()

      -- Method: print_initial_observables ()

      -- Method: print_observables ()

      -- Method: print_observables_header ()

 -- Class: evolvers.ArdellSellaEvolverHomotopy (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12, num_iterations=1000)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1e.

      -- Method: compute_eigensystem (alpha, max_time=60,
               numpy_type=<type 'numpy.float64'>)

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverNumpy (initial_code, site_types,
          num_processes, observables, delta=1e-32, epsilon=1e-12,
          num_iterations=1000)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1e.

      -- Method: compute_eigensystem (alpha, max_time=60,
               numpy_type=<type 'numpy.float64'>)

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverNumpyMulticore (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12, num_iterations=1000)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1e.

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverNumpyProcessChild (in_queue,
          out_queue)
     Bases: `multiprocessing.process.Process'

     Finds the eigensystem (message equilibrium and growth rate) for an
     established genetic code

      -- Method: run ()

 -- Class: evolvers.ArdellSellaEvolverPowerCUDA (initial_code,
          site_types, delta, num_processes, epsilon, observables,
          num_iterations=1000)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1e.

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverPowerMethod (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12, max_order=5)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1e.

      -- Method: compute_eigensystem (alpha, max_time=60,
               numpy_type=<type 'numpy.float64'>)

      -- Method: equilibrate_messages ()

 -- Class: evolvers.ArdellSellaEvolverPowerMethodProcessChild
          (in_queue, out_queue, num_codons, delta, max_time=60)
     Bases: `multiprocessing.process.Process'

     Finds the eigensystem (message equilibrium and growth rate) for an
     established genetic code

      -- Method: run ()

 -- Class: evolvers.ArdellSellaEvolverPowerMulticore (initial_code,
          site_types, num_processes, observables, delta=1e-32,
          epsilon=1e-12, num_iterations=1000)
     Bases: *note evolvers.ArdellSellaEvolverAbstractBase: 1e.

      -- Method: equilibrate_messages ()

      -- Attribute: in_queue

      -- Attribute: out_queue

 -- Class: evolvers.eigensystem_CUDA_implementation (parent,
          max_time=60, delta=1e-32)
      -- Method: calculate ()

      -- Method: done ()

      -- Method: error_check ()

      -- Method: get_eigenmatrix ()

      -- Method: get_eigenvalue (alpha)

      -- Method: get_eigenvalues ()


File: CMCpy.info,  Node: genetic_codes Module,  Next: misreading Module,  Prev: evolvers Module,  Up: cmcpy Package

1.6 `genetic_codes' Module
==========================

 -- Class: genetic_codes.GeneticCodeMutation (code, codon, aa)
      -- Method: get_effective_code_matrix ()

 -- Class: genetic_codes.InitiallyAmbiguousGeneticCode (codons,
          amino_acids, misreading=None)
     Bases: `genetic_codes._GeneticCode'

 -- Class: genetic_codes.UserInitializedGeneticCode (codons,
          amino_acids, code_matrix=None, code_dict=None,
          misreading=None)
     Bases: `genetic_codes._GeneticCode'

     User-Initialized Genetic Codes are initialized with a
     numpy.ndarray code matrix or a dict of codons mapping to indices
     (not labels) of amino acids

         >>> codons = codon_spaces.WordCodonSpace(num_bases = 4,num_positions = 2, mu = 0.2,kappa = 2)
         >>> aas    = amino_acid_spaces.RegionAminoAcidSpace(num_aas = 20, seed = 40)
         >>> cm = numpy.eye(16)
         >>> cm = numpy.hstack((cm,numpy.zeros((16,4))))
         >>> cm.shape
         (16, 20)
         >>> cm[0][1] = 1
         >>> cm /= cm.sum(axis = 1).reshape(16,1)
         >>> gc = UserInitializedGeneticCode(codons,aas,code_matrix = cm)
         >>> gc.num_codons
         16
         >>> gc.num_amino_acids
         20
         >>> gc.ambiguous_codons()
         set([0])
         >>> gc.encoded_aas
         set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
         >>> print gc
         |* b c d|
         |e f g h|
         |i j k l|
         |m n o p|
         >>> gc.as_labelled_dict()
         {0: '*', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j', 10: 'k', 11: 'l', 12: 'm', 13: 'n', 14: 'o', 15: 'p'}
         >>> gc.as_dict()
         {0: '*', 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15}
         >>> gc2 = UserInitializedGeneticCode(codons,aas,code_dict = {0: '*', 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15})
         >>> print gc2
         |* b c d|
         |e f g h|
         |i j k l|
         |m n o p|
         >>> print gc2.code_matrix[0]
         [ 0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05
           0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05]




File: CMCpy.info,  Node: misreading Module,  Next: observables Module,  Prev: genetic_codes Module,  Up: cmcpy Package

1.7 `misreading' Module
=======================

 -- Class: misreading.PositionalMisreading (codons, misreading)
     Bases: `misreading._Misreading'

     Positional misreading models misreading on word codon spaces which
     model natural codons with a finite number of bases and a finite
     word-length.

     For positional misreading, the misreading parameter is a list of
     positional misreading parameters mr_i which define the total
     misreading probability of a base at position i to any neighbor.
     The probability of no misreading of a single base at position i is
     defined as (1 - mr_i).

         >>> codons = codon_spaces.WordCodonSpace(num_bases = 2,num_positions = 2, mu = 0.1)
         >>> misreading = PositionalMisreading(codons,[0.1,0.01])
         >>> mr = misreading.get_misreading_matrix()
         >>> mr.round(3)
         array([[ 0.891,  0.099,  0.009,  0.001],
                [ 0.099,  0.891,  0.001,  0.009],
                [ 0.009,  0.001,  0.891,  0.099],
                [ 0.001,  0.009,  0.099,  0.891]])



 -- Class: misreading.RingMisreading (codons, misreading)
     Bases: `misreading._Misreading'

     Ring misreading is one-dimensional misreading uniform over all
     other codons.  For ring misreading, (mr/(nc - 1)) is the
     probability of misreading as a specific codon.  The probability of
     no misreading is (1 - (mr)).

     The misreading parameter is a list with one element, mr.

         >>> codons = codon_spaces.RingCodonSpace(num_codons = 5,mu = 0.1)
         >>> misreading = RingMisreading(codons,[0.1])
         >>> mr = misreading.get_misreading_matrix()
         >>> mr.round(3)
         array([[ 0.9  ,  0.025,  0.025,  0.025,  0.025],
                [ 0.025,  0.9  ,  0.025,  0.025,  0.025],
                [ 0.025,  0.025,  0.9  ,  0.025,  0.025],
                [ 0.025,  0.025,  0.025,  0.9  ,  0.025],
                [ 0.025,  0.025,  0.025,  0.025,  0.9  ]])




File: CMCpy.info,  Node: observables Module,  Next: site_type_spaces Module,  Prev: misreading Module,  Up: cmcpy Package

1.8 `observables' Module
========================

Control and select output from CMCpy simulations

 -- Class: observables.Observables (show_codes=True,
          show_messages=False, show_initial_parameters=True,
          show_matrix_parameters=False, show_fitness_statistics=False,
          show_code_evolution_statistics=False,
          show_frozen_results_only=False, print_precision=6,
          show_all=False)


File: CMCpy.info,  Node: site_type_spaces Module,  Prev: observables Module,  Up: cmcpy Package

1.9 `site_type_spaces' Module
=============================

Site-type fitness matrices are intended as site-types over rows and
amino acids over columns

 -- Class: site_type_spaces.MirroringSiteTypeSpace (amino_acids, phi,
          weights=None)
     This class models site-types in one-to-one correspondence with
     amino acids as according to the published models of Ardell and
     Sella.

         >>> aa = amino_acid_spaces.RingAminoAcidSpace(num_aas = 5)
         >>> dm = aa.get_distance_matrix()
         >>> dm.round(3)
         array([[ 0.   ,  0.219,  0.443,  0.424,  0.205],
                [ 0.219,  0.   ,  0.224,  0.357,  0.424],
                [ 0.443,  0.224,  0.   ,  0.133,  0.352],
                [ 0.424,  0.357,  0.133,  0.   ,  0.219],
                [ 0.205,  0.424,  0.352,  0.219,  0.   ]])
         >>> st = MirroringSiteTypeSpace(aa,phi = 0.96)
         >>> fm = st.get_fitness_matrix()
         >>> fm.round(3)
         array([[ 1.   ,  0.991,  0.982,  0.983,  0.992],
                [ 0.991,  1.   ,  0.991,  0.986,  0.983],
                [ 0.982,  0.991,  1.   ,  0.995,  0.986],
                [ 0.983,  0.986,  0.995,  1.   ,  0.991],
                [ 0.992,  0.983,  0.986,  0.991,  1.   ]])

     
      -- Method: get_fitness_matrix ()

      -- Method: get_site_type_weights ()


File: CMCpy.info,  Node: CMCpy -- Code-Message Coevolution Models in Python,  Next: Dependencies,  Prev: cmcpy Package,  Up: Top

2 CMCpy - Code-Message Coevolution Models in Python
***************************************************

CMCpy provides an object-oriented python API, together with command-line
interface executables, that implement "Code-Message Coevolution" models.
These published evolutionary models pertain to the evolution by natural
selection of a genetic code in coevolution with a population of
protein-coding genes.

  Formally, CMC models are sets of quasispecies coupled together for
their fitness through a genetic code. The system alternates between
quasispecies equilibration and adaptive hill-climbing through codon
assignments and reassignment by code mutation.

  CMCpy can reproduce the statistics and results of *note
[Ardell_and_Sella_2001]: 5a, *note [Sella_and_Ardell_2002]: 5b, *note
[Ardell_and_Sella_2002]: 5c. and *note [Sella_and_Ardell_2006]: 5d.
CMCpy additionally implements additional extensions that have not yet
been studied in published work. It is easliy feasible to extend the
present code-base to implement the model studied by *note
[Vetsigian_et_al_2006]: 5e.

  CMC evolutionary trajectories are partly a sequence of eigensystem
solutions. Qualitative differences in results on different platforms can
originate from differences in convergence criteria when power
method-based eigensystem solvers are used, or from differences in
floating point representations. Python defers to the platform C library
for float representation. The default eigensystem solver is the eig()
function in Numpy.


File: CMCpy.info,  Node: Dependencies,  Next: Installation,  Prev: CMCpy -- Code-Message Coevolution Models in Python,  Up: Top

Dependencies
************

CMCpy relies heavily on, and absolutely requires, numpy as a
prerequisite.  You should install numpy with the easy_install framework
to be detected as installed when installing this package.

  If you wish to play with an experimental CUDA-based power-method
eigensystem solver, you must install pycuda. This implementation is not
faster than the NumPy default solver for many systems.


File: CMCpy.info,  Node: Installation,  Next: Usage,  Prev: Dependencies,  Up: Top

Installation
************

This installer requires setuptools, the most recent python packaging
framework. If you do not already have this installed, this package will
install it for you, so long as you have network access. Otherwise
preinstall the correct version of setuptools using the EasyInstall
installation instructions at
<http://peak.telecommunity.com/DevCenter/EasyInstall#installation-instructions>

  If you need to install this package somewhere other than the main
site-packages directory, install setuptools using the instructions for
Custom Installation Locations before installing this package. The
instructions are here:
<http://peak.telecommunity.com/DevCenter/EasyInstall#custom-installation-locations>

  If you have downloaded the source-code package, the easiest way to
install the package is to execute (from within the source root
directory):

    easy_install .

Mac users may need to run this command with "sudo" prepended.

  You may also try simply executing:

     easy_install CMCpy


File: CMCpy.info,  Node: Usage,  Next: Documentation,  Prev: Installation,  Up: Top

Usage
*****

CMCpy comes with an executable inside the bin subdirectory to the
installation source package, a UNIX-compatible script called "cmc".

  Additionally, a platform-specific executable may be automatically
generated on installation.

  Published results with CMC models may be (at least qualitatively)
reproduced through the -demo option to the executables.

  Also try running the -help option to the executables after
installation and for a command-line example.

  Programmers may use the executable in bin as a guide and template for
how to program against the cmcpy API.


File: CMCpy.info,  Node: Documentation,  Next: Licensing and Attribution,  Prev: Usage,  Up: Top

Documentation
*************

Some documentation of the cmcpy API is available within the "doc"
subdirectory of the source distribution. HTML, pdf and texinfo
alternative formats are provided.


File: CMCpy.info,  Node: Licensing and Attribution,  Next: Release Notes,  Prev: Documentation,  Up: Top

Licensing and Attribution
*************************

The CMCpy project is distributed under the terms of the Apache License
2.0 as described in the file LICENSE.txt

  Please cite Becich et al. (2012) in all scientific works that use
this code.


File: CMCpy.info,  Node: Release Notes,  Next: References,  Prev: Licensing and Attribution,  Up: Top

Release Notes
*************

The most recent version is 0.1 released October 2012.

  See CHANGES.txt for version-related changes to the CMCpy code-base.


File: CMCpy.info,  Node: References,  Next: Indices and tables,  Prev: Release Notes,  Up: Top

References
**********

(Ardell_and_Sella_2001) D.H. Ardell and G. Sella (2001). On the
evolution of redundancy in genetic codes. Journal of Molecular
Evolution 53(4/5):269-281(1).  (Ardell_and_Sella_2002) D.H. Ardell and
G. Sella (2002). No accident: genetic codes freeze in error-correcting
patterns of the standard genetic code. Philosophical Transactions of
the Royal Society of London B 357:1625-1642(2).  (Sella_and_Ardell_2002)

  7. Sella and D.H. Ardell (2002). The impact of message mutation on
     the fitness of a genetic code. Journal of Molecular Evolution
     54(5):638-651(3).
       (Sella_and_Ardell_2006)

  7. Sella and D.H. Ardell (2006). The coevolution of genes and genetic
     codes: Crick's frozen accident revisited. J. Mol. Evol.
     63(3):297-313(4).
       (Vetsigian_et_al_2006) Vetsigian K., Woese C. R., Goldenfeld N.
(2006). Collective evolution and the genetic code. Proc. Natl. Acad.
Sci. U.S.A. 103, 10696-10701(5).

  ---------- Footnotes ----------

  (1) http://dx.doi.org/10.1007/s002390010217

  (2) http://dx.doi.org/10.1098/rstb.2002.1071

  (3) http://dx.doi.org/10.1007/s00239-001-0060-7

  (4) http://dx.doi.org/10.1007/s00239-004-0176-7

  (5) http://www.pnas.org/cgi/pmidlookup?view=long&pmid=16818880


File: CMCpy.info,  Node: Indices and tables,  Next: Python Module Index,  Prev: References,  Up: Top

Indices and tables
******************

   * _genindex_

   * _modindex_

   * _search_


File: CMCpy.info,  Node: Python Module Index,  Next: Index,  Prev: Indices and tables,  Up: Top

Python Module Index
*******************

* Menu:

* __init__: 0.
* __main__: 1.
* amino_acid_spaces: 2.
* codon_spaces: 3.
* evolvers: 4.
* genetic_codes: 5.
* misreading: 6.
* observables: 7.
* site_type_spaces: 8.


File: CMCpy.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* __init__ (module):                     cmcpy Package<2>.    (line   6)
* __main__ (module):                     __main__ Module.     (line   6)
* amino_acid_spaces (module):            amino_acid_spaces Module.
                                                              (line   6)
* ArdellSellaEvolverAbstractBase (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line   6)
* ArdellSellaEvolverHomotopy (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  91)
* ArdellSellaEvolverNumpy (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 101)
* ArdellSellaEvolverNumpyMulticore (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 111)
* ArdellSellaEvolverNumpyProcessChild (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 118)
* ArdellSellaEvolverPowerCUDA (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 127)
* ArdellSellaEvolverPowerMethod (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 134)
* ArdellSellaEvolverPowerMethodProcessChild (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 144)
* ArdellSellaEvolverPowerMulticore (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 153)
* calculate() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 166)
* codon_spaces (module):                 codon_spaces Module. (line   6)
* compute_code_fitness_given_messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  16)
* compute_eigensystem() (evolvers.ArdellSellaEvolverHomotopy method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  96)
* compute_eigensystem() (evolvers.ArdellSellaEvolverNumpy method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 106)
* compute_eigensystem() (evolvers.ArdellSellaEvolverPowerMethod method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 139)
* compute_max_fitness_code_mutation() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  20)
* done() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 168)
* eigensystem_CUDA_implementation (class in evolvers): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 164)
* equilibrate_messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  22)
* equilibrate_messages() (evolvers.ArdellSellaEvolverHomotopy method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  99)
* equilibrate_messages() (evolvers.ArdellSellaEvolverNumpy method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 109)
* equilibrate_messages() (evolvers.ArdellSellaEvolverNumpyMulticore method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 116)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPowerCUDA method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 132)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPowerMethod method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 142)
* equilibrate_messages() (evolvers.ArdellSellaEvolverPowerMulticore method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 158)
* error_check() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 170)
* evolve_code_unless_frozen() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  40)
* evolve_one_step() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  48)
* evolve_until_frozen() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  57)
* evolvers (module):                     evolvers Module.     (line   6)
* genetic_codes (module):                genetic_codes Module.
                                                              (line   6)
* GeneticCodeMutation (class in genetic_codes): genetic_codes Module.
                                                              (line   6)
* get_base_mutation_matrix() (codon_spaces.WordCodonSpace method): codon_spaces Module.
                                                              (line  86)
* get_derivative_matrix() (codon_spaces.RingCodonSpace method): codon_spaces Module.
                                                              (line  23)
* get_derivative_matrix() (codon_spaces.WordCodonSpace method): codon_spaces Module.
                                                              (line  90)
* get_effective_code_matrix() (genetic_codes.GeneticCodeMutation method): genetic_codes Module.
                                                              (line   7)
* get_eigenmatrix() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 172)
* get_eigenvalue() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  66)
* get_eigenvalue() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 174)
* get_eigenvalues() (evolvers.eigensystem_CUDA_implementation method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 176)
* get_fitness_matrix() (site_type_spaces.MirroringSiteTypeSpace method): site_type_spaces Module.
                                                              (line  32)
* get_mutation_eigensystem() (codon_spaces.RingCodonSpace method): codon_spaces Module.
                                                              (line  26)
* get_mutation_eigensystem() (codon_spaces.WordCodonSpace method): codon_spaces Module.
                                                              (line  94)
* get_mutation_selection_matrix() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  68)
* get_selection_matrix() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  70)
* get_site_type_weights() (site_type_spaces.MirroringSiteTypeSpace method): site_type_spaces Module.
                                                              (line  35)
* growth_rate() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  72)
* growth_rate_from_lambda() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  74)
* in_queue (evolvers.ArdellSellaEvolverPowerMulticore attribute): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 160)
* initial_equilibrate_messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  76)
* InitiallyAmbiguousGeneticCode (class in genetic_codes): genetic_codes Module.
                                                              (line   9)
* messages() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  83)
* MirroringSiteTypeSpace (class in site_type_spaces): site_type_spaces Module.
                                                              (line   9)
* misreading (module):                   misreading Module.   (line   6)
* Observables (class in observables):    observables Module.  (line   8)
* observables (module):                  observables Module.  (line   6)
* out_queue (evolvers.ArdellSellaEvolverPowerMulticore attribute): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 162)
* PositionalMisreading (class in misreading): misreading Module.
                                                              (line   6)
* post_process_perturbative_solution() (codon_spaces.RingCodonSpace method): codon_spaces Module.
                                                              (line  28)
* post_process_perturbative_solution() (codon_spaces.WordCodonSpace method): codon_spaces Module.
                                                              (line  96)
* print_initial_observables() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  85)
* print_observables() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  87)
* print_observables_header() (evolvers.ArdellSellaEvolverAbstractBase method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line  89)
* RegionAminoAcidSpace (class in amino_acid_spaces): amino_acid_spaces Module.
                                                              (line   6)
* RingAminoAcidSpace (class in amino_acid_spaces): amino_acid_spaces Module.
                                                              (line  26)
* RingCodonSpace (class in codon_spaces): codon_spaces Module.
                                                              (line   6)
* RingMisreading (class in misreading):  misreading Module.   (line  30)
* run() (evolvers.ArdellSellaEvolverNumpyProcessChild method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 125)
* run() (evolvers.ArdellSellaEvolverPowerMethodProcessChild method): evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers.
                                                              (line 151)
* site_type_spaces (module):             site_type_spaces Module.
                                                              (line   6)
* UserInitializedGeneticCode (class in genetic_codes): genetic_codes Module.
                                                              (line  13)
* WordCodonSpace (class in codon_spaces): codon_spaces Module.
                                                              (line  30)



Tag Table:
Node: Top386
Ref: index doc652
Ref: 9652
Node: cmcpy Package1447
Ref: cmcpy cmcpy-package1570
Ref: a1570
Ref: cmcpy doc1570
Ref: b1570
Ref: cmcpy welcome-to-cmcpy-s-documentation1570
Ref: c1570
Node: cmcpy Package<2>1839
Ref: cmcpy id11928
Ref: d1928
Ref: cmcpy module-__init__1969
Ref: 01969
Node: __main__ Module1969
Ref: cmcpy main-module2091
Ref: e2091
Ref: cmcpy module-__main__2091
Ref: 12091
Node: amino_acid_spaces Module2136
Ref: cmcpy amino-acid-spaces-module2261
Ref: f2261
Ref: cmcpy module-amino_acid_spaces2261
Ref: 22261
Ref: cmcpy amino_acid_spaces RegionAminoAcidSpace2324
Ref: 102324
Ref: cmcpy amino_acid_spaces RingAminoAcidSpace3228
Ref: 113228
Node: codon_spaces Module4083
Ref: cmcpy module-codon_spaces4208
Ref: 34208
Ref: cmcpy codon-spaces-module4208
Ref: 124208
Ref: cmcpy codon_spaces RingCodonSpace4261
Ref: 134261
Ref: cmcpy codon_spaces RingCodonSpace get_derivative_matrix5009
Ref: 145009
Ref: cmcpy codon_spaces RingCodonSpace get_mutation_eigensystem5053
Ref: 155053
Ref: cmcpy codon_spaces RingCodonSpace post_process_perturbative_solution5099
Ref: 165099
Ref: cmcpy codon_spaces WordCodonSpace5169
Ref: 175169
Ref: cmcpy codon_spaces WordCodonSpace get_base_mutation_matrix8765
Ref: 188765
Ref: cmcpy codon_spaces WordCodonSpace get_derivative_matrix8872
Ref: 198872
Ref: cmcpy codon_spaces WordCodonSpace get_mutation_eigensystem9012
Ref: 1a9012
Ref: cmcpy codon_spaces WordCodonSpace post_process_perturbative_solution9058
Ref: 1b9058
Node: evolvers Module9126
Ref: cmcpy module-evolvers9247
Ref: 49247
Ref: cmcpy evolvers-module9247
Ref: 1c9247
Node: evolvers -- cmcpy module for abstract base class of Ardell Sella Evolvers9475
Ref: cmcpy evolvers-cmcpy-module-for-abstract-base-class-of-ardell-sella-evolvers9599
Ref: 1d9599
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase9758
Ref: 1e9758
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase compute_code_fitness_given_messages10198
Ref: 1f10198
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase compute_max_fitness_code_mutation10375
Ref: 2010375
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase equilibrate_messages10430
Ref: 2110430
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase evolve_code_unless_frozen11072
Ref: 2211072
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase evolve_one_step11394
Ref: 2311394
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase evolve_until_frozen11794
Ref: 2411794
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase get_eigenvalue12199
Ref: 2512199
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase get_mutation_selection_matrix12248
Ref: 2612248
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase get_selection_matrix12304
Ref: 2712304
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase growth_rate12351
Ref: 2812351
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase growth_rate_from_lambda12384
Ref: 2912384
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase initial_equilibrate_messages12429
Ref: 2a12429
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase messages12698
Ref: 2b12698
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase print_initial_observables12728
Ref: 2c12728
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase print_observables12775
Ref: 2d12775
Ref: cmcpy evolvers ArdellSellaEvolverAbstractBase print_observables_header12814
Ref: 2e12814
Ref: cmcpy evolvers ArdellSellaEvolverHomotopy12860
Ref: 2f12860
Ref: cmcpy evolvers ArdellSellaEvolverHomotopy compute_eigensystem13095
Ref: 3013095
Ref: cmcpy evolvers ArdellSellaEvolverHomotopy equilibrate_messages13204
Ref: 3113204
Ref: cmcpy evolvers ArdellSellaEvolverNumpy13246
Ref: 3213246
Ref: cmcpy evolvers ArdellSellaEvolverNumpy compute_eigensystem13478
Ref: 3313478
Ref: cmcpy evolvers ArdellSellaEvolverNumpy equilibrate_messages13587
Ref: 3413587
Ref: cmcpy evolvers ArdellSellaEvolverNumpyMulticore13629
Ref: 3513629
Ref: cmcpy evolvers ArdellSellaEvolverNumpyMulticore equilibrate_messages13870
Ref: 3613870
Ref: cmcpy evolvers ArdellSellaEvolverNumpyProcessChild13912
Ref: 3713912
Ref: cmcpy evolvers ArdellSellaEvolverNumpyProcessChild run14150
Ref: 3814150
Ref: cmcpy evolvers ArdellSellaEvolverPowerCUDA14175
Ref: 3914175
Ref: cmcpy evolvers ArdellSellaEvolverPowerCUDA equilibrate_messages14399
Ref: 3a14399
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethod14441
Ref: 3b14441
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethod compute_eigensystem14671
Ref: 3c14671
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethod equilibrate_messages14780
Ref: 3d14780
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethodProcessChild14822
Ref: 3e14822
Ref: cmcpy evolvers ArdellSellaEvolverPowerMethodProcessChild run15098
Ref: 3f15098
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore15123
Ref: 4015123
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore equilibrate_messages15364
Ref: 4115364
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore in_queue15406
Ref: 4215406
Ref: cmcpy evolvers ArdellSellaEvolverPowerMulticore out_queue15436
Ref: 4315436
Ref: cmcpy evolvers eigensystem_CUDA_implementation15467
Ref: 4415467
Ref: cmcpy evolvers eigensystem_CUDA_implementation calculate15564
Ref: 4515564
Ref: cmcpy evolvers eigensystem_CUDA_implementation done15595
Ref: 4615595
Ref: cmcpy evolvers eigensystem_CUDA_implementation error_check15621
Ref: 4715621
Ref: cmcpy evolvers eigensystem_CUDA_implementation get_eigenmatrix15654
Ref: 4815654
Ref: cmcpy evolvers eigensystem_CUDA_implementation get_eigenvalue15691
Ref: 4915691
Ref: cmcpy evolvers eigensystem_CUDA_implementation get_eigenvalues15732
Ref: 4a15732
Node: genetic_codes Module15769
Ref: cmcpy module-genetic_codes15888
Ref: 515888
Ref: cmcpy genetic-codes-module15888
Ref: 4b15888
Ref: cmcpy genetic_codes GeneticCodeMutation15943
Ref: 4c15943
Ref: cmcpy genetic_codes GeneticCodeMutation get_effective_code_matrix16006
Ref: 4d16006
Ref: cmcpy genetic_codes InitiallyAmbiguousGeneticCode16053
Ref: 4e16053
Ref: cmcpy genetic_codes UserInitializedGeneticCode16199
Ref: 4f16199
Node: misreading Module18132
Ref: cmcpy module-misreading18254
Ref: 618254
Ref: cmcpy misreading-module18254
Ref: 5018254
Ref: cmcpy misreading PositionalMisreading18303
Ref: 5118303
Ref: cmcpy misreading RingMisreading19312
Ref: 5219312
Node: observables Module20210
Ref: cmcpy observables-module20335
Ref: 5320335
Ref: cmcpy module-observables20335
Ref: 720335
Ref: cmcpy observables Observables20436
Ref: 5420436
Node: site_type_spaces Module20757
Ref: cmcpy module-site_type_spaces20856
Ref: 820856
Ref: cmcpy site-type-spaces-module20856
Ref: 5520856
Ref: cmcpy site_type_spaces MirroringSiteTypeSpace21011
Ref: 5621011
Ref: cmcpy site_type_spaces MirroringSiteTypeSpace get_fitness_matrix22101
Ref: 5722101
Ref: cmcpy site_type_spaces MirroringSiteTypeSpace get_site_type_weights22142
Ref: 5822142
Node: CMCpy -- Code-Message Coevolution Models in Python22185
Ref: index cmcpy-code-message-coevolution-models-in-python22317
Ref: 5922317
Node: Dependencies23833
Ref: index dependencies23964
Ref: 5f23964
Node: Installation24378
Ref: index installation24464
Ref: 6024464
Node: Usage25479
Ref: index usage25566
Ref: 6125566
Node: Documentation26153
Ref: index documentation26253
Ref: 6226253
Node: Licensing and Attribution26446
Ref: index licensing-and-attribution26554
Ref: 6326554
Node: Release Notes26800
Ref: index release-notes26905
Ref: 6426905
Node: References27060
Ref: index references27158
Ref: 6527158
Ref: index ardell-and-sella-200127181
Ref: 5a27181
Ref: index ardell-and-sella-200227339
Ref: 5c27339
Ref: index sella-and-ardell-200227568
Ref: 5b27568
Ref: index sella-and-ardell-200627759
Ref: 5d27759
Ref: index vetsigian-et-al-200627947
Ref: 5e27947
Ref: References-Footnote-128149
Ref: References-Footnote-228196
Ref: References-Footnote-328244
Ref: References-Footnote-428295
Ref: References-Footnote-528346
Node: Indices and tables28412
Ref: index proc-natl-acad-sci-u-s-a-103-10696-1070128516
Ref: 6628516
Ref: index indices-and-tables28516
Ref: 6728516
Node: Python Module Index28604
Node: Index28920

End Tag Table


Local Variables:
coding: utf-8
End:
