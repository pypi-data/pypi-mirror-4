# vim: set syn=python ts=8 sw=4 sts=4 et ai tw=79:
from .pstore_settings import *

import os
import pwd

_OSUSER = pwd.getpwuid(os.getuid())[0]

# Debugging
DEBUG = SCRIPT_DEBUG = TEMPLATE_DEBUG = True

# Set fully qualified source e-mail, otherwise some mailservers might reject
# mails.
DEFAULT_FROM_EMAIL = SERVER_EMAIL = 'Pstore <noreply@example.com>'

# E-mail settings
ADMINS = MANAGERS = (('Developers', '%s@example.com' % _OSUSER),)

# DB settings
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # or e.g. sqlite3
        'NAME': 'pstore_%s' % _OSUSER,
        'USER': _OSUSER,
        'PASSWORD': 'somepassword',
        'HOST': '',
        'PORT': '',
        'OPTIONS': {
            'init_command':
                ("SET innodb_strict_mode=ON;"
                 "SET sql_mode='ANSI,STRICT_ALL_TABLES';"
                 "SET storage_engine=INNODB;"),
        },
    },
}

# GnuPG requires a writable home.
#import os
#os.environ["GNUPGHOME"] = '/tmp'

if DEBUG:
    # While we're developing, it's nice to see backtraces on stderr. Especially
    # when we're calling the django project from our pstore application instead
    # of from a browser.
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'handlers': {
            'console': {'level': 'DEBUG', 'class': 'logging.StreamHandler'},
        },
        'loggers': {
            'django': {'handlers': ('console',), 'level': 'INFO'},
            'pstore': {'handlers': ('console',), 'level': 'INFO'},
        },
    }

# Secret key
#from random import choice
#chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
#print repr(''.join([choice(chars) for i in range(50)]))
SECRET_KEY = '' # set this, according to the above
