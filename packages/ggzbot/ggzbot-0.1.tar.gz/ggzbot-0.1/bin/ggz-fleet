#!/usr/bin/env python3
#
#

""" run multiple bot instances in 1 program. """

## bootstrap

import warnings
warnings.simplefilter("ignore")

import os, sys, logging
sys.path.insert(0, os.getcwd())

## basic imports

import logging
import time
import signal


## options parser

from ggz.utils.opts import makefleetopts

opts = makefleetopts()

from ggz.lib.datadir import setdatadir, getdatadir
if opts.datadir: setdatadir(opts.datadir)

from ggz.version import getversion
print(getversion('FLEET'))

## jsb imports

from ggz.lib.partyline import partyline
from ggz.lib.datadir import makedirs
from ggz.lib.boot import boot
from ggz.lib.exit import globalshutdown
from ggz.utils.mainloop import mainloop
from ggz.lib.users import users_boot
from ggz.lib.threads import start_new_thread
from ggz.utils.exception import handle_exception
import ggz

## loglevel

from ggz.utils.log import setloglevel
setloglevel(opts.loglevel or "warn", not opts.nocolors) 

from ggz.lib.fleet import getfleet
fleet = getfleet(opts.datadir)
if opts.all or opts.show:
    avail = fleet.avail()
    if avail: sys.stdout.write("available bots: " + ", ".join(avail) + ".\n")
    else: sys.stdout.write("no bots available.\n")

if opts.all: print("") ; os._exit(0)

# provide sigterm support
def dostop(a, b):
    """ sig handler """
    globalshutdown()

signal.signal(signal.SIGTERM, dostop)

## start the fleet

boot(opts.datadir)

if opts.owner:
    users = users_boot()
    users.make_owner(opts.owner)

def doresume():
    try:
        fleet.resume(opts.doresume)
        fleet.startok.wait()
        partyline.resume(opts.doresume)
        time.sleep(1)
        os.unlink(opts.doresume)
    except: handle_exception()

thr = None

if opts.doresume: start_new_thread(doresume, ())
else: fleet.boot(opts.args, ["tornado", "console"])
if not fleet.bots: logging.error("fleet - no bots found.") ; os._exit(1)

mainloop()
