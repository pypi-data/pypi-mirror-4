Metadata-Version: 1.1
Name: app-report
Version: 0.0.3
Summary: Python client to AppReport API
Home-page: https://github.com/simple_services/app_report-python
Author: Lucas D'Avila
Author-email: lucas@lucasdavi.la
License: UNKNOWN
Description: ## app_report-python  
          
        app_report-python is a Python client to the [AppReport API](http://reports.simpleservic.es/), it allows you to generate pdf reports based on Jasper library in a simple way. 
        
        ### Installation  
        
        * For **Web2py framework** users, please read [Using the AppReport client on Web2py Apps](https://github.com/simpleservices/app_report-python/wiki/Using-the-AppReport-client-on-Web2py-Apps).
        
        * For **Windows** users, please read [How to install pip on Windows](https://github.com/simpleservices/app_report-python/wiki/How-to-install-pip-on-Windows).
        
        * Or, if you are using **Python on Linux**, follow this steps:
        
          ```console
          # create a file requirements.txt and add this line:
          app_report
        
          # after save it, run the install command:
          $ pip install -r requirements.txt
          ```
        
        ### Try it now
        
        * This example assumes that you already drawn your report using some tool like [i-report designer](http://community.jaspersoft.com/project/ireport-designer) and uploaded the .jrxml file to the [AppReport site](http://reports.simpleservic.es/), as a "report template",  
            
          to make the things easy, we did it for you :) yay donuts for us.
        
          ```python
          import app_report
          from app_report.helpers.reports import jasper_report
          from urllib2 import urlopen
        
          app_report.AppReport.configure({
              'app_name': 'shop',
              'access_key': 'udPONmbmD01MnxzMVgiL',
              'secret_key': 'ExINJLBR1I6Au6Hu0gQQoQmTMXAZuHk1Tkx3N19V'
          })
        
          xml_data = urlopen('http://reports.simpleservic.es/sample_resources/products.xml').read()
          report = jasper_report(template_name='products', data=xml_data, xpath_expression='/products/product')
        
          open('report.pdf', 'w').write(report)
            
          ```  
        
        <b>Just it!</b> AppReport is a really simple, no more complex configurations or boring installations are required, just connect to AppReport API and start generating reports!  
          
        ## Contribute  
        You can contribute sending pull requests, don't forget to write tests for your code and check the pep8 conventions :)
        
        ```console
        $ pip install -r development-requirements.txt  
        $ pip install -r test-requirements.txt  
        
        $ fab test
        
        $ fab check_pep8
        # p.s. the "Maximum Line Length" (of 79 chars) convention are being ignored.
        ```  
Keywords: pdf,report,jasper,api
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Environment :: Web Environment
Classifier: Development Status :: 3 - Alpha
