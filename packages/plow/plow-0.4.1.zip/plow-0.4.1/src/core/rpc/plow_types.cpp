/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "plow_types.h"

#include <algorithm>

namespace Plow {

int _kJobStateValues[] = {
  JobState::INITIALIZE,
  JobState::RUNNING,
  JobState::FINISHED
};
const char* _kJobStateNames[] = {
  "INITIALIZE",
  "RUNNING",
  "FINISHED"
};
const std::map<int, const char*> _JobState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kJobStateValues, _kJobStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskStateValues[] = {
  TaskState::INITIALIZE,
  TaskState::WAITING,
  TaskState::RUNNING,
  TaskState::DEAD,
  TaskState::EATEN,
  TaskState::DEPEND,
  TaskState::SUCCEEDED
};
const char* _kTaskStateNames[] = {
  "INITIALIZE",
  "WAITING",
  "RUNNING",
  "DEAD",
  "EATEN",
  "DEPEND",
  "SUCCEEDED"
};
const std::map<int, const char*> _TaskState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTaskStateValues, _kTaskStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNodeStateValues[] = {
  NodeState::UP,
  NodeState::DOWN,
  NodeState::REPAIR
};
const char* _kNodeStateNames[] = {
  "UP",
  "DOWN",
  "REPAIR"
};
const std::map<int, const char*> _NodeState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNodeStateValues, _kNodeStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDependTypeValues[] = {
  DependType::JOB_ON_JOB,
  DependType::LAYER_ON_LAYER,
  DependType::LAYER_ON_TASK,
  DependType::TASK_ON_LAYER,
  DependType::TASK_ON_TASK,
  DependType::TASK_BY_TASK
};
const char* _kDependTypeNames[] = {
  "JOB_ON_JOB",
  "LAYER_ON_LAYER",
  "LAYER_ON_TASK",
  "TASK_ON_LAYER",
  "TASK_ON_TASK",
  "TASK_BY_TASK"
};
const std::map<int, const char*> _DependType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDependTypeValues, _kDependTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMatcherTypeValues[] = {
  MatcherType::CONTAINS,
  MatcherType::NOT_CONTAINS,
  MatcherType::IS,
  MatcherType::IS_NOT,
  MatcherType::BEGINS_WITH,
  MatcherType::ENDS_WITH
};
const char* _kMatcherTypeNames[] = {
  "CONTAINS",
  "NOT_CONTAINS",
  "IS",
  "IS_NOT",
  "BEGINS_WITH",
  "ENDS_WITH"
};
const std::map<int, const char*> _MatcherType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kMatcherTypeValues, _kMatcherTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMatcherFieldValues[] = {
  MatcherField::JOB_NAME,
  MatcherField::PROJECT_CODE,
  MatcherField::USER,
  MatcherField::ATTR
};
const char* _kMatcherFieldNames[] = {
  "JOB_NAME",
  "PROJECT_CODE",
  "USER",
  "ATTR"
};
const std::map<int, const char*> _MatcherField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMatcherFieldValues, _kMatcherFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kActionTypeValues[] = {
  ActionType::SET_FOLDER,
  ActionType::SET_MIN_CORES,
  ActionType::SET_MAX_CORES,
  ActionType::PAUSE,
  ActionType::STOP_PROCESSING
};
const char* _kActionTypeNames[] = {
  "SET_FOLDER",
  "SET_MIN_CORES",
  "SET_MAX_CORES",
  "PAUSE",
  "STOP_PROCESSING"
};
const std::map<int, const char*> _ActionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kActionTypeValues, _kActionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* PlowException::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t PlowException::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t PlowException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlowException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlowException");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlowException &a, PlowException &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

const char* DependT::ascii_fingerprint = "42D5F222D6ED9D4192E5224B386908E6";
const uint8_t DependT::binary_fingerprint[16] = {0x42,0xD5,0xF2,0x22,0xD6,0xED,0x9D,0x41,0x92,0xE5,0x22,0x4B,0x38,0x69,0x08,0xE6};

uint32_t DependT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_type = false;
  bool isset_active = false;
  bool isset_createdTime = false;
  bool isset_modifiedTime = false;
  bool isset_dependentJobId = false;
  bool isset_dependOnJobId = false;
  bool isset_dependentJobName = false;
  bool isset_dependOnJobName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (DependType::type)ecast0;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          isset_active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          isset_createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->modifiedTime);
          isset_modifiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentJobId);
          isset_dependentJobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnJobId);
          isset_dependOnJobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentLayerId);
          this->__isset.dependentLayerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnLayerId);
          this->__isset.dependOnLayerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentTaskId);
          this->__isset.dependentTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnTaskId);
          this->__isset.dependOnTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentJobName);
          isset_dependentJobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnJobName);
          isset_dependOnJobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentLayerName);
          this->__isset.dependentLayerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnLayerName);
          this->__isset.dependOnLayerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentTaskName);
          this->__isset.dependentTaskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnTaskName);
          this->__isset.dependOnTaskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_active)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createdTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modifiedTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependentJobId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependOnJobId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependentJobName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependOnJobName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DependT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DependT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifiedTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->modifiedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentJobId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dependentJobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnJobId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->dependOnJobId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dependentLayerId) {
    xfer += oprot->writeFieldBegin("dependentLayerId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->dependentLayerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnLayerId) {
    xfer += oprot->writeFieldBegin("dependOnLayerId", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->dependOnLayerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependentTaskId) {
    xfer += oprot->writeFieldBegin("dependentTaskId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->dependentTaskId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnTaskId) {
    xfer += oprot->writeFieldBegin("dependOnTaskId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->dependOnTaskId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dependentJobName", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->dependentJobName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnJobName", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->dependOnJobName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dependentLayerName) {
    xfer += oprot->writeFieldBegin("dependentLayerName", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->dependentLayerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnLayerName) {
    xfer += oprot->writeFieldBegin("dependOnLayerName", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->dependOnLayerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependentTaskName) {
    xfer += oprot->writeFieldBegin("dependentTaskName", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->dependentTaskName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnTaskName) {
    xfer += oprot->writeFieldBegin("dependOnTaskName", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->dependOnTaskName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DependT &a, DependT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.active, b.active);
  swap(a.createdTime, b.createdTime);
  swap(a.modifiedTime, b.modifiedTime);
  swap(a.dependentJobId, b.dependentJobId);
  swap(a.dependOnJobId, b.dependOnJobId);
  swap(a.dependentLayerId, b.dependentLayerId);
  swap(a.dependOnLayerId, b.dependOnLayerId);
  swap(a.dependentTaskId, b.dependentTaskId);
  swap(a.dependOnTaskId, b.dependOnTaskId);
  swap(a.dependentJobName, b.dependentJobName);
  swap(a.dependOnJobName, b.dependOnJobName);
  swap(a.dependentLayerName, b.dependentLayerName);
  swap(a.dependOnLayerName, b.dependOnLayerName);
  swap(a.dependentTaskName, b.dependentTaskName);
  swap(a.dependOnTaskName, b.dependOnTaskName);
  swap(a.__isset, b.__isset);
}

const char* TaskTotalsT::ascii_fingerprint = "458493A9F4060F6499357D68C4F331E2";
const uint8_t TaskTotalsT::binary_fingerprint[16] = {0x45,0x84,0x93,0xA9,0xF4,0x06,0x0F,0x64,0x99,0x35,0x7D,0x68,0xC4,0xF3,0x31,0xE2};

uint32_t TaskTotalsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalTaskCount);
          this->__isset.totalTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->succeededTaskCount);
          this->__isset.succeededTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runningTaskCount);
          this->__isset.runningTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deadTaskCount);
          this->__isset.deadTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eatenTaskCount);
          this->__isset.eatenTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->waitingTaskCount);
          this->__isset.waitingTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dependTaskCount);
          this->__isset.dependTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskTotalsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskTotalsT");

  xfer += oprot->writeFieldBegin("totalTaskCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->totalTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeededTaskCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->succeededTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runningTaskCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->runningTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deadTaskCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->deadTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eatenTaskCount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->eatenTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("waitingTaskCount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->waitingTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependTaskCount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->dependTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskTotalsT &a, TaskTotalsT &b) {
  using ::std::swap;
  swap(a.totalTaskCount, b.totalTaskCount);
  swap(a.succeededTaskCount, b.succeededTaskCount);
  swap(a.runningTaskCount, b.runningTaskCount);
  swap(a.deadTaskCount, b.deadTaskCount);
  swap(a.eatenTaskCount, b.eatenTaskCount);
  swap(a.waitingTaskCount, b.waitingTaskCount);
  swap(a.dependTaskCount, b.dependTaskCount);
  swap(a.__isset, b.__isset);
}

const char* ProjectT::ascii_fingerprint = "557CE3E1F35DD5D74A3999FB1200CAB8";
const uint8_t ProjectT::binary_fingerprint[16] = {0x55,0x7C,0xE3,0xE1,0xF3,0x5D,0xD5,0xD7,0x4A,0x39,0x99,0xFB,0x12,0x00,0xCA,0xB8};

uint32_t ProjectT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isActive);
          this->__isset.isActive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProjectT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProjectT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isActive", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->isActive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProjectT &a, ProjectT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.code, b.code);
  swap(a.title, b.title);
  swap(a.isActive, b.isActive);
  swap(a.__isset, b.__isset);
}

const char* ClusterCountsT::ascii_fingerprint = "FB78EBC5FCC9B4E153E910DEF7648158";
const uint8_t ClusterCountsT::binary_fingerprint[16] = {0xFB,0x78,0xEB,0xC5,0xFC,0xC9,0xB4,0xE1,0x53,0xE9,0x10,0xDE,0xF7,0x64,0x81,0x58};

uint32_t ClusterCountsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_nodes = false;
  bool isset_upNodes = false;
  bool isset_downNodes = false;
  bool isset_repairNodes = false;
  bool isset_lockedNodes = false;
  bool isset_unlockedNodes = false;
  bool isset_cores = false;
  bool isset_upCores = false;
  bool isset_downCores = false;
  bool isset_repairCores = false;
  bool isset_lockedCores = false;
  bool isset_unlockedCores = false;
  bool isset_runCores = false;
  bool isset_idleCores = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nodes);
          isset_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upNodes);
          isset_upNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->downNodes);
          isset_downNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repairNodes);
          isset_repairNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lockedNodes);
          isset_lockedNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockedNodes);
          isset_unlockedNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cores);
          isset_cores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upCores);
          isset_upCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->downCores);
          isset_downCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repairCores);
          isset_repairCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lockedCores);
          isset_lockedCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockedCores);
          isset_unlockedCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          isset_runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idleCores);
          isset_idleCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_nodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_upNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_downNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repairNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lockedNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockedNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_upCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_downCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repairCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lockedCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockedCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_runCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_idleCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClusterCountsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ClusterCountsT");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->nodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upNodes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->upNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downNodes", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->downNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repairNodes", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->repairNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockedNodes", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lockedNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockedNodes", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->unlockedNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cores", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->cores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->upCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downCores", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->downCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repairCores", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->repairCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockedCores", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->lockedCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockedCores", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->unlockedCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idleCores", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->idleCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClusterCountsT &a, ClusterCountsT &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.upNodes, b.upNodes);
  swap(a.downNodes, b.downNodes);
  swap(a.repairNodes, b.repairNodes);
  swap(a.lockedNodes, b.lockedNodes);
  swap(a.unlockedNodes, b.unlockedNodes);
  swap(a.cores, b.cores);
  swap(a.upCores, b.upCores);
  swap(a.downCores, b.downCores);
  swap(a.repairCores, b.repairCores);
  swap(a.lockedCores, b.lockedCores);
  swap(a.unlockedCores, b.unlockedCores);
  swap(a.runCores, b.runCores);
  swap(a.idleCores, b.idleCores);
}

const char* ClusterT::ascii_fingerprint = "44007FF02F852C1596154F7EE0B2C7C9";
const uint8_t ClusterT::binary_fingerprint[16] = {0x44,0x00,0x7F,0xF0,0x2F,0x85,0x2C,0x15,0x96,0x15,0x4F,0x7E,0xE0,0xB2,0xC7,0xC9};

uint32_t ClusterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tags.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readSetBegin(_etype4, _size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              std::string _elem6;
              xfer += iprot->readString(_elem6);
              this->tags.insert(_elem6);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isLocked);
          this->__isset.isLocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDefault);
          this->__isset.isDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->total.read(iprot);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClusterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ClusterT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::set<std::string> ::const_iterator _iter7;
    for (_iter7 = this->tags.begin(); _iter7 != this->tags.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isLocked", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->isLocked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isDefault", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isDefault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->total.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClusterT &a, ClusterT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.tags, b.tags);
  swap(a.isLocked, b.isLocked);
  swap(a.isDefault, b.isDefault);
  swap(a.total, b.total);
  swap(a.__isset, b.__isset);
}

const char* QuotaT::ascii_fingerprint = "0168B2E7F15AD09D4D4CF27D6E2795E6";
const uint8_t QuotaT::binary_fingerprint[16] = {0x01,0x68,0xB2,0xE7,0xF1,0x5A,0xD0,0x9D,0x4D,0x4C,0xF2,0x7D,0x6E,0x27,0x95,0xE6};

uint32_t QuotaT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clusterId);
          this->__isset.clusterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->projectId);
          this->__isset.projectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isLocked);
          this->__isset.isLocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->burst);
          this->__isset.burst = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotaT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotaT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->clusterId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("projectId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->projectId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isLocked", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isLocked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("burst", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->burst);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuotaT &a, QuotaT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.clusterId, b.clusterId);
  swap(a.projectId, b.projectId);
  swap(a.name, b.name);
  swap(a.isLocked, b.isLocked);
  swap(a.size, b.size);
  swap(a.burst, b.burst);
  swap(a.runCores, b.runCores);
  swap(a.__isset, b.__isset);
}

const char* NodeSystemT::ascii_fingerprint = "DA22BC03B87E362458B544686CD45AB6";
const uint8_t NodeSystemT::binary_fingerprint[16] = {0xDA,0x22,0xBC,0x03,0xB8,0x7E,0x36,0x24,0x58,0xB5,0x44,0x68,0x6C,0xD4,0x5A,0xB6};

uint32_t NodeSystemT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physicalCores);
          this->__isset.physicalCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logicalCores);
          this->__isset.logicalCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalRamMb);
          this->__isset.totalRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeRamMb);
          this->__isset.freeRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalSwapMb);
          this->__isset.totalSwapMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeSwapMb);
          this->__isset.freeSwapMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cpuModel);
          this->__isset.cpuModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platform);
          this->__isset.platform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->load.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->load.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readI32(this->load[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeSystemT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeSystemT");

  xfer += oprot->writeFieldBegin("physicalCores", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->physicalCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logicalCores", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->logicalCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalRamMb", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeRamMb", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->freeRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalSwapMb", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->totalSwapMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeSwapMb", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->freeSwapMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpuModel", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->cpuModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platform", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->platform);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("load", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->load.size()));
    std::vector<int32_t> ::const_iterator _iter13;
    for (_iter13 = this->load.begin(); _iter13 != this->load.end(); ++_iter13)
    {
      xfer += oprot->writeI32((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeSystemT &a, NodeSystemT &b) {
  using ::std::swap;
  swap(a.physicalCores, b.physicalCores);
  swap(a.logicalCores, b.logicalCores);
  swap(a.totalRamMb, b.totalRamMb);
  swap(a.freeRamMb, b.freeRamMb);
  swap(a.totalSwapMb, b.totalSwapMb);
  swap(a.freeSwapMb, b.freeSwapMb);
  swap(a.cpuModel, b.cpuModel);
  swap(a.platform, b.platform);
  swap(a.load, b.load);
  swap(a.__isset, b.__isset);
}

const char* NodeT::ascii_fingerprint = "99788DF07D715CB5A00251BB21383B4B";
const uint8_t NodeT::binary_fingerprint[16] = {0x99,0x78,0x8D,0xF0,0x7D,0x71,0x5C,0xB5,0xA0,0x02,0x51,0xBB,0x21,0x38,0x3B,0x4B};

uint32_t NodeT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clusterId);
          this->__isset.clusterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clusterName);
          this->__isset.clusterName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipaddr);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tags.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readSetBegin(_etype17, _size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              std::string _elem19;
              xfer += iprot->readString(_elem19);
              this->tags.insert(_elem19);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->state = (NodeState::type)ecast20;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updatedTime);
          this->__isset.updatedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bootTime);
          this->__isset.bootTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalCores);
          this->__isset.totalCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idleCores);
          this->__isset.idleCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalRamMb);
          this->__isset.totalRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeRamMb);
          this->__isset.freeRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->system.read(iprot);
          this->__isset.system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->clusterId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->clusterName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ipaddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::set<std::string> ::const_iterator _iter21;
    for (_iter21 = this->tags.begin(); _iter21 != this->tags.end(); ++_iter21)
    {
      xfer += oprot->writeString((*_iter21));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->locked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->updatedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bootTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->bootTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCores", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->totalCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idleCores", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->idleCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalRamMb", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->totalRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeRamMb", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->freeRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("system", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->system.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeT &a, NodeT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.clusterId, b.clusterId);
  swap(a.name, b.name);
  swap(a.clusterName, b.clusterName);
  swap(a.ipaddr, b.ipaddr);
  swap(a.tags, b.tags);
  swap(a.state, b.state);
  swap(a.locked, b.locked);
  swap(a.createdTime, b.createdTime);
  swap(a.updatedTime, b.updatedTime);
  swap(a.bootTime, b.bootTime);
  swap(a.totalCores, b.totalCores);
  swap(a.idleCores, b.idleCores);
  swap(a.totalRamMb, b.totalRamMb);
  swap(a.freeRamMb, b.freeRamMb);
  swap(a.system, b.system);
  swap(a.__isset, b.__isset);
}

const char* ProcT::ascii_fingerprint = "DF2D0B05495D75DAEEDAB46A102BFEF1";
const uint8_t ProcT::binary_fingerprint[16] = {0xDF,0x2D,0x0B,0x05,0x49,0x5D,0x75,0xDA,0xEE,0xDA,0xB4,0x6A,0x10,0x2B,0xFE,0xF1};

uint32_t ProcT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostId);
          this->__isset.hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobName);
          this->__isset.jobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskName);
          this->__isset.taskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cores);
          this->__isset.cores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ramMb);
          this->__isset.ramMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->usedRamMb);
          this->__isset.usedRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highRamMb);
          this->__isset.highRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->unbooked);
          this->__isset.unbooked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProcT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProcT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->jobName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->taskName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cores", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->cores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ramMb", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->ramMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usedRamMb", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->usedRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highRamMb", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->highRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unbooked", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->unbooked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcT &a, ProcT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.hostId, b.hostId);
  swap(a.jobName, b.jobName);
  swap(a.taskName, b.taskName);
  swap(a.cores, b.cores);
  swap(a.ramMb, b.ramMb);
  swap(a.usedRamMb, b.usedRamMb);
  swap(a.highRamMb, b.highRamMb);
  swap(a.unbooked, b.unbooked);
  swap(a.__isset, b.__isset);
}

const char* JobT::ascii_fingerprint = "125E431D13D8B15912642D7AD4B34136";
const uint8_t JobT::binary_fingerprint[16] = {0x12,0x5E,0x43,0x1D,0x13,0xD8,0xB1,0x59,0x12,0x64,0x2D,0x7A,0xD4,0xB3,0x41,0x36};

uint32_t JobT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->folderId);
          this->__isset.folderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->state = (JobState::type)ecast22;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->paused);
          this->__isset.paused = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopTime);
          this->__isset.stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->totals.read(iprot);
          this->__isset.totals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRssMb);
          this->__isset.maxRssMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attrs.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _ktype24;
            ::apache::thrift::protocol::TType _vtype25;
            xfer += iprot->readMapBegin(_ktype24, _vtype25, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::string _key28;
              xfer += iprot->readString(_key28);
              std::string& _val29 = this->attrs[_key28];
              xfer += iprot->readString(_val29);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("folderId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->folderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paused", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->paused);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopTime", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->stopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totals", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->totals.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRssMb", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->maxRssMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attrs.size()));
    std::map<std::string, std::string> ::const_iterator _iter30;
    for (_iter30 = this->attrs.begin(); _iter30 != this->attrs.end(); ++_iter30)
    {
      xfer += oprot->writeString(_iter30->first);
      xfer += oprot->writeString(_iter30->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobT &a, JobT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.folderId, b.folderId);
  swap(a.name, b.name);
  swap(a.username, b.username);
  swap(a.uid, b.uid);
  swap(a.state, b.state);
  swap(a.paused, b.paused);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.runCores, b.runCores);
  swap(a.startTime, b.startTime);
  swap(a.stopTime, b.stopTime);
  swap(a.totals, b.totals);
  swap(a.maxRssMb, b.maxRssMb);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

const char* LayerT::ascii_fingerprint = "A0609CE5F3D1B9C3469DA3791D724ACE";
const uint8_t LayerT::binary_fingerprint[16] = {0xA0,0x60,0x9C,0xE5,0xF3,0xD1,0xB9,0xC3,0x46,0x9D,0xA3,0x79,0x1D,0x72,0x4A,0xCE};

uint32_t LayerT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->range);
          this->__isset.range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chunk);
          this->__isset.chunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tags.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readSetBegin(_etype34, _size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              std::string _elem36;
              xfer += iprot->readString(_elem36);
              this->tags.insert(_elem36);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->threadable);
          this->__isset.threadable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRamMb);
          this->__isset.minRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->totals.read(iprot);
          this->__isset.totals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRssMb);
          this->__isset.maxRssMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->maxCpuPerc);
          this->__isset.maxCpuPerc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LayerT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LayerT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->range);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunk", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->chunk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_SET, 5);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::set<std::string> ::const_iterator _iter37;
    for (_iter37 = this->tags.begin(); _iter37 != this->tags.end(); ++_iter37)
    {
      xfer += oprot->writeString((*_iter37));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threadable", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->threadable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minRamMb", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->minRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totals", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->totals.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRssMb", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->maxRssMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCpuPerc", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->maxCpuPerc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LayerT &a, LayerT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.range, b.range);
  swap(a.chunk, b.chunk);
  swap(a.tags, b.tags);
  swap(a.threadable, b.threadable);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.minRamMb, b.minRamMb);
  swap(a.runCores, b.runCores);
  swap(a.totals, b.totals);
  swap(a.maxRssMb, b.maxRssMb);
  swap(a.maxCpuPerc, b.maxCpuPerc);
  swap(a.__isset, b.__isset);
}

const char* TaskT::ascii_fingerprint = "4E3CC190AD5B376E4BC53A0D5EA40FAC";
const uint8_t TaskT::binary_fingerprint[16] = {0x4E,0x3C,0xC1,0x90,0xAD,0x5B,0x37,0x6E,0x4B,0xC5,0x3A,0x0D,0x5E,0xA4,0x0F,0xAC};

uint32_t TaskT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dependCount);
          this->__isset.dependCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->state = (TaskState::type)ecast38;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopTime);
          this->__isset.stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastNodeName);
          this->__isset.lastNodeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastLogLine);
          this->__isset.lastLogLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retries);
          this->__isset.retries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cores);
          this->__isset.cores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ramMb);
          this->__isset.ramMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rssMb);
          this->__isset.rssMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRssMb);
          this->__isset.maxRssMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cpuPerc);
          this->__isset.cpuPerc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->maxCpuPerc);
          this->__isset.maxCpuPerc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->progress);
          this->__isset.progress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dependCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->stopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastNodeName", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->lastNodeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLogLine", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->lastLogLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retries", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->retries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cores", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->cores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ramMb", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->ramMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rssMb", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->rssMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRssMb", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->maxRssMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpuPerc", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->cpuPerc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCpuPerc", ::apache::thrift::protocol::T_I16, 17);
  xfer += oprot->writeI16(this->maxCpuPerc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->progress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskT &a, TaskT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.number, b.number);
  swap(a.dependCount, b.dependCount);
  swap(a.order, b.order);
  swap(a.state, b.state);
  swap(a.startTime, b.startTime);
  swap(a.stopTime, b.stopTime);
  swap(a.lastNodeName, b.lastNodeName);
  swap(a.lastLogLine, b.lastLogLine);
  swap(a.retries, b.retries);
  swap(a.cores, b.cores);
  swap(a.ramMb, b.ramMb);
  swap(a.rssMb, b.rssMb);
  swap(a.maxRssMb, b.maxRssMb);
  swap(a.cpuPerc, b.cpuPerc);
  swap(a.maxCpuPerc, b.maxCpuPerc);
  swap(a.progress, b.progress);
  swap(a.__isset, b.__isset);
}

const char* FolderT::ascii_fingerprint = "31919B8E0F9AED1BFA7EF287C283029D";
const uint8_t FolderT::binary_fingerprint[16] = {0x31,0x91,0x9B,0x8E,0x0F,0x9A,0xED,0x1B,0xFA,0x7E,0xF2,0x87,0xC2,0x83,0x02,0x9D};

uint32_t FolderT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->totals.read(iprot);
          this->__isset.totals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->jobs.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->jobs.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->jobs[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.jobs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FolderT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FolderT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totals", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->totals.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.jobs) {
    xfer += oprot->writeFieldBegin("jobs", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->jobs.size()));
      std::vector<JobT> ::const_iterator _iter44;
      for (_iter44 = this->jobs.begin(); _iter44 != this->jobs.end(); ++_iter44)
      {
        xfer += (*_iter44).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FolderT &a, FolderT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.runCores, b.runCores);
  swap(a.order, b.order);
  swap(a.totals, b.totals);
  swap(a.jobs, b.jobs);
  swap(a.__isset, b.__isset);
}

const char* MatcherT::ascii_fingerprint = "4889D0BBDC856BDE6D947A26F27AE5BA";
const uint8_t MatcherT::binary_fingerprint[16] = {0x48,0x89,0xD0,0xBB,0xDC,0x85,0x6B,0xDE,0x6D,0x94,0x7A,0x26,0xF2,0x7A,0xE5,0xBA};

uint32_t MatcherT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast45;
          xfer += iprot->readI32(ecast45);
          this->type = (MatcherType::type)ecast45;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast46;
          xfer += iprot->readI32(ecast46);
          this->field = (MatcherField::type)ecast46;
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatcherT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MatcherT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->field);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatcherT &a, MatcherT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.field, b.field);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* ActionT::ascii_fingerprint = "D635E8134E429A3CB23835FC5CC677D6";
const uint8_t ActionT::binary_fingerprint[16] = {0xD6,0x35,0xE8,0x13,0x4E,0x42,0x9A,0x3C,0xB2,0x38,0x35,0xFC,0x5C,0xC6,0x77,0xD6};

uint32_t ActionT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast47;
          xfer += iprot->readI32(ecast47);
          this->type = (ActionType::type)ecast47;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActionT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ActionT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActionT &a, ActionT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* FilterT::ascii_fingerprint = "89751F0E4A83B7607CA9F2A91635B8FA";
const uint8_t FilterT::binary_fingerprint[16] = {0x89,0x75,0x1F,0x0E,0x4A,0x83,0xB7,0x60,0x7C,0xA9,0xF2,0xA9,0x16,0x35,0xB8,0xFA};

uint32_t FilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->matchers.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->matchers.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += this->matchers[_i52].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.matchers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actions.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->actions.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += this->actions[_i57].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FilterT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.matchers) {
    xfer += oprot->writeFieldBegin("matchers", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->matchers.size()));
      std::vector<MatcherT> ::const_iterator _iter58;
      for (_iter58 = this->matchers.begin(); _iter58 != this->matchers.end(); ++_iter58)
      {
        xfer += (*_iter58).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actions) {
    xfer += oprot->writeFieldBegin("actions", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actions.size()));
      std::vector<ActionT> ::const_iterator _iter59;
      for (_iter59 = this->actions.begin(); _iter59 != this->actions.end(); ++_iter59)
      {
        xfer += (*_iter59).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FilterT &a, FilterT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.order, b.order);
  swap(a.enabled, b.enabled);
  swap(a.matchers, b.matchers);
  swap(a.actions, b.actions);
  swap(a.__isset, b.__isset);
}

const char* DependSpecT::ascii_fingerprint = "C74CD2BA0D69BC506E09542F0DD5DA6B";
const uint8_t DependSpecT::binary_fingerprint[16] = {0xC7,0x4C,0xD2,0xBA,0x0D,0x69,0xBC,0x50,0x6E,0x09,0x54,0x2F,0x0D,0xD5,0xDA,0x6B};

uint32_t DependSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast60;
          xfer += iprot->readI32(ecast60);
          this->type = (DependType::type)ecast60;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentJob);
          this->__isset.dependentJob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnJob);
          this->__isset.dependOnJob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentLayer);
          this->__isset.dependentLayer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnLayer);
          this->__isset.dependOnLayer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentTask);
          this->__isset.dependentTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnTask);
          this->__isset.dependOnTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DependSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DependSpecT");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentJob", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dependentJob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnJob", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dependOnJob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentLayer", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dependentLayer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnLayer", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->dependOnLayer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentTask", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dependentTask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnTask", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->dependOnTask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DependSpecT &a, DependSpecT &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.dependentJob, b.dependentJob);
  swap(a.dependOnJob, b.dependOnJob);
  swap(a.dependentLayer, b.dependentLayer);
  swap(a.dependOnLayer, b.dependOnLayer);
  swap(a.dependentTask, b.dependentTask);
  swap(a.dependOnTask, b.dependOnTask);
  swap(a.__isset, b.__isset);
}

const char* TaskSpecT::ascii_fingerprint = "1603170361566071292880A0F6D53016";
const uint8_t TaskSpecT::binary_fingerprint[16] = {0x16,0x03,0x17,0x03,0x61,0x56,0x60,0x71,0x29,0x28,0x80,0xA0,0xF6,0xD5,0x30,0x16};

uint32_t TaskSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depends.clear();
            uint32_t _size61;
            ::apache::thrift::protocol::TType _etype64;
            xfer += iprot->readListBegin(_etype64, _size61);
            this->depends.resize(_size61);
            uint32_t _i65;
            for (_i65 = 0; _i65 < _size61; ++_i65)
            {
              xfer += this->depends[_i65].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskSpecT");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depends", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->depends.size()));
    std::vector<DependSpecT> ::const_iterator _iter66;
    for (_iter66 = this->depends.begin(); _iter66 != this->depends.end(); ++_iter66)
    {
      xfer += (*_iter66).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskSpecT &a, TaskSpecT &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.depends, b.depends);
  swap(a.__isset, b.__isset);
}

const char* LayerSpecT::ascii_fingerprint = "04AF60036B8610D0BCFEA2D559A5D2CB";
const uint8_t LayerSpecT::binary_fingerprint[16] = {0x04,0xAF,0x60,0x03,0x6B,0x86,0x10,0xD0,0xBC,0xFE,0xA2,0xD5,0x59,0xA5,0xD2,0xCB};

uint32_t LayerSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->command.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _etype70;
            xfer += iprot->readListBegin(_etype70, _size67);
            this->command.resize(_size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              xfer += iprot->readString(this->command[_i71]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tags.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readSetBegin(_etype75, _size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              std::string _elem77;
              xfer += iprot->readString(_elem77);
              this->tags.insert(_elem77);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->range);
          this->__isset.range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chunk);
          this->__isset.chunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRamMb);
          this->__isset.minRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->threadable);
          this->__isset.threadable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depends.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->depends.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              xfer += this->depends[_i82].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _etype86;
            xfer += iprot->readListBegin(_etype86, _size83);
            this->tasks.resize(_size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              xfer += this->tasks[_i87].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LayerSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LayerSpecT");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->command.size()));
    std::vector<std::string> ::const_iterator _iter88;
    for (_iter88 = this->command.begin(); _iter88 != this->command.end(); ++_iter88)
    {
      xfer += oprot->writeString((*_iter88));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::set<std::string> ::const_iterator _iter89;
    for (_iter89 = this->tags.begin(); _iter89 != this->tags.end(); ++_iter89)
    {
      xfer += oprot->writeString((*_iter89));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.range) {
    xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->range);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("chunk", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->chunk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minRamMb", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->minRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threadable", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->threadable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depends", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->depends.size()));
    std::vector<DependSpecT> ::const_iterator _iter90;
    for (_iter90 = this->depends.begin(); _iter90 != this->depends.end(); ++_iter90)
    {
      xfer += (*_iter90).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<TaskSpecT> ::const_iterator _iter91;
    for (_iter91 = this->tasks.begin(); _iter91 != this->tasks.end(); ++_iter91)
    {
      xfer += (*_iter91).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LayerSpecT &a, LayerSpecT &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.command, b.command);
  swap(a.tags, b.tags);
  swap(a.range, b.range);
  swap(a.chunk, b.chunk);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.minRamMb, b.minRamMb);
  swap(a.threadable, b.threadable);
  swap(a.depends, b.depends);
  swap(a.tasks, b.tasks);
  swap(a.__isset, b.__isset);
}

const char* JobSpecT::ascii_fingerprint = "C047168B7917FDB98284A37B1432E498";
const uint8_t JobSpecT::binary_fingerprint[16] = {0xC0,0x47,0x16,0x8B,0x79,0x17,0xFD,0xB9,0x82,0x84,0xA3,0x7B,0x14,0x32,0xE4,0x98};

uint32_t JobSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->project);
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->paused);
          this->__isset.paused = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logPath);
          this->__isset.logPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->layers.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _etype95;
            xfer += iprot->readListBegin(_etype95, _size92);
            this->layers.resize(_size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              xfer += this->layers[_i96].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.layers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depends.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->depends.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += this->depends[_i101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attrs.clear();
            uint32_t _size102;
            ::apache::thrift::protocol::TType _ktype103;
            ::apache::thrift::protocol::TType _vtype104;
            xfer += iprot->readMapBegin(_ktype103, _vtype104, _size102);
            uint32_t _i106;
            for (_i106 = 0; _i106 < _size102; ++_i106)
            {
              std::string _key107;
              xfer += iprot->readString(_key107);
              std::string& _val108 = this->attrs[_key107];
              xfer += iprot->readString(_val108);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobSpecT");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->project);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paused", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->paused);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logPath", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->logPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("layers", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->layers.size()));
    std::vector<LayerSpecT> ::const_iterator _iter109;
    for (_iter109 = this->layers.begin(); _iter109 != this->layers.end(); ++_iter109)
    {
      xfer += (*_iter109).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depends", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->depends.size()));
    std::vector<DependSpecT> ::const_iterator _iter110;
    for (_iter110 = this->depends.begin(); _iter110 != this->depends.end(); ++_iter110)
    {
      xfer += (*_iter110).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attrs.size()));
    std::map<std::string, std::string> ::const_iterator _iter111;
    for (_iter111 = this->attrs.begin(); _iter111 != this->attrs.end(); ++_iter111)
    {
      xfer += oprot->writeString(_iter111->first);
      xfer += oprot->writeString(_iter111->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobSpecT &a, JobSpecT &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.project, b.project);
  swap(a.paused, b.paused);
  swap(a.username, b.username);
  swap(a.uid, b.uid);
  swap(a.logPath, b.logPath);
  swap(a.layers, b.layers);
  swap(a.depends, b.depends);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

const char* JobFilterT::ascii_fingerprint = "E204315B1138B8CA5BF66F593C7CC089";
const uint8_t JobFilterT::binary_fingerprint[16] = {0xE2,0x04,0x31,0x5B,0x11,0x38,0xB8,0xCA,0x5B,0xF6,0x6F,0x59,0x3C,0x7C,0xC0,0x89};

uint32_t JobFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->matchingOnly);
          this->__isset.matchingOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->project.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _etype115;
            xfer += iprot->readListBegin(_etype115, _size112);
            this->project.resize(_size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              xfer += iprot->readString(this->project[_i116]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->user.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _etype120;
            xfer += iprot->readListBegin(_etype120, _size117);
            this->user.resize(_size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              xfer += iprot->readString(this->user[_i121]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regex);
          this->__isset.regex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->states.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _etype125;
            xfer += iprot->readListBegin(_etype125, _size122);
            this->states.resize(_size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              int32_t ecast127;
              xfer += iprot->readI32(ecast127);
              this->states[_i126] = (JobState::type)ecast127;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.states = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->jobIds.clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _etype131;
            xfer += iprot->readListBegin(_etype131, _size128);
            this->jobIds.resize(_size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              xfer += iprot->readString(this->jobIds[_i132]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.jobIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->name.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += iprot->readString(this->name[_i137]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobFilterT");

  xfer += oprot->writeFieldBegin("matchingOnly", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->matchingOnly);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.project) {
    xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->project.size()));
      std::vector<std::string> ::const_iterator _iter138;
      for (_iter138 = this->project.begin(); _iter138 != this->project.end(); ++_iter138)
      {
        xfer += oprot->writeString((*_iter138));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->user.size()));
      std::vector<std::string> ::const_iterator _iter139;
      for (_iter139 = this->user.begin(); _iter139 != this->user.end(); ++_iter139)
      {
        xfer += oprot->writeString((*_iter139));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.regex) {
    xfer += oprot->writeFieldBegin("regex", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->regex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.states) {
    xfer += oprot->writeFieldBegin("states", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->states.size()));
      std::vector<JobState::type> ::const_iterator _iter140;
      for (_iter140 = this->states.begin(); _iter140 != this->states.end(); ++_iter140)
      {
        xfer += oprot->writeI32((int32_t)(*_iter140));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jobIds) {
    xfer += oprot->writeFieldBegin("jobIds", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->jobIds.size()));
      std::vector< ::Plow::Guid> ::const_iterator _iter141;
      for (_iter141 = this->jobIds.begin(); _iter141 != this->jobIds.end(); ++_iter141)
      {
        xfer += oprot->writeString((*_iter141));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->name.size()));
      std::vector<std::string> ::const_iterator _iter142;
      for (_iter142 = this->name.begin(); _iter142 != this->name.end(); ++_iter142)
      {
        xfer += oprot->writeString((*_iter142));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobFilterT &a, JobFilterT &b) {
  using ::std::swap;
  swap(a.matchingOnly, b.matchingOnly);
  swap(a.project, b.project);
  swap(a.user, b.user);
  swap(a.regex, b.regex);
  swap(a.states, b.states);
  swap(a.jobIds, b.jobIds);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* TaskFilterT::ascii_fingerprint = "7028F2D087F924A052FD8B2C709E418F";
const uint8_t TaskFilterT::binary_fingerprint[16] = {0x70,0x28,0xF2,0xD0,0x87,0xF9,0x24,0xA0,0x52,0xFD,0x8B,0x2C,0x70,0x9E,0x41,0x8F};

uint32_t TaskFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->layerIds.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _etype146;
            xfer += iprot->readListBegin(_etype146, _size143);
            this->layerIds.resize(_size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              xfer += iprot->readString(this->layerIds[_i147]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.layerIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->states.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _etype151;
            xfer += iprot->readListBegin(_etype151, _size148);
            this->states.resize(_size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              int32_t ecast153;
              xfer += iprot->readI32(ecast153);
              this->states[_i152] = (TaskState::type)ecast153;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.states = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->taskIds.clear();
            uint32_t _size154;
            ::apache::thrift::protocol::TType _etype157;
            xfer += iprot->readListBegin(_etype157, _size154);
            this->taskIds.resize(_size154);
            uint32_t _i158;
            for (_i158 = 0; _i158 < _size154; ++_i158)
            {
              xfer += iprot->readString(this->taskIds[_i158]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.taskIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskFilterT");

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->jobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("layerIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->layerIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter159;
    for (_iter159 = this->layerIds.begin(); _iter159 != this->layerIds.end(); ++_iter159)
    {
      xfer += oprot->writeString((*_iter159));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("states", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->states.size()));
    std::vector<TaskState::type> ::const_iterator _iter160;
    for (_iter160 = this->states.begin(); _iter160 != this->states.end(); ++_iter160)
    {
      xfer += oprot->writeI32((int32_t)(*_iter160));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->lastUpdateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskIds", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->taskIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter161;
    for (_iter161 = this->taskIds.begin(); _iter161 != this->taskIds.end(); ++_iter161)
    {
      xfer += oprot->writeString((*_iter161));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskFilterT &a, TaskFilterT &b) {
  using ::std::swap;
  swap(a.jobId, b.jobId);
  swap(a.layerIds, b.layerIds);
  swap(a.states, b.states);
  swap(a.limit, b.limit);
  swap(a.offset, b.offset);
  swap(a.lastUpdateTime, b.lastUpdateTime);
  swap(a.taskIds, b.taskIds);
  swap(a.__isset, b.__isset);
}

const char* NodeFilterT::ascii_fingerprint = "A5FBE94ED5EBC0E091C6D957CD35627C";
const uint8_t NodeFilterT::binary_fingerprint[16] = {0xA5,0xFB,0xE9,0x4E,0xD5,0xEB,0xC0,0xE0,0x91,0xC6,0xD9,0x57,0xCD,0x35,0x62,0x7C};

uint32_t NodeFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hostIds.clear();
            uint32_t _size162;
            ::apache::thrift::protocol::TType _etype165;
            xfer += iprot->readListBegin(_etype165, _size162);
            this->hostIds.resize(_size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              xfer += iprot->readString(this->hostIds[_i166]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hostIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->clusterIds.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->clusterIds.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += iprot->readString(this->clusterIds[_i171]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.clusterIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regex);
          this->__isset.regex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hostnames.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->hostnames.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += iprot->readString(this->hostnames[_i176]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hostnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->states.clear();
            uint32_t _size177;
            ::apache::thrift::protocol::TType _etype180;
            xfer += iprot->readListBegin(_etype180, _size177);
            this->states.resize(_size177);
            uint32_t _i181;
            for (_i181 = 0; _i181 < _size177; ++_i181)
            {
              int32_t ecast182;
              xfer += iprot->readI32(ecast182);
              this->states[_i181] = (NodeState::type)ecast182;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.states = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeFilterT");

  xfer += oprot->writeFieldBegin("hostIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hostIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter183;
    for (_iter183 = this->hostIds.begin(); _iter183 != this->hostIds.end(); ++_iter183)
    {
      xfer += oprot->writeString((*_iter183));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->clusterIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter184;
    for (_iter184 = this->clusterIds.begin(); _iter184 != this->clusterIds.end(); ++_iter184)
    {
      xfer += oprot->writeString((*_iter184));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regex", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->regex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostnames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hostnames.size()));
    std::vector<std::string> ::const_iterator _iter185;
    for (_iter185 = this->hostnames.begin(); _iter185 != this->hostnames.end(); ++_iter185)
    {
      xfer += oprot->writeString((*_iter185));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("states", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->states.size()));
    std::vector<NodeState::type> ::const_iterator _iter186;
    for (_iter186 = this->states.begin(); _iter186 != this->states.end(); ++_iter186)
    {
      xfer += oprot->writeI32((int32_t)(*_iter186));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.locked) {
    xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->locked);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeFilterT &a, NodeFilterT &b) {
  using ::std::swap;
  swap(a.hostIds, b.hostIds);
  swap(a.clusterIds, b.clusterIds);
  swap(a.regex, b.regex);
  swap(a.hostnames, b.hostnames);
  swap(a.states, b.states);
  swap(a.locked, b.locked);
  swap(a.__isset, b.__isset);
}

const char* QuotaFilterT::ascii_fingerprint = "92AA23526EDCB0628C830C8758ED7059";
const uint8_t QuotaFilterT::binary_fingerprint[16] = {0x92,0xAA,0x23,0x52,0x6E,0xDC,0xB0,0x62,0x8C,0x83,0x0C,0x87,0x58,0xED,0x70,0x59};

uint32_t QuotaFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->project.clear();
            uint32_t _size187;
            ::apache::thrift::protocol::TType _etype190;
            xfer += iprot->readListBegin(_etype190, _size187);
            this->project.resize(_size187);
            uint32_t _i191;
            for (_i191 = 0; _i191 < _size187; ++_i191)
            {
              xfer += iprot->readString(this->project[_i191]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cluster.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _etype195;
            xfer += iprot->readListBegin(_etype195, _size192);
            this->cluster.resize(_size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              xfer += iprot->readString(this->cluster[_i196]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotaFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotaFilterT");

  if (this->__isset.project) {
    xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->project.size()));
      std::vector< ::Plow::Guid> ::const_iterator _iter197;
      for (_iter197 = this->project.begin(); _iter197 != this->project.end(); ++_iter197)
      {
        xfer += oprot->writeString((*_iter197));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cluster) {
    xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->cluster.size()));
      std::vector< ::Plow::Guid> ::const_iterator _iter198;
      for (_iter198 = this->cluster.begin(); _iter198 != this->cluster.end(); ++_iter198)
      {
        xfer += oprot->writeString((*_iter198));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuotaFilterT &a, QuotaFilterT &b) {
  using ::std::swap;
  swap(a.project, b.project);
  swap(a.cluster, b.cluster);
  swap(a.__isset, b.__isset);
}

const char* OutputT::ascii_fingerprint = "F7C641917C22B35AE581CCD54910B00D";
const uint8_t OutputT::binary_fingerprint[16] = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

uint32_t OutputT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attrs.clear();
            uint32_t _size199;
            ::apache::thrift::protocol::TType _ktype200;
            ::apache::thrift::protocol::TType _vtype201;
            xfer += iprot->readMapBegin(_ktype200, _vtype201, _size199);
            uint32_t _i203;
            for (_i203 = 0; _i203 < _size199; ++_i203)
            {
              std::string _key204;
              xfer += iprot->readString(_key204);
              std::string& _val205 = this->attrs[_key204];
              xfer += iprot->readString(_val205);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OutputT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OutputT");

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attrs.size()));
    std::map<std::string, std::string> ::const_iterator _iter206;
    for (_iter206 = this->attrs.begin(); _iter206 != this->attrs.end(); ++_iter206)
    {
      xfer += oprot->writeString(_iter206->first);
      xfer += oprot->writeString(_iter206->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OutputT &a, OutputT &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

} // namespace
