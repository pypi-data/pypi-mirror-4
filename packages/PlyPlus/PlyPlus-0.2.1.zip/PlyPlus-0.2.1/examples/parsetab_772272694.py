
# parsetab_772272694.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xef\xd5\xe6`\x89\x0fr\xc3\xd3Q\x01\x1f\x12s\x14\xf4'
    
_lr_action_items = {'MINUS':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[8,-5,-8,-9,-6,-7,12,8,8,8,8,8,8,-12,12,-1,-4,-2,-3,-10,]),'PLUS':([1,2,3,5,6,7,14,15,16,17,18,19,20,],[-5,-8,-9,-6,-7,10,-12,10,-1,-4,-2,-3,-10,]),'MUL':([1,2,3,5,6,7,14,15,16,17,18,19,20,],[-5,-8,-9,-6,-7,13,13,13,13,-4,13,-3,-10,]),'DIV':([1,2,3,5,6,7,14,15,16,17,18,19,20,],[-5,-8,-9,-6,-7,11,11,11,11,-4,11,-3,-10,]),'$end':([1,2,3,4,5,6,7,14,16,17,18,19,20,],[-5,-8,-9,0,-6,-7,-11,-12,-1,-4,-2,-3,-10,]),'_ANON_2':([0,8,9,10,11,12,13,],[3,3,3,3,3,3,3,]),'_ANON_1':([1,2,3,5,6,14,15,16,17,18,19,20,],[-5,-8,-9,-6,-7,-12,20,-1,-4,-2,-3,-10,]),'_ANON_0':([0,8,9,10,11,12,13,],[9,9,9,9,9,9,9,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'bin_op':([0,8,9,10,11,12,13,],[1,1,1,1,1,1,1,]),'number':([0,8,9,10,11,12,13,],[2,2,2,2,2,2,2,]),'start':([0,],[4,]),'un_op':([0,8,9,10,11,12,13,],[5,5,5,5,5,5,5,]),'parenthesis':([0,8,9,10,11,12,13,],[6,6,6,6,6,6,6,]),'expression':([0,8,9,10,11,12,13,],[7,14,15,16,17,18,19,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('bin_op -> expression PLUS expression','bin_op',3,'p_bin_op','<string>',2),
  ('bin_op -> expression MINUS expression','bin_op',3,'p_bin_op','<string>',3),
  ('bin_op -> expression MUL expression','bin_op',3,'p_bin_op','<string>',4),
  ('bin_op -> expression DIV expression','bin_op',3,'p_bin_op','<string>',5),
  ('expression -> bin_op','expression',1,'p_expression','<string>',2),
  ('expression -> un_op','expression',1,'p_expression','<string>',3),
  ('expression -> parenthesis','expression',1,'p_expression','<string>',4),
  ('expression -> number','expression',1,'p_expression','<string>',5),
  ('number -> _ANON_2','number',1,'p_number','<string>',2),
  ('parenthesis -> _ANON_0 expression _ANON_1','parenthesis',3,'p_parenthesis','<string>',2),
  ('start -> expression','start',1,'p_start','<string>',2),
  ('un_op -> MINUS expression','un_op',2,'p_un_op','<string>',2),
]
