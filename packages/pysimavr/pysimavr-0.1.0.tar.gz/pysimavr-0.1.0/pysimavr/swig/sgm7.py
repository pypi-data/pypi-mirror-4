# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sgm7', [dirname(__file__)])
        except ImportError:
            import _sgm7
            return _sgm7
        if fp is not None:
            try:
                _mod = imp.load_module('_sgm7', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sgm7 = swig_import_helper()
    del swig_import_helper
else:
    import _sgm7
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAX_DIGITS = _sgm7.MAX_DIGITS
IRQ_SGM7_A = _sgm7.IRQ_SGM7_A
IRQ_SGM7_B = _sgm7.IRQ_SGM7_B
IRQ_SGM7_C = _sgm7.IRQ_SGM7_C
IRQ_SGM7_D = _sgm7.IRQ_SGM7_D
IRQ_SGM7_E = _sgm7.IRQ_SGM7_E
IRQ_SGM7_F = _sgm7.IRQ_SGM7_F
IRQ_SGM7_G = _sgm7.IRQ_SGM7_G
IRQ_SGM7_P = _sgm7.IRQ_SGM7_P
IRQ_DIG0 = _sgm7.IRQ_DIG0
SEGMENT_PINS = _sgm7.SEGMENT_PINS
SEGMENT_A = _sgm7.SEGMENT_A
SEGMENT_B = _sgm7.SEGMENT_B
SEGMENT_C = _sgm7.SEGMENT_C
SEGMENT_D = _sgm7.SEGMENT_D
SEGMENT_E = _sgm7.SEGMENT_E
SEGMENT_F = _sgm7.SEGMENT_F
SEGMENT_G = _sgm7.SEGMENT_G
SEGMENT_P = _sgm7.SEGMENT_P
class sgm7_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sgm7_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sgm7_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["irq"] = _sgm7.sgm7_t_irq_set
    __swig_getmethods__["irq"] = _sgm7.sgm7_t_irq_get
    if _newclass:irq = _swig_property(_sgm7.sgm7_t_irq_get, _sgm7.sgm7_t_irq_set)
    __swig_setmethods__["avr"] = _sgm7.sgm7_t_avr_set
    __swig_getmethods__["avr"] = _sgm7.sgm7_t_avr_get
    if _newclass:avr = _swig_property(_sgm7.sgm7_t_avr_get, _sgm7.sgm7_t_avr_set)
    __swig_setmethods__["pinstate"] = _sgm7.sgm7_t_pinstate_set
    __swig_getmethods__["pinstate"] = _sgm7.sgm7_t_pinstate_get
    if _newclass:pinstate = _swig_property(_sgm7.sgm7_t_pinstate_get, _sgm7.sgm7_t_pinstate_set)
    __swig_setmethods__["digit_count"] = _sgm7.sgm7_t_digit_count_set
    __swig_getmethods__["digit_count"] = _sgm7.sgm7_t_digit_count_get
    if _newclass:digit_count = _swig_property(_sgm7.sgm7_t_digit_count_get, _sgm7.sgm7_t_digit_count_set)
    __swig_setmethods__["digit_segments"] = _sgm7.sgm7_t_digit_segments_set
    __swig_getmethods__["digit_segments"] = _sgm7.sgm7_t_digit_segments_get
    if _newclass:digit_segments = _swig_property(_sgm7.sgm7_t_digit_segments_get, _sgm7.sgm7_t_digit_segments_set)
    __swig_setmethods__["digit_segments_changed"] = _sgm7.sgm7_t_digit_segments_changed_set
    __swig_getmethods__["digit_segments_changed"] = _sgm7.sgm7_t_digit_segments_changed_get
    if _newclass:digit_segments_changed = _swig_property(_sgm7.sgm7_t_digit_segments_changed_get, _sgm7.sgm7_t_digit_segments_changed_set)
    __swig_setmethods__["digit_pin"] = _sgm7.sgm7_t_digit_pin_set
    __swig_getmethods__["digit_pin"] = _sgm7.sgm7_t_digit_pin_get
    if _newclass:digit_pin = _swig_property(_sgm7.sgm7_t_digit_pin_get, _sgm7.sgm7_t_digit_pin_set)
    __swig_setmethods__["digit_port"] = _sgm7.sgm7_t_digit_port_set
    __swig_getmethods__["digit_port"] = _sgm7.sgm7_t_digit_port_get
    if _newclass:digit_port = _swig_property(_sgm7.sgm7_t_digit_port_get, _sgm7.sgm7_t_digit_port_set)
    __swig_setmethods__["segment_pin"] = _sgm7.sgm7_t_segment_pin_set
    __swig_getmethods__["segment_pin"] = _sgm7.sgm7_t_segment_pin_get
    if _newclass:segment_pin = _swig_property(_sgm7.sgm7_t_segment_pin_get, _sgm7.sgm7_t_segment_pin_set)
    __swig_setmethods__["segment_port"] = _sgm7.sgm7_t_segment_port_set
    __swig_getmethods__["segment_port"] = _sgm7.sgm7_t_segment_port_get
    if _newclass:segment_port = _swig_property(_sgm7.sgm7_t_segment_port_get, _sgm7.sgm7_t_segment_port_set)
    def __init__(self): 
        this = _sgm7.new_sgm7_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sgm7.delete_sgm7_t
    __del__ = lambda self : None;
sgm7_t_swigregister = _sgm7.sgm7_t_swigregister
sgm7_t_swigregister(sgm7_t)


def sgm7_core_init(*args):
  return _sgm7.sgm7_core_init(*args)
sgm7_core_init = _sgm7.sgm7_core_init

def sgm7_get_digit_segments(*args):
  return _sgm7.sgm7_get_digit_segments(*args)
sgm7_get_digit_segments = _sgm7.sgm7_get_digit_segments

def sgm7_reset_dirty(*args):
  return _sgm7.sgm7_reset_dirty(*args)
sgm7_reset_dirty = _sgm7.sgm7_reset_dirty
# This file is compatible with both classic and new-style classes.


