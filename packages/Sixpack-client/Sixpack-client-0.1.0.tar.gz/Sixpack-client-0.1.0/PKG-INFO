Metadata-Version: 1.0
Name: Sixpack-client
Version: 0.1.0
Summary: Python client for Sixpack, an A/B testing framework under active development at SeatGeek
Home-page: http://github.com/seatgeek/sixpack-py
Author: SeatGeek
Author-email: hi@seatgeek.com
License: Copyright (c) 2013 SeatGeek

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Description: Sixpack
        =======
        
        Python client library for SeatGeak's Sixpack ab testing framework.
        
        Installation
        ------------
        
        First install in your virtual environment::
        
            $ pip install sixpack-client
        
        Usage
        -----
        
        Basic example::
        
        
            from sixpack.sixpack import Session
        
            session = Session()
        
            # Participate in a test (creates the test if necessary)
            session.participate("new-test", ["alternative-1", "alternative-2"])
        
            # Convert
            session.convert("new-test")
        
        Each session has a `client_id` associated with it that must be preserved across requests. Here's what the first request might look like::
        
            session = Session
            session.participate("new-test", ["alternative-1", "alternative-2"])
            set_cookie_in_your_web_framework("sixpack-id", session.client_id)
        
        For future requests, create the `Session` using the `client_id` stored in the cookie::
        
            client_id = get_cookie_from_web_framework("sixpack-id")
            session = Session(client_id=client_id)
            session.convert("new-test")
        
        If you already have a client_id (you can generate one using `sixpack.generate_client_id()`) you can use the `simple_participate()` and `simple_convert()` methods to avoid instantiating a `Session`::
        
            from sixpack.sixpack import simple_participate, simple_convert
        
            simple_partipate("new-test", ["alternative-1", "alternative-2"], client_id)
        
            simple_convert("new-test", client_id)
        
        
        Contributing
        ------------
        
        1. Fork it
        2. Create your feature branch (`git checkout -b my-new-feature`)
        3. Commit your changes (`git commit -am 'Added some feature'`)
        4. Push to the branch (`git push origin my-new-feature`)
        5. Create new Pull Request
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2.7
