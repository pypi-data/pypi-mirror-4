!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module forpulsar ! in 
    interface  ! in :forpulsar

        module parameters ! in :forpulsar:f90/parameters.f90
            integer*8, optional :: ifasing=1
            complex*8, allocatable,dimension(:,:) :: roi
            real*8, parameter,optional :: twopi=6.28318530718
            real*8, optional :: qfactor=0.001
            integer*8, parameter,optional :: verbose=5
            real*8, allocatable,dimension(:,:) :: t2
            integer*8, optional :: nsb=10
            real*8, parameter,optional :: sq6=2.44948974278
            real*8, allocatable,dimension(:,:) :: pulse
            integer*8, optional :: accuracymax=16
            logical*8, optional :: keepgoing=.true.
            integer*8, parameter,optional :: warning=3
            character(len=2), optional :: tab=char(09)
            real*8, parameter,optional :: twopim6=6.28318530718e-06
            character(len=32768) :: message
            complex*8, allocatable,dimension(:,:) :: ros
            integer*8, allocatable,dimension(:) :: nphase
            real*8, optional :: rfstep=5.d0
            integer*8, optional :: ncycles=1
            character(len=256), optional :: exception_text=" "
            real*8, allocatable,dimension(:,:) :: dipole
            real*8, allocatable,dimension(:) :: pulseangle
            integer*8, optional :: nall=999
            real*8, allocatable,dimension(:,:) :: delay
            real*8, allocatable,dimension(:,:) :: quadrupole
            integer*8, parameter,optional :: critical=1
            integer*8, allocatable,dimension(:,:) :: qu2
            character(len=255) :: message_fmt
            real*8, parameter,optional :: pi=3.14159265359
            complex*8, allocatable,dimension(:) :: spec
            integer*8, optional :: accuracy=1
            logical*8, optional :: idealpulse=.true.
            logical*8, optional :: zerospectrum=.true.
            real*8, optional,depend(eps) :: spinningspeed=1e-17
            real*8, allocatable,dimension(:,:) :: indirect
            real*8, optional :: rcph=0.0d0
            integer*8, parameter,optional :: error=2
            real*8, allocatable,dimension(:,:) :: nucleus
            character(len=2), optional :: crlf=char(13)//char(10)
            integer*8, allocatable,dimension(:) :: iref
            real*8, allocatable,dimension(:,:) :: chemicalshift
            real*8, optional :: spectrometerfield=2.3d0
            character(len=32), parameter,optional :: underline='--------------------------------'
            integer*8, parameter,optional :: info=4
            integer*8, optional :: exception=-1
            logical*8, optional :: spectrum_compute=.true.
            real*8, allocatable,dimension(:,:) :: ctp
            integer*8, allocatable,dimension(:) :: level
            real*8, optional :: protonfrequency=100.d0
            logical*8, optional :: czjzek=.false.
            real*8, optional :: sw=10000.d0
            real*8, parameter,optional :: eps=1e-17
            integer*8, allocatable,dimension(:,:) :: qu1
            integer*8, optional,depend(info) :: loglevel=4
            integer*8, optional :: nptsmax=16384
            real*8, allocatable,dimension(:,:) :: coher
            real*8, optional,depend(eps) :: sr=1e-17
            integer*8, parameter,optional :: debug=6
            integer*8, optional :: npts=512
            real*8, optional,depend(eps) :: spinningangle=1e-17
            integer*8, optional :: nboucle=-1
        end module parameters

        subroutine reset ! in :forpulsar:f90/main.f90
            use diagonalize
        end subroutine reset
        function compute() ! in :forpulsar:f90/main.f90
            use operators
            use share
            logical*1 :: compute
        end function compute
        
    end interface 
end python module forpulsar

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
