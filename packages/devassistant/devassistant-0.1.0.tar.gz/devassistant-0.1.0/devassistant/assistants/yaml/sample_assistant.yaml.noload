c: # name of the assistant as will be used on commandline; should be the same as filename
  fullname: C Language Tool # descriptive name that will be shown to user
  description: This is a description of what this assistant does.

  subassistants: [foo, bar] # names of subassistants of this assistant

  dependencies: # dependencies of this assistant; you can use either names/provides of packages or yum groups
  - default: # these dependencies will always be installed
    - rpm: [gcc, '@foo'] # use apostrophes around @ not to get syntax error when using yaml
  - _mock: # these dependencies will be installed after 'default' when mock parameter is used
    - rpm: [mock]

  logging: # additional logging handlers, only file handlers are currently supported
  - file: ['debug', '$name/cproject.log'] # runs in the very beginning and logs everything at debug level

  args: # arguments that this assistant needs
    name: # this argument is called "name"
      flags: # commandline flags that will be used for this argument; mandatory
      - -n
      - --name
      help: # help for this argument
        'Name of project to create'
    ide:
      flags:
      - -i
      - --ide
      action:
        'store_true' # this option will be a switch without arguments
    mock:
      flags:
      - mock # this argument will be positional
      help:
        'Do something with mock'
      nargs: # number of values that this positional argument will eat - one of `[?, *, +]`
        '?'# doesn't need a value, just triggers "run_mock" instead of "run"

  files: # files under devassistant/templates that will be referenced in one of run* sections
    clientc: &clientc # the anchor is mandatory, you can then reference this file using `*clientc`
      source: c/client.c # the source attribute is mandatory
    serverc: &serverc
      source: c/server.c

  fail_if: # immediately cancel execution if any of these commands (except logging) is successful
  - log_i: 'Checking for something' # log_i logs at `info` level
  - cl: ls /foo/bar # run ls /foo/bar on commandline, fail if it returns 0

  run: # gets executed by default; fails and immediately exits if any command fails
  - cl: mkdir -p $name # uses `name` from the parameters above
  - dda_c: $name # creates .devassistant file (with default initial content) in directory $name
  - log_d: 'Some debugging message' # log_d logs at debug level
  - cl: cp *clientc $name # copies file from `clientc` file entry above to location `$name`
  - if $ide: # condition based on variable (this one checks $ide, which is cli argument)
    - if not ls ~/.vimrc/blahblah: # use not to negate condition, condition can also be cli argument
      - cl: mkdir ~/.vimrc/blahblah
    - else:
      - log_i: 'blahblah already exists'
  - log_i: 'Finished'
  - run: run_misc # runs "run_misc" section here
  - $foo: basename $name # assign result of cli command basename $name to variable $foo
  - cl_f: echo $foo

  run_mock: # if mock parameter is specified, use this instead of "run"
  - cl_f: mock blah blah # "cl_f" runs the command in foreground, displaying its output interactively
  - cl_i: ls spam # "cl_i" makes the command itself logged not on debug level, but on info level, that shows by default
  - cl_if: ls beans # combines cl_i and cl_f
