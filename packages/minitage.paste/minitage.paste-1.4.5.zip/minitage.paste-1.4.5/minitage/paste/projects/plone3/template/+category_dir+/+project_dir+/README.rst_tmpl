==============================================================
BUILDOUT FOR $project DOCUMENTATION
==============================================================

INSTALLING THIS PROJECT WITHOUT MINITAGE
-----------------------------------------
::

    source /minitage/bin/activate
    $scm_type clone $uri ${project}
    cd ${project}
    python bootstrap.py -dc buildout-(dev/prod).cfg
    bin/buildout -vvvvvNc -dc buildout-(dev/prod).cfg

INSTALLING THIS PROJECT VITH MINITAGE
--------------------------------------
ALWAYS USE THE MINITAGE ENVIRONMENT FILE INSIDE A MINITAGE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before doing anything in your project just after being installed, just source the environment file in your current shell::

    source \$MT/zope/${project}/sys/share/minitage/minitage.env # env file is generated with \$MT/bin/paster create -t minitage.instances.env ${project}

THE MINITAGE DANCE
~~~~~~~~~~~~~~~~~~~~~~~~
::

    export MT=/minitage
    virtualenv --no-site-packages --distribute \$MT
    source /minitage/bin/activate
    easy_install -U minitage.core minitage.paste
#if $scm_type == 'svn'
    svn co $uri/minilays/${project} \$MT/minilays/${project}
#elif $scm_type in ['hg', 'git']
#set $minilay = $uri.replace('buildout', 'minilay')
    $scm_type clone $minilay \$MT/minilays/${project}
#end if
    minimerge -v $project
    #minimerge -v ${project}-prod
    source \$MT/zope/${project}/sys/share/minitage/minitage.env
    cd \$INS #enjoy !


CREATE A FIRST PLONESITE OBJECT
---------------------------------
Just run your plone and install ${project}

PLAYING WITH DATAFS & PROJECT DATABASES
-------------------------------------------
- Upload the latest datafs from production to staging server::

    bin/buildout -vNc <CONFIG>-prod.cfg install upload-datafs

- Get the latest datafs from production to staging server::

    bin/buildout -vNc <CONFIG> install get-datafs


DEVELOP MODE
---------------
To develop your application, run the ``(minitage.)buildout-dev.cfg`` buildout, it extends this one but:
  * it comes with development tools.
  * it configures the instance to be more verbose (debug mode & verbose security)
  * it has only one instance and not all the hassles from production.


PRODUCTION MODE
---------------
To make your application safe for production, run the ``(minitage.)buildout-prod.cfg`` buildout'.
It extends this one with additionnal crontabs and backup scripts and some additionnal instances creation.


BASE BUILDOUTS WHICH DO ONLY SCHEDULE PARTS FROM THERE & THERE
-------------------------------------------------------------------
Love to know that Minitage support includes xml libs, ldap, dbs; python, dependencies & common eggs cache for things like lxml or Pillow), subversion & much more.
::

    |-- etc/base.cfg               -> The base buildout
    |-- buildout-prod.cfg          -> buildout for production
    |-- buildout-dev.cfg           -> buildout for development
    |-- etc/minitage/minitage.cfg  -> some buildout tweaks to run in the best of the world with minitage
    |-- minitage.buildout-prod.cfg -> buildout for production  with minitage support
    |-- minitage.buildout-dev.cfg  -> buildout for development with minitage support


PLONE OFFICIAL BUILDOUTS INTEGRATION
--------------------------------------
In ``etc/base.cfg``, we extends directly plone release versions & sources files.


PROJECT SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~
- Think you have the most important sections of this buildout configuration in etc/${project}.cfg
Set the project developement  specific settings there
::

    etc/project/
    |-- ${project}.cfg       -> your project needs (packages, sources, products)
    |-- sources.cfg          -> externals sources of your project:
    |                           - Sources not packaged as python eggs.
    |                           - Eggs Grabbed from svn, add here your develoment eggs.
    |                           - Links to find distributions.
    |-- patches.cfg          -> patches used on the project
    |-- cluster.cfg          -> define new zope instances here & also their FileSystemStorage if any.
    |-- newsletter.cfg       -> singing & dancing integration (new instance with clockserver, version pinning, fss if any)
    |-- ${project}-kgs.cfg   -> Generated KGS for your project (minitage's printer or buildout.dumppickledversion)
    `-- versions.cfg         -> minimal version pinning for installing your project


SYSTEM ADMINISTRATORS RELATED FILES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    etc/init.d/                 -> various init script (eg supervisor)
    etc/logrotate.d/            -> various logrotate configuration files
    etc/sys/
    |-- high-availability.cfg   -> Project production settings like supervision, loadbalancer and so on
    |-- maintenance.cfg         -> Project maintenance settings (crons, logs)
    `-- settings.cfg            -> various settings (crons hours, hosts, installation paths, ports, passwords)

#if $with_ploneproduct_fss:
CRONS
~~~~~~
::

    |-- etc/cron_scripts/fss_daily.sh   -> backup script for fss

#end if

REVERSE PROXY
--------------
We generate two virtualhosts for a cliassical apache setup, mostly ready but feel free to copy/adapt.
::
    etc/apache/
    |-- ${apache_vhost_number}-${project}.reverseproxy.conf     -> a vhost for ruse with a standalone plone (even with haproxy in front of.)
    `-- apache.cfg
    etc/templates/apache/
    |-- ${apache_vhost_number}-${project}.reverseproxy.conf.in  -> Template for a vhost for ruse with a standalone plone (even with haproxy in front of.)

In settings.cfg you have now some settings for declaring which host is your reverse proxy backend & the vhost mounting:
    * hosts:zope-front / ports:zope-front                              -> zope front backend
    * reverseproxy:host / reverseproxy:port / reverseproxy:mount-point -> host / port / mountpoint on the reverse proxy)

CONFIGURATION TEMPLATES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    etc/templates/
    |-- balancer.conf.template      -> haproxy template.
    |                                  Copy or ln the generated file 'etc/loadbalancing/balancer.conf' to your haproxy installation if any.
#if $with_ploneproduct_fss
    |-- fss_daily.sh.in             -> FSS daily backup script template
#end if
    `-- logrotate.conf.template     -> logrotate configuration file template for your Zope logs
    `-- supervisor.initd            -> template for supervisor init script


BACKENDS
~~~~~~~~~~~
::

    etc/backends/
#if $with_ploneproduct_fss:
    |-- etc/backends/fss.cfg                   -> Filestorage configuration if any
#end if
    |-- etc/backends/relstorage.cfg            -> relstorage configuration if any
    |-- etc/backends/zeo.cfg                   -> zeoserver configuration if any
    `-- etc/backends/zodb.cfg                  -> zodb configuration if any

OS SPECIFIC SYSTEM INSTALLERS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Thos popular tools around zope/plone dev (not supported, just here for your conveniance, READ BEFORE USING THEM)
And you'd  better have to learn how to bootstrap some minitage environment out there, funny and more secure & reproductible!
::

    |-- etc/os
        |-- debian.sh       -> debian specific
        |-- opensuse-dev.sh -> opensuse/dev specific
        |-- opensuse.sh     -> suse specific
        |-- osx.sh          -> osx specific
        `-- ubuntu.sh       -> ubuntu specific


CONTINEOUS INTEGRATION
~~~~~~~~~~~~~~~~~~~~~~~~~
Here are the files needed for our hudson integration.

For hudson we provide some shell helpers more or less generated to run 'a build':

    - an helper which set some variables in the current environement for others helpers
    - an helper which update the project
    - an helper which update the associated sources grabbed via mr.developer
    - an helper which run all the tests

This is described in details on the related configuration files you will find in the layout below.
::

    |-- etc/hudson/
    |   `-- $project
    |       |-- build
    |           |-- build.sh               -> the project build helper
    |           |-- test.sh                -> the project test executor helper (launch all tests needed)
    |           |-- update_mrdeveloper.sh  -> update sources grabbed via mrdeveloper
    |           `-- update_project.sh      -> update this layout
    |
    |-- etc/templates/hudson/
        `-- ${project}
            |-- build
            |   `-- activate_env.sh.in   -> buildout template to generate etc/hudson/${project}/build/activate.env.sh
            `-- config.xml.in            -> buildout template to generate etc/hudson/${project}/config.xml (hudson job/build file)

$instances_description.replace('# ', '')

.. vim:set ft=rst:
