# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-12, Jim Easterbrook
# This file is distributed under the same license as the pywws package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pywws 12.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-17 13:43\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc_src/guides/getstarted.rst:2
# 233cc6f5be924229b91ad5bd213d1231
msgid "How to get started with pywws"
msgstr ""

#: ../doc_src/guides/getstarted.rst:4
# 42a3d1ede8b5416e940a33dc8b2fb8a1
msgid "Download and unpack the pywws software."
msgstr ""

#: ../doc_src/guides/getstarted.rst:6
# 3ae9ff6e0e4e492b9aa60e62becc6fd6
msgid "Create a directory for all your weather related files and change to it. For example (on a Linux or similar operating system)::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:11
# 36a3a527001049c582f0632ba07df1d1
msgid "Visit the pywws website https://github.com/jim-easterbrook/pywws/downloads and download one of the .tar.gz or .zip files. Put it in your weather directory, then extract all the files, for example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:15
# e882245ba30447ccb4b1854dbd910d1e
msgid "or::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:19
#: ../doc_src/guides/twitter.rst:4
# 5cf84367814b49108702919823fb160f
# 6802c2f114d74254abdbaa54823e5cfe
msgid "Install dependencies."
msgstr ""

#: ../doc_src/guides/getstarted.rst:21
# 2ae5b6ee2c2b492aa51cc31a6e0e22b0
msgid "Python 2.4+ - http://python.org/ (Note: Python 3 support is under development.)"
msgstr ""

#: ../doc_src/guides/getstarted.rst:23
# 54c366dccf8e4be7bffbad4ba11b301e
msgid "USB library option 1 (best for small systems such as routers):"
msgstr ""

#: ../doc_src/guides/getstarted.rst:25
# a4d49f17bc1c4447a8f532ec7783e253
msgid "PyUSB 0.4.x - http://sourceforge.net/apps/trac/pyusb/"
msgstr ""

#: ../doc_src/guides/getstarted.rst:26
# 4caa347f736749a3a4c699e5e1c80b04
msgid "libusb 0.1.12 - http://www.libusb.org/"
msgstr ""

#: ../doc_src/guides/getstarted.rst:27
# 4b72da1042784dd8a1c8c82d77c55a08
msgid "USB library option 2:"
msgstr ""

#: ../doc_src/guides/getstarted.rst:29
# 0e493c06ff3248a1b204a62bfac4b9ee
msgid "PyUSB 1.0.x - http://sourceforge.net/apps/trac/pyusb/"
msgstr ""

#: ../doc_src/guides/getstarted.rst:30
# e2ddbf1ba6c84a6b81cd3ec1ce0fee3a
msgid "libusb 0.1.x or 1.0.x - http://www.libusb.org/"
msgstr ""

#: ../doc_src/guides/getstarted.rst:31
# 344691789a214a65886c97f300ee7401
msgid "USB library option 3 (best for MacOS):"
msgstr ""

#: ../doc_src/guides/getstarted.rst:33
# bb6f8803eca34b20a4a9ef1667401e76
msgid "hidapi - https://github.com/signal11/hidapi"
msgstr ""

#: ../doc_src/guides/getstarted.rst:34
# 05d21e47e95340418c3657afe7d7d8a9
msgid "cython-hidapi - https://github.com/gbishop/cython-hidapi"
msgstr ""

#: ../doc_src/guides/getstarted.rst:35
# 58dfaff6b2934ba08eb0718cfae067bd
msgid "cython - http://cython.org/"
msgstr ""

#: ../doc_src/guides/getstarted.rst:37
# e10b7539210e44fb9126ec3f524413f4
msgid "You may be able to install these using your operating system's package manager. This is a lot easier than downloading and compiling the source files from the project websites. Note that some Linux distributions may use different names for some of the packages, e.g. in Ubuntu, pyusb is python-usb."
msgstr ""

#: ../doc_src/guides/getstarted.rst:39
# abd742520d184e54bda92a4ce094ee7c
msgid "PyUSB can also be installed from PyPI using the ``pip`` command::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:43
# c5fce71ce1d84fbdbf62ffe2d0adafb9
msgid "(Python 3 users only) Translate pywws to Python 3."
msgstr ""

#: ../doc_src/guides/getstarted.rst:45
# 124c2e95ae334bb78413e42e8632864d
msgid "Change to your pywws directory then use ``make`` to convert Python 2 code to Python 3::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:50
# fbbdf9df948b4ce894441522ac3a16dc
msgid "This should create a ``code3`` directory which you use instead of the ``code`` directory in the following instructions."
msgstr ""

#: ../doc_src/guides/getstarted.rst:52
# bb710aa683f84aa88e67b3024c2ee677
msgid "Test the weather station connection."
msgstr ""

#: ../doc_src/guides/getstarted.rst:54
# 9a2c5e66c100414098caa39a63a2d066
msgid "Connect the weather station (if not already connected) then run the :py:mod:`TestWeatherStation` program. Change to the source code directory first. For example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:59
# f0670ff9a8804e41bb5d47caaf6c5db4
msgid "If everything is working correctly, this should dump a load of numbers to the screen, for example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:70
# 96eb906d510448e4bcfe679a5886c8f4
msgid "There are several reasons why this might not work. Most likely is a 'permissions' problem. This can be tested by running the command as root::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:74
# 034135722dc644e6bae87a4ee5beb351
msgid "If this works then you may be able to allow your normal user account to access the weather station by setting up a 'udev' rule. See the compatibility wiki page http://code.google.com/p/pywws/wiki/Compatibility for more details."
msgstr ""

#: ../doc_src/guides/getstarted.rst:76
# 8809c76fceef4a60bcb1393cffbf18fb
msgid "If you have any other problem, please ask for help on the pywws mailing list: http://groups.google.com/group/pywws"
msgstr ""

#: ../doc_src/guides/getstarted.rst:78
# fe3e4985101344e3a478fb41f0f8ace8
msgid "Log your weather station data."
msgstr ""

#: ../doc_src/guides/getstarted.rst:80
# 32dfd8e2e51f4c5786ca97a62957e2a9
msgid "First, choose a directory to store all your weather station data. This will be written to quite frequently, so a disk drive is preferable to a memory stick, as these have a limited number of writes. In most cases your home directory is suitable, for example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:84
# 0e358e064d5a4b4dbf4ba97edb3d510d
msgid "This directory is referred to elsewhere in the pywws documentation as your data directory."
msgstr ""

#: ../doc_src/guides/getstarted.rst:86
# f29eb4d836a24745bb876ac22c891f68
msgid "Make sure your computer has the right date & time, and time zone, as these are used to label the weather station data. If you haven't already done so, it's worth setting up NTP to synchronise your computer to a 'time server'."
msgstr ""

#: ../doc_src/guides/getstarted.rst:88
# 751d2586c96547689f4c3e4c87631f82
msgid "Make sure your weather station has the correct offset between 'absolute' and 'relative' atmospheric pressure. See the instruction book for details on how to set this."
msgstr ""

#: ../doc_src/guides/getstarted.rst:90
# 913ba116aaf6492f990b3b0fa758fea8
msgid "The first time you run :py:mod:`pywws.LogData` it will create a configuration file in your data directory called 'weather.ini' and then stop. You need to edit the configuration file and change the line ``ws type = Unknown`` to ``ws type = 1080`` or ``ws type = 3080``. (If your weather station console displays solar illuminance you have a 3080 type, all others are 1080.) Then run :py:mod:`pywws.LogData` again. This may take several minutes, as it will copy all the data stored in your station's memory. The :py:mod:`pywws.LogData` program has a 'verbose' option that increases the amount of messages it displays while running. This is useful when running it manually, for example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:94
# 7b6afbd4ae834e64882cf80df95d7833
msgid "(Replace ``~/weather/data`` with your data directory, if it's different.)"
msgstr ""

#: ../doc_src/guides/getstarted.rst:96
# 299601d565df4ef4a46e69ea4d5e74a4
msgid "You should now have some data files you can look at. For example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:100
# b6b290739dcf454a8f4291d4f9e4f22d
msgid "(Replace the year, month and day with ones that you have data for.)"
msgstr ""

#: ../doc_src/guides/getstarted.rst:102
# 369c4a651e884d63b24142307e9719eb
msgid "Convert old EasyWeather data (optional)."
msgstr ""

#: ../doc_src/guides/getstarted.rst:104
# 7864eede5d904d87bae893a20181045f
msgid "If you had been running EasyWeather before deciding to use pywws, you can convert the data EasyWeather had logged to the pywws format. Find your EasyWeather.dat file and then convert it::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:108
# 3b758c689c634b488159f4a8a418b66f
msgid "Set some configuration options."
msgstr ""

#: ../doc_src/guides/getstarted.rst:110
# 8a41db503ce04b6aa172f3b95bd881ab
msgid "After running :py:mod:`pywws.LogData` there should be a configuration file in your data directory called 'weather.ini'. Open this with a text editor. You should find something like the following::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:120
# d713ce31bbf04c3399232c54d942ffe6
msgid "The line ``[fixed]`` marks the start of a section (called '[fixed]'), and the following lines are entries in that section. The ``ws type`` entry can be set to ``1080`` or ``3080``. If your station's console displays illuminance and UV information, set it to ``3080``. The ``pressure offset`` entry stores the difference between absolute and relative atmospheric pressure that was read from the weather station. The ``fixed block`` entry stores a large amount of data from the station's 'fixed block' memory."
msgstr ""

#: ../doc_src/guides/getstarted.rst:122
# b3cc25940f004d4fa53e6024b5bc10aa
msgid "You need to add a new entry in the ``[config]`` section called ``day end hour``. This tells pywws what convention you want to use when calculating daily summary data. In the UK, the 'meteorological day' is usually from 09:00 to 09:00 GMT (10:00 to 10:00 BST during summer), so I use a day end hour value of 9. In other countries a value of 24 (or 0) might be more suitable. Note that the value is set in local winter time. You should not need to change it when daylight savings time is in effect."
msgstr ""

#: ../doc_src/guides/getstarted.rst:124
# ac054860cbc648ebafdb1401e7742428
msgid "After editing, your weather.ini file should look something like this::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:135
# 92361173a045418cb59146ebca4c49c7
msgid "For more detail on the configuration file options, see :doc:`../guides/weather_ini`."
msgstr ""

#: ../doc_src/guides/getstarted.rst:137
# 5fac532cd495487a9b418c6d1b5c10f4
msgid "Process the raw data."
msgstr ""

#: ../doc_src/guides/getstarted.rst:139
# 945ea50dc5b344f1acc75967db246750
msgid ":py:mod:`pywws.LogData` just copies the raw data from the weather station. To do something useful with that data you probably need hourly, daily and monthly summaries. These are created by the :py:mod:`pywws.Process` program. For example::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:143
# de980a48e287494b8bf7de08b7f2590d
msgid "You should now have some processed files to look at::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:147
# c2e9d68b6e454818ba67ba4bed89cd95
msgid "If you ever change your ``day end hour`` configuration setting, you will need to reprocess all your weather data. You can do this by running the :py:mod:`Reprocess` program::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:151
# 125ecd741fcb4fd9aac52f6eb78238d5
msgid "Set the weather station logging interval."
msgstr ""

#: ../doc_src/guides/getstarted.rst:153
# c80bbbe136224daebbe602c1f44b4c48
msgid "Your weather station probably left the factory with a 30 minute logging interval. This enables the station to store about 11 weeks of data. Most pywws users set up their computers to read data from the station every hour, and only need the station to store enough data to cover computer failures. The recommended interval is 5 minutes, which still allows 2 weeks of storage. Use the :py:mod:`SetWeatherStation` program to set the interval::"
msgstr ""

#: ../doc_src/guides/getstarted.rst:157
# 44fbe27601ab4749a32d11ebaa1ec55e
msgid "You are now ready to set up regular or continuous logging, as described in :doc:`hourlylogging` or :doc:`livelogging`."
msgstr ""

#: ../doc_src/guides/getstarted.rst:159
# 722a59a8767b4ab69a896003c05b2efe
msgid "Read the documentation."
msgstr ""

#: ../doc_src/guides/getstarted.rst:161
# 6fb776839b0544e58de6e3dbe0f50016
msgid "The doc directory in your pywws source directory contains HTML and plain text versions of the documentation. The HTML files can be read with any web browser. Start with the index (:doc:`../index`) and follow links from there."
msgstr ""

#: ../doc_src/guides/getstarted.rst:163
#: ../doc_src/guides/hourlylogging.rst:109
#: ../doc_src/guides/language.rst:86
#: ../doc_src/guides/livelogging.rst:119
#: ../doc_src/guides/twitter.rst:65
# 7af4587890cc45fa9a57d979b577234c
# 4a93dd5cc6454385bb77501880f610a8
# 73e9d508daac4b79a61ea8724a88ea87
# 2811f413c99c44fdbe90f2fa1446f56a
# aa823c1804e844d2b697cb5e7a6c8ac9
msgid "Comments or questions? Please subscribe to the pywws mailing list http://groups.google.com/group/pywws and let us know."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:2
# 63e1f91c9e3d4721891088aa925e4d91
msgid "How to set up 'hourly' logging with pywws"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:5
#: ../doc_src/guides/livelogging.rst:5
# 8eff02cd6a9043cf831bb6c2791f3d01
# cd969bf6aa9c4f9ba467b6749761f9ff
msgid "Introduction"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:7
#: ../doc_src/guides/livelogging.rst:7
# 60fa44661fef4b58bcd1b394cf1da529
# 643abcecc6b145639ca228f98a915518
msgid "There are two quite different modes of operation with pywws. Traditionally the :doc:`../api/Hourly` program would be run at regular intervals (usually an hour) from cron. This is suitable for fairly static websites, but more frequent updates can be useful for sites such as Weather Underground (http://www.wunderground.com/). The newer :doc:`../api/LiveLog` program runs continuously and can upload data every 48 seconds."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:9
# 79cb06b1bc214449a26346b5573abccf
msgid "Note that although this document (and the program name) refers to 'hourly' logging, you can run the Hourly.py program as often or as infrequently as you like, but don't try to run it more often than half your logging frequency. For example, if your logging interval is 10 minutes, don't run Hourly.py more often than every 20 minutes."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:12
#: ../doc_src/guides/livelogging.rst:10
# a7afeccda78746b2a1e079518d8bd16d
# cf93db0b0be044469bb7062577b7cdd1
msgid "Getting started"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:14
#: ../doc_src/guides/livelogging.rst:12
# 42bae9f672fb4c35b8dedddcf5ba0589
# 330873f8953f4c079b080b541a0615c4
msgid "First of all, you need to install pywws and make sure it can get data from your weather station. See :doc:`getstarted` for details."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:16
# 4144d270c9054697bde52e91fe243e6f
msgid "Try running Hourly.py from the command line, with a high level of verbosity so you can see what's happening::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:20
# ca6ba50d507f48ecb078be8bb7886bdb
msgid "Within five minutes (assuming you have set a 5 minute logging interval) you should see a 'live_data new ptr' message, followed by fetching any new data from the weather station and processing it."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:23
#: ../doc_src/guides/livelogging.rst:21
# 698131087f734d5e9dbc584a91ad00df
# ae919ee44f954c97a62de46cc627c9cb
msgid "Configuring file locations"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:25
#: ../doc_src/guides/livelogging.rst:23
# e4b36b1e68004e37b35441270e3d2b85
# 74a2aaa768be49c997fa6afd8a58a0d0
msgid "Open your weather.ini file with a text editor. You should have a ``[paths]`` section similar to the following (where ``xxx`` is your user name)::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:32
#: ../doc_src/guides/livelogging.rst:30
# b777c26f95dd46e9a0d21872a86cda44
# f9eec4fff5134ae7bb4d5982f61b0eb8
msgid "Edit these to suit your installation and preferences. ``work`` is a temporary directory used to store intermediate files, ``templates`` is the directory where you keep your text template files and ``graph_templates`` is the directory where you keep your graph template files. Don't use the pywws example directories for these, as they will get over-written when you upgrade pywws."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:34
#: ../doc_src/guides/livelogging.rst:32
# 73d06a4d927644b3bc36c4a66ffb04f3
# 24b4b0e2a2bd4cef89ea55cbd91cd4d6
msgid "Copy your text and graph templates to the appropriate directories. You may find some of the examples provided with pywws useful to get started."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:37
#: ../doc_src/guides/livelogging.rst:35
# 47806dedca314303a3d231e5e1bd7bd1
# cec078c12bed4fbeb4230b36615d8030
msgid "Configuring periodic tasks"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:39
# 30d4eec8d12041ab9a81bb7c734b06ef
msgid "In weather.ini you should have ``[logged]``, ``[hourly]``, ``[12 hourly]`` and ``[daily]`` sections similar to the following::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:50
# 604060cc331046efb6365e106f083041
msgid "These specify what Hourly.py should do when it is run. Tasks in the ``[logged]`` section are done every time there is new logged data, tasks in the ``[hourly]`` section are done every hour, tasks in the ``[12 hourly]`` section are done twice daily and tasks in the ``[daily]`` section are done once per day."
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:52
# 75befa1c94bc453b823d4c6951313ed6
msgid "The ``services`` entry is a list of online weather services to upload data to. The ``plot`` and ``text`` entries are lists of template files for plots and text files to be uploaded to your web site, and the ``twitter`` entry is a list of templates for messages to be posted to Twitter. Add the names of your template files and weather services to the appropriate entries, for example::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:78
# 13ae60a99e184b588c608da60ced5e51
msgid "You can test that all these are working by removing all ``last update`` lines from weather.ini then run Hourly.py again::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:83
# 332392f0bd2145acbf1e451c83425b30
msgid "Run as a cron job"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:85
# 9a464e670d2c4b7a82131b54b22e72a9
msgid "Most UNIX/Linux systems have a 'cron' daemon that can run programs at certain times, even if you are not logged in to the computer. You edit a 'crontab' file to specify what to run and when to run  it. For example, to run Hourly.py every hour, at zero minutes past the hour::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:89
# 4da73bccad0e43a9987c7907c252b2fc
msgid "This might work, but if it didn't you probably won't get any error messages to tell you what went wrong. It's much better to run a script that runs Hourly.py and then emails you any output it produces. Here's the script I use::"
msgstr ""

#: ../doc_src/guides/hourlylogging.rst:107
# 7c32336e6ff4424d87bda794a7f6dfd5
msgid "You’ll need to edit this quite a lot to suit your file locations and so on, but it gives some idea of what to do."
msgstr ""

#: ../doc_src/guides/index.rst:2
# 64c2d85d8e304e50a4d898f320b0e0ca
msgid "User guides"
msgstr ""

#: ../doc_src/guides/index.rst:4
# 0b3d7d3c4905443b84fd9dde21c25689
msgid "Contents:"
msgstr ""

#: ../doc_src/guides/language.rst:2
# ec7a1f80a5154cc3ad89953342048bc7
msgid "How to make a language file for pywws"
msgstr ""

#: ../doc_src/guides/language.rst:4
# fed87660b41742a2875fedf5507d05a2
msgid "Introduction."
msgstr ""

#: ../doc_src/guides/language.rst:6
# bb65f72c4a1f421e975b58a62c08c42d
msgid "Some parts of pywws can be configured to use your local language instead of British English. This requires an appropriate language file which contains translations of the various strings used in pywws. The pywws project relies on users to provide these translations. This document describes how to create a language file."
msgstr ""

#: ../doc_src/guides/language.rst:12
# 42fec6c036814b13bddabcbe7645c2db
msgid "Dependencies."
msgstr ""

#: ../doc_src/guides/language.rst:14
# f6505774f49141ce995849aafcfd1cc4
msgid "As well as the pywws software you need to install the 'gettext' GNU internationalisation utilities package. This is available from the standard repositories for most Linux distributions, or you can download it from http://www.gnu.org/software/gettext/ if you need to compile it yourself."
msgstr ""

#: ../doc_src/guides/language.rst:20
# a8403a9c53a34022953239b758fa929a
msgid "Getting started."
msgstr ""

#: ../doc_src/guides/language.rst:22
# 0c127161635d4f5aa670361276c482e2
msgid "Your pywws directory should already have a subdirectory called languages. This contains the existing set of language files, for example 'sv.po' contains the Swedish translations. If one of these languages is what you need, then edit your weather.ini file and add a 'language' entry to the '[config]' section, for example::"
msgstr ""

#: ../doc_src/guides/language.rst:33
# 24a470d7f7494c01a784464537eb4ed8
msgid "If there isn't already a file for your language, the rest of this document tells you how to create one."
msgstr ""

#: ../doc_src/guides/language.rst:36
# b9cc9d1a4a9040f1a407205591590301
msgid "Choose your language code."
msgstr ""

#: ../doc_src/guides/language.rst:38
# 7634c72dd5614d2eadb3afa03a15c8bd
msgid "Computers use IETF language tags (see http://en.wikipedia.org/wiki/IETF_language_tag). For example, in the UK we use 'en_GB'. This has two parts: 'en' for English, and 'GB' for the British version of it. To find the correct code for your language, consult the list at http://www.gnu.org/software/gettext/manual/gettext.html#Language-Codes."
msgstr ""

#: ../doc_src/guides/language.rst:45
# 2ad47ef69e0a4ab5a8957dbb42e9e1fa
msgid "Create a language file."
msgstr ""

#: ../doc_src/guides/language.rst:47
# 638fe5250e8d4eb7ad6de83857ef6e9c
msgid "The 'makefile' included with pywws can create a template file for you to fill in. For example, to create a file for the French language (code 'fr')::"
msgstr ""

#: ../doc_src/guides/language.rst:52
# ac1de30611d64fca9029343f17878987
msgid "This will ask you to confirm your email address, then create a file 'code/languages/fr.po'. You should now edit this file, filling in every 'msgstr' line with a translation of the 'msgid' line immediately above it. The reason for including your email address is to allow anyone who has questions about your translation to get in touch with you. Feel free to put in an invalid address if you are concerned about privacy."
msgstr ""

#: ../doc_src/guides/language.rst:54
# 5ac0f4fb70f1421fa5794da5d773998f
msgid "After you've edited your new language file it needs to be compiled so that pywws can use it. This is also done by the makefile::"
msgstr ""

#: ../doc_src/guides/language.rst:59
# 915e051dd0d64c4099b7c46ab396aa5c
msgid "Don't forget to do this every time you edit a language file."
msgstr ""

#: ../doc_src/guides/language.rst:61
# 869a1af716674a44a0ce76cc536496e5
msgid "Test the pywws translation."
msgstr ""

#: ../doc_src/guides/language.rst:63
# 3f24ebac28b542dd8331692310b2f8d0
msgid "Edit the language entry in your weather.ini file to use your language code (e.g. 'fr'), then try using Plot.py to plot a graph. The X-axis of the graph should now be labeled in your language, using the translation you provided for 'Time', 'Day' or 'Date'."
msgstr ""

#: ../doc_src/guides/language.rst:68
# 5992103a65c14415916d1d48cae52118
msgid "Send Jim the language file."
msgstr ""

#: ../doc_src/guides/language.rst:70
# e66899506f134049a43767b3b6657208
msgid "I'm sure you would like others to benefit from the work you've done in making a new language file for pywws. Please, please, please send a copy of your language file (for example fr.po) to jim@jim-easterbrook.me.uk."
msgstr ""

#: ../doc_src/guides/language.rst:74
# 3d968d6c4c434ed389942e0aaeb17b8b
msgid "Update the language file."
msgstr ""

#: ../doc_src/guides/language.rst:76
# 2709f8e87a51411a9a29b9390b557a70
msgid "As pywws is extended, new strings may be added which will require your translation file to be extended as well. This is fairly easy to do. First you need to remove the language master template file::"
msgstr ""

#: ../doc_src/guides/language.rst:82
# 81a8b80a3b034d38ac490b30062d415d
msgid "Now run the make command again as in section 5 above. This should add the new strings to your language file, without changing the strings you've already translated."
msgstr ""

#: ../doc_src/guides/livelogging.rst:2
# af56bcf2703a4372908843f37dbad728
msgid "How to set up 'live' logging with pywws"
msgstr ""

#: ../doc_src/guides/livelogging.rst:14
# f8a93f628256443594aac349239f76cc
msgid "Try running LiveLog.py from the command line, with a high level of verbosity so you can see what's happening::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:18
# 5cfc876fce984cdcba32c848d910edca
msgid "Within five minutes (assuming you have set a 5 minute logging interval) you should see a 'live_data new ptr' message, followed by fetching any new data from the weather station and processing it. Let LiveLog.py run for a minute or two longer, then kill the process by typing '<Ctrl>C'."
msgstr ""

#: ../doc_src/guides/livelogging.rst:37
# 305a12e974ef46d6a4f484478c6cadce
msgid "In weather.ini you should have a ``[live]`` section similar to the following::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:45
# 5249269f01f94e3abc7cdc5d4d67e677
msgid "This section specifies what pywws should do every time it gets a new reading from the weather station, i.e. every 48 seconds. The ``services`` entry is a list of online weather services to upload data to, e.g. ``['underground']``. The ``plot`` and ``text`` entries are lists of template files for plots and text files to be uploaded to your web site, and the ``twitter`` entry is a list of templates for messages to be posted to Twitter. You should probably leave all of these blank except for ``services``."
msgstr ""

#: ../doc_src/guides/livelogging.rst:47
# 679b14f6e3bc44dbbb4c97d8403065a6
msgid "If you use YoWindow (http://yowindow.com/) you can add an entry to the ``[live]`` section to specify your YoWindow file, e.g.::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:54
# 5b4f86402fec4059b61725b349a28742
msgid "If you don't already have them, create four more sections in your weather.ini file: ``[logged]``, ``[hourly]``, ``[12 hourly]`` and ``[daily]``. These sections should have similar entries to the ``[live]`` section, and specify what to do every time data is logged (5 to 30 minutes, depending on your logging interval), every hour, twice daily and once per day. Add the names of your template files to the appropriate entries, for example::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:81
# 0cdc5fdc9e344c559db78a1d03c1c3a7
msgid "Run in the background"
msgstr ""

#: ../doc_src/guides/livelogging.rst:83
# 015912161b054521aa59b4e2d9dc0513
msgid "In order to have LiveLog.py carry on running after you finish using your computer it needs to be run as a 'background job'. On most Linux / UNIX systems you can do this by putting an ampersand ('&') at the end of the command line. For example::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:87
# 674ed79b04ab4c74a0e048248b51cab2
msgid "However, it would be useful to know what went wrong if the program crashes for any reason. LiveLog.py can store its messages in a log file, specified with the -l option::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:92
# fd471d4ecaeb436481a9b8e32e145e11
msgid "Automatic restarting"
msgstr ""

#: ../doc_src/guides/livelogging.rst:94
# 690e7b3f0b8a40d592f498030071dc0d
msgid "There are various ways of configuring a Linux system to start a program when the machine boots up. Typically these involve putting a file in /etc/init.d/, which requires root privileges. A slightly harder problem is ensuring a program restarts if it crashes. My solution to both problems is to run the following script from cron, every hour. ::"
msgstr ""

#: ../doc_src/guides/livelogging.rst:117
# 7342fca8348f4e519989456b9ac8b1b8
msgid "This stores the process id of the running LiveLog.py in pidfile. If the process is running, the script does nothing. If the process has crashed, it emails the last 40 lines of the log file to me (using a script that creates a message and passes it to sendmail) and then restarts LiveLog.py. You'll need to edit this quite a lot to suit your file locations and so on, but it gives some idea of what to do."
msgstr ""

#: ../doc_src/guides/twitter.rst:2
# e6fd78dd8492415f9f6fd3b1ca0e9f07
msgid "How to configure pywws to post messages to Twitter"
msgstr ""

#: ../doc_src/guides/twitter.rst:6
# bfa0f57bcf1e4e96a06582df3f305f5d
msgid "Python 2.5+ - http://python.org/ (Note: Python 3 is not supported.)"
msgstr ""

#: ../doc_src/guides/twitter.rst:7
# d2fbaa0c52cd44a89252f35add421ec8
msgid "tweepy - http://code.google.com/p/tweepy/"
msgstr ""

#: ../doc_src/guides/twitter.rst:8
# 31ad00c5812349f3a5a5d5f2b81284c1
msgid "simplejson - http://pypi.python.org/pypi/simplejson/"
msgstr ""

#: ../doc_src/guides/twitter.rst:10
# bd62a3d001b24ea285c3787bc664b923
msgid "Note that simplejson is included in Python 2.6+"
msgstr ""

#: ../doc_src/guides/twitter.rst:12
# 9163c974d409475fbf3da43334be1a06
msgid "Create a Twitter account."
msgstr ""

#: ../doc_src/guides/twitter.rst:14
# e23df67ccd204f8db5a746f023b45bef
msgid "You could post weather updates to your 'normal' Twitter account, but I think it's better to have a separate account just for weather reports. This could be useful to someone who lives in your area, but doesn't want to know what you had for breakfast."
msgstr ""

#: ../doc_src/guides/twitter.rst:16
# c980446fe07941f5b4a4d4a98e5dbab7
msgid "Authorise pywws to post to your Twitter account."
msgstr ""

#: ../doc_src/guides/twitter.rst:18
# 46ded0f36b2043299a8003b0b501b086
msgid "Make sure no other pywws software is running, then run the :py:mod:`TwitterAuth` program::"
msgstr ""

#: ../doc_src/guides/twitter.rst:22
# 067fa543308048eb85933694fd81c73f
msgid "(Replace ``/data/weather`` with your data directory.)"
msgstr ""

#: ../doc_src/guides/twitter.rst:24
# 4a35cdca9f794e3b865e624896a10b35
msgid "This will open a web browser window (or give you a URL to copy to your web browser) where you can log in to your Twitter account and authorise pywws to post. Your web browser will then show a 7 digit number which you need to copy to the :py:mod:`TwitterAuth` program. If successful, your weather.ini file will now have a ``[twitter]`` section with ``secret`` and ``key`` entries. (Don't disclose these to anyone else.)"
msgstr ""

#: ../doc_src/guides/twitter.rst:26
# 893079d8f2dd4d03adc7645170de399e
msgid "Add location data (optional)."
msgstr ""

#: ../doc_src/guides/twitter.rst:28
# 8979e213253c44508d9ceb99362ee6aa
msgid "Edit your weather.ini file and add ``latitude`` and ``longitude`` entries to the ``[twitter]`` section. For example::"
msgstr ""

#: ../doc_src/guides/twitter.rst:36
# e184459bc4bc4befbe1d032945eddcf4
msgid "Create a template."
msgstr ""

#: ../doc_src/guides/twitter.rst:38
# 043a7792fab14f2db67c5ea86d0af061
msgid "Twitter messages are generated using a template, just like creating files to upload to a website. Copy the example template 'tweet.txt' to your template directory, then test it::"
msgstr ""

#: ../doc_src/guides/twitter.rst:43
# 7276aeba738f47d6944a9b473120614a
msgid "(Replace ``/data/weather`` and ``~/weather/templates`` with your data and template directories.) If you need to change the template (e.g. to change the units or language used) you can edit it now or later."
msgstr ""

#: ../doc_src/guides/twitter.rst:45
# 4f410777f8d940e48c9a8e2dbfd5138e
msgid "Post your first weather Tweet."
msgstr ""

#: ../doc_src/guides/twitter.rst:47
# 17047c7551af406eab8bc3239861ccb6
msgid "Now everything is prepared for :py:mod:`pywws.ToTwitter` to be run::"
msgstr ""

#: ../doc_src/guides/twitter.rst:51
# 026c8159e8cf45a49509a067ac9b54fc
msgid "If this works, your new Twitter account will have posted its first weather report. (You should delete the tweet.txt file now.)"
msgstr ""

#: ../doc_src/guides/twitter.rst:53
# 163f2fbe435449b7b3162fb8ee8899cc
msgid "Add Twitter updates to your hourly tasks."
msgstr ""

#: ../doc_src/guides/twitter.rst:55
# 08e48b5d0b564d46a0052a1c18246345
msgid "Edit your weather.ini file and edit the ``[hourly]`` section. For example::"
msgstr ""

#: ../doc_src/guides/twitter.rst:63
# bd47bd5b123e43d8a35f6bb0d155dc04
msgid "You could change the ``[logged]``, ``[12 hourly]`` or ``[daily]`` sections instead, but I think ``[hourly]`` is most appropriate for Twitter updates."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:2
# da41c14ff543460d8669c8cd42aaa4d5
msgid "weather.ini - configuration file format"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:4
# dce33b5fb5a041759de14c208bae530f
msgid "Nearly all configuration of pywws is via a single file in the data directory: weather.ini. This file has a structure similar to that of Microsoft Windows INI files. It is divided into \"sections\", each of which has a number of \"name = value\" entries. The order in which sections appear is not important."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:10
# b0b3adddc6eb4fdaaed2d1d14375bdc3
msgid "Some entries in the file are set by pywws, while others need to be edited by the user. Any plain text editor can be used to do this. (Don't try to edit the file while any other pywws software is running.) In many cases pywws will initialise the entries to sensible values."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:15
# bc046846e97c4eaebbb94faafc0f875a
msgid "The following sections are currently in use:"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:17
# d1ada4ce6b724d3fbaa0d3d9e7f00809
msgid "config: miscellaneous system configuration."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:18
# 07eccd17e7af433dbc426023b19c4aed
msgid "paths: directories in which templates etc. are stored."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:19
# 3d383a5596454926991840dc9a1d5d06
msgid "fixed: values copied from the weather station's \"fixed block\"."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:20
# 49377383a59943259bab722586567da8
msgid "live: tasks to be done every 48 seconds."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:21
# c4a5572312194174a5efc83fc2c6a737
msgid "logged: tasks to be done every time the station logs a data record."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:22
# ca5ddbd4f94443ee98599df109db1c58
msgid "hourly: tasks to be done every hour."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:23
# f72ae56eec3f4321b7268f870acc9d08
msgid "12 hourly: tasks to be done every 12 hours."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:24
# 6fddad927c624b3ba352db81c2f42660
msgid "daily: tasks to be done every day."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:25
# f868bab87cf5468691fe71848beefb39
msgid "ftp: configuration of uploading to a website."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:26
# 0710dda23c384de6a7bb797defb67c97
msgid "twitter: configuration of posting to Twitter."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:27
# 35ee4022212e4539a2a9d2df358a585f
msgid "underground, metoffice, temperaturnu etc: configuration of posting to 'services'."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:30
# 9db18bfd9cac46b489c64e6739c3973f
msgid "config: miscellaneous system configuration"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:39
# 1ffb0a73bdb44cdb9f6e37245249d088
msgid "``day end hour`` is the end of the \"`meteorological day <http://en.wikipedia.org/wiki/Meteorological_day>`_\", in local time without daylight savings time. Typical values are 21, 9, or 24."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:41
# a9fb4f13c0cc42e9922d0031b271c9bd
msgid "``gnuplot encoding`` is the text encoding used when plotting graphs. The default value of ``iso_8859_1`` allows the degree symbol, which is useful in a weather application! Other values might be needed if your language includes accented characters. The possible values depend on your gnuplot installation so some experimentation may be needed."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:43
# 273b01693d9b45fab285d89e3fd1c009
msgid "``language`` is used to localise pywws. It's optional, as pywws usually uses the computer's default language as set by the LANG environment variable. The available languages are those in the ``locale`` subdirectory of your pywws installation. If you set any other language, pywws will fall back to using English."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:45
# 880bdd3227d84d01b81dac4e355579e8
msgid "``logdata sync`` sets the quality of synchronisation used by :doc:`../api/pywws.LogData`. Set it to 0 for fast & inaccurate or 1 for slower but precise."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:48
# a683978495c34a6197f9bbb41a1cb212
msgid "paths: directories in which templates etc. are stored"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:57
# 53c9a5ca8b4744a5ac1c8c230a4380d7
msgid "These three entries specify where your text templates and graph templates are stored, where temporary files should be created, and (if you have one) the location of your calibration module."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:60
# 76f30fefd525491e99325f11e9b5ab4e
msgid "fixed: values copied from the weather station's \"fixed block\""
msgstr ""

#: ../doc_src/guides/weather_ini.rst:67
# 998de9ee51054f8ca13d0264158fb97c
msgid "This section is written by pywws and should not be edited."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:70
# 630ebb77d63747fc84da885ca4991871
msgid "live: tasks to be done every 48 seconds"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:80
# b3b8e8ca73b4437d93c0b47c358688d3
msgid "This section specifies tasks that are to be carried out for every data sample during 'live logging', i.e. every 48 seconds. It is unlikely that you'd want to do anything other than upload to Weather Underground or update your YoWindow file this often."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:82
#: ../doc_src/guides/weather_ini.rst:102
#: ../doc_src/guides/weather_ini.rst:120
#: ../doc_src/guides/weather_ini.rst:138
#: ../doc_src/guides/weather_ini.rst:156
# dc353e8450124231b612cf6b51ec90c6
# 4835903f4767434d8dc34124ea8db42c
# 065db61e02054234823a3ae2fc7cdf37
# b3ca64d7788d4e808893ee337eaaab1c
# 58adc73ee65e4bd4838a64095e335ae8
msgid "``services`` is a list of 'services' to upload data to. Each one listed must have a configuration file in ``pywws/services/``. See :doc:`../api/pywws.toservice` for more detail."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:84
#: ../doc_src/guides/weather_ini.rst:104
#: ../doc_src/guides/weather_ini.rst:122
#: ../doc_src/guides/weather_ini.rst:140
#: ../doc_src/guides/weather_ini.rst:158
# 0e4b0025f9a54e81b0ec57d908509e99
# cbe347b39b284973b5735e85c2fa6fed
# 17a99dd47ac84341bebeb3809cdc518c
# 09141ffb41a949c3a93aaa98a094f0ec
# 5960220ea2834a48b254670dab00cb40
msgid "``twitter`` is a list of text templates to be processed and posted to Twitter."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:86
#: ../doc_src/guides/weather_ini.rst:106
#: ../doc_src/guides/weather_ini.rst:124
#: ../doc_src/guides/weather_ini.rst:142
#: ../doc_src/guides/weather_ini.rst:160
# 85a70286bcf047cea18d0c8f0088641d
# 0d36c26b3da64772933906fd6dc95bb3
# 0531d895937a435e882b2562f7039fa6
# 57eb953f6c1b48139e3be3bc08329d48
# 75ef1ba71406452d81e26b932d693fa8
msgid "``text`` and ``plot`` are lists of text and plot templates to be processed and uploaded to your website."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:88
# de91f71903f44b208eebffd3989907bf
msgid "``yowindow`` is the full path of an xml file to be generated for a YoWindow weather widget (see http://yowindow.com/). If you don't use YoWindow, leave this entry out."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:91
# 795ca7b1c9c14d0abe7c02db5a3e0cc0
msgid "logged: tasks to be done every time the station logs a data record"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:100
# 577f99e9337b467c90476b94f2319b02
msgid "This section specifies tasks that are to be carried out every time a data record is logged when 'live logging' or every time an hourly cron job is run."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:109
# 0ded6ece52e4498eb63eb0ad81a1696b
msgid "hourly: tasks to be done every hour"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:118
# ffba2ca2657b460f977a92e58ccaa0f7
msgid "This section specifies tasks that are to be carried out every hour when 'live logging' or running an hourly cron job."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:127
# 69ab649094f748f8ab6f274ced7ff927
msgid "12 hourly: tasks to be done every 12 hours"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:136
# cc4a1f4003ff4efaaa4cf7f07998ee50
msgid "This section specifies tasks that are to be carried out every 12 hours when 'live logging' or running an hourly cron job. Use it for things that don't change very often, such as monthly graphs."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:145
# 8902317bacdc42c88ce88b7dff743b55
msgid "daily: tasks to be done every 24 hours"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:154
# 6004bb2170ea45d6bd41f0c90d80d804
msgid "This section specifies tasks that are to be carried out every day when 'live logging' or running an hourly cron job. Use it for things that don't change very often, such as monthly or yearly graphs."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:163
# 6155b498a90d471ea0862136c88a546d
msgid "ftp: configuration of uploading to a website"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:174
# e98957b90ddf42eba39dd1d89361593b
msgid "These entries provide details of your website (or local directory) where processed text files and graph images should be transferred to."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:176
# c187b98cc8c34e79bc1478566c9d0798
msgid "``local site`` specifies whether the files should be copied to a local directory or sent to a remote site. You may want to set this if you run your web server on the same machine as you are running pywws on."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:178
# 8290864ffd7b41fe9faab9c9835b45f8
msgid "``secure`` specifies whether to transfer files using SFTP (secure FTP) instead of the more common FTP. Your web site provider should be able to tell you if you can use SFTP."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:180
# 7c433e1184c34654918386eabb3353d4
msgid "``site`` is the web address of the FTP site to transfer files to."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:182
# 132841e4f90644b6a643374702a551c8
msgid "``user`` and ``password`` are the FTP site login details. Your web site provider should have provided them to you."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:184
# 6db5d71e4d894690b8daa1f1f54ee7cc
msgid "``directory`` specifies where on the FTP site (or local file system) the files should be stored. Note that you may have to experiment with this a bit - you might need a '/' character at the start of the address."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:187
# c94ab13224084e36b43aa01482ed63fa
msgid "twitter: configuration of posting to Twitter"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:196
# f71d7bb87ca947ddac80b1f8457a3e64
msgid "``secret`` and ``key`` are authentication data provided by Twitter. To set them, run the ``TwitterAuth.py`` program."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:198
# 22bd08be0e9d4a48be914984931c58c4
msgid "``latitude`` and ``longitude`` are optional location data. If you include them then your weather station tweets will have location information so users can see where your weather station is. It might also enable people to find your weather station tweets if they search by location."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:201
# 3ded9565e1164bae98baac8128eb0167
msgid "underground, metoffice, temperaturnu etc: configuration of posting to 'services'"
msgstr ""

#: ../doc_src/guides/weather_ini.rst:209
# 00d967e86fde4c248645667c32f24b9c
msgid "These sections contain information such as passwords and station IDs needed to upload data to weather services. The names of the data entries depend on the service. The example shown is for Weather Underground."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:211
# cb55851a2c2944378add768c832ec78d
msgid "``station`` is the PWS ID allocated to your weather station by Weather Underground."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:213
# ca3692d7b0104040885b6514474ffd29
msgid "``password`` is your Weather Underground password."
msgstr ""

#: ../doc_src/guides/weather_ini.rst:215
# f52571723a9f44ba8075ccf7102145f6
msgid "``last update`` is set by pywws when you upload to a weather service."
msgstr ""

