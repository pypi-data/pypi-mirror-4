# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spk', [dirname(__file__)])
        except ImportError:
            import _spk
            return _spk
        if fp is not None:
            try:
                _mod = imp.load_module('_spk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spk = swig_import_helper()
    del swig_import_helper
else:
    import _spk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


BUFFER_SIZE = _spk.BUFFER_SIZE
HIGH_VALUE = _spk.HIGH_VALUE
LOW_VALUE = _spk.LOW_VALUE
IRQ_SPK_IN = _spk.IRQ_SPK_IN
SPK_PIN_COUNT = _spk.SPK_PIN_COUNT
class spk_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spk_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spk_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["irq"] = _spk.spk_t_irq_set
    __swig_getmethods__["irq"] = _spk.spk_t_irq_get
    if _newclass:irq = _swig_property(_spk.spk_t_irq_get, _spk.spk_t_irq_set)
    __swig_setmethods__["avr"] = _spk.spk_t_avr_set
    __swig_getmethods__["avr"] = _spk.spk_t_avr_get
    if _newclass:avr = _swig_property(_spk.spk_t_avr_get, _spk.spk_t_avr_set)
    __swig_setmethods__["buffer"] = _spk.spk_t_buffer_set
    __swig_getmethods__["buffer"] = _spk.spk_t_buffer_get
    if _newclass:buffer = _swig_property(_spk.spk_t_buffer_get, _spk.spk_t_buffer_set)
    __swig_setmethods__["last_value"] = _spk.spk_t_last_value_set
    __swig_getmethods__["last_value"] = _spk.spk_t_last_value_get
    if _newclass:last_value = _swig_property(_spk.spk_t_last_value_get, _spk.spk_t_last_value_set)
    __swig_setmethods__["overrun"] = _spk.spk_t_overrun_set
    __swig_getmethods__["overrun"] = _spk.spk_t_overrun_get
    if _newclass:overrun = _swig_property(_spk.spk_t_overrun_get, _spk.spk_t_overrun_set)
    __swig_setmethods__["start_cycle"] = _spk.spk_t_start_cycle_set
    __swig_getmethods__["start_cycle"] = _spk.spk_t_start_cycle_get
    if _newclass:start_cycle = _swig_property(_spk.spk_t_start_cycle_get, _spk.spk_t_start_cycle_set)
    __swig_setmethods__["freq_scale"] = _spk.spk_t_freq_scale_set
    __swig_getmethods__["freq_scale"] = _spk.spk_t_freq_scale_get
    if _newclass:freq_scale = _swig_property(_spk.spk_t_freq_scale_get, _spk.spk_t_freq_scale_set)
    def __init__(self): 
        this = _spk.new_spk_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spk.delete_spk_t
    __del__ = lambda self : None;
spk_t_swigregister = _spk.spk_t_swigregister
spk_t_swigregister(spk_t)


def spk_core_init(*args):
  return _spk.spk_core_init(*args)
spk_core_init = _spk.spk_core_init

def spk_reset(*args):
  return _spk.spk_reset(*args)
spk_reset = _spk.spk_reset

def spk_read(*args):
  return _spk.spk_read(*args)
spk_read = _spk.spk_read

def spk_buffer_ready(*args):
  return _spk.spk_buffer_ready(*args)
spk_buffer_ready = _spk.spk_buffer_ready
# This file is compatible with both classic and new-style classes.


