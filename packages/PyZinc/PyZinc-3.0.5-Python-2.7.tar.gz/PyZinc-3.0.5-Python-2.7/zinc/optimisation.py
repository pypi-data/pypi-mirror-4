# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_optimisation', [dirname(__file__)])
        except ImportError:
            import _optimisation
            return _optimisation
        if fp is not None:
            try:
                _mod = imp.load_module('_optimisation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _optimisation = swig_import_helper()
    del swig_import_helper
else:
    import _optimisation
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import field
import differentialoperator
import element
import node
import stream
import fieldmodule
import timesequence
import fieldcache
class Optimisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimisation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _optimisation.new_Optimisation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _optimisation.delete_Optimisation
    __del__ = lambda self : None;
    def isValid(self): return _optimisation.Optimisation_isValid(self)
    METHOD_INVALID = _optimisation.Optimisation_METHOD_INVALID
    METHOD_QUASI_NEWTON = _optimisation.Optimisation_METHOD_QUASI_NEWTON
    METHOD_LEAST_SQUARES_QUASI_NEWTON = _optimisation.Optimisation_METHOD_LEAST_SQUARES_QUASI_NEWTON
    ATTRIBUTE_FUNCTION_TOLERANCE = _optimisation.Optimisation_ATTRIBUTE_FUNCTION_TOLERANCE
    ATTRIBUTE_GRADIENT_TOLERANCE = _optimisation.Optimisation_ATTRIBUTE_GRADIENT_TOLERANCE
    ATTRIBUTE_STEP_TOLERANCE = _optimisation.Optimisation_ATTRIBUTE_STEP_TOLERANCE
    ATTRIBUTE_MAXIMUM_ITERATIONS = _optimisation.Optimisation_ATTRIBUTE_MAXIMUM_ITERATIONS
    ATTRIBUTE_MAXIMUM_FUNCTION_EVALUATIONS = _optimisation.Optimisation_ATTRIBUTE_MAXIMUM_FUNCTION_EVALUATIONS
    ATTRIBUTE_MAXIMUM_STEP = _optimisation.Optimisation_ATTRIBUTE_MAXIMUM_STEP
    ATTRIBUTE_MINIMUM_STEP = _optimisation.Optimisation_ATTRIBUTE_MINIMUM_STEP
    ATTRIBUTE_LINESEARCH_TOLERANCE = _optimisation.Optimisation_ATTRIBUTE_LINESEARCH_TOLERANCE
    ATTRIBUTE_MAXIMUM_BACKTRACK_ITERATIONS = _optimisation.Optimisation_ATTRIBUTE_MAXIMUM_BACKTRACK_ITERATIONS
    ATTRIBUTE_TRUST_REGION_SIZE = _optimisation.Optimisation_ATTRIBUTE_TRUST_REGION_SIZE
    def getId(self): return _optimisation.Optimisation_getId(self)
    def getMethod(self): return _optimisation.Optimisation_getMethod(self)
    def setMethod(self, *args): return _optimisation.Optimisation_setMethod(self, *args)
    def getAttributeInteger(self, *args): return _optimisation.Optimisation_getAttributeInteger(self, *args)
    def setAttributeInteger(self, *args): return _optimisation.Optimisation_setAttributeInteger(self, *args)
    def getAttributeReal(self, *args): return _optimisation.Optimisation_getAttributeReal(self, *args)
    def setAttributeReal(self, *args): return _optimisation.Optimisation_setAttributeReal(self, *args)
    def getFirstIndependentField(self): return _optimisation.Optimisation_getFirstIndependentField(self)
    def getNextIndependentField(self, *args): return _optimisation.Optimisation_getNextIndependentField(self, *args)
    def addIndependentField(self, *args): return _optimisation.Optimisation_addIndependentField(self, *args)
    def removeIndepdentField(self, *args): return _optimisation.Optimisation_removeIndepdentField(self, *args)
    def getFirstObjectiveField(self): return _optimisation.Optimisation_getFirstObjectiveField(self)
    def getNextObjectiveField(self, *args): return _optimisation.Optimisation_getNextObjectiveField(self, *args)
    def addObjectiveField(self, *args): return _optimisation.Optimisation_addObjectiveField(self, *args)
    def removeObjectiveField(self, *args): return _optimisation.Optimisation_removeObjectiveField(self, *args)
    def getSolutionReport(self): return _optimisation.Optimisation_getSolutionReport(self)
    def optimise(self): return _optimisation.Optimisation_optimise(self)
Optimisation_swigregister = _optimisation.Optimisation_swigregister
Optimisation_swigregister(Optimisation)



