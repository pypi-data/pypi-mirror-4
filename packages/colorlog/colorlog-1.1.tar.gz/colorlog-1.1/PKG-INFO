Metadata-Version: 1.1
Name: colorlog
Version: 1.1
Summary: Log formatting with colors!
Home-page: https://github.com/borntyping/colorlog
Author: Sam Clements
Author-email: sam@borntyping.co.uk
License: Copyright (c) 2012 Sam Clements <sam@borntyping.co.uk>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Description: ===========================
        Log formatting with colors!
        ===========================
        
        ``colorlog.ColoredFormatter`` is a formatter for use with pythons logging module.
        
        It allows colors to be placed in the format string, which is mostly useful when paired with a StreamHandler that is outputting to a terminal. This is accomplished by added a set of terminal color codes to the record before it is used to format the string.
        
        Usage
        =====
        
        ``ColoredFormatter`` requires at minumum a format string, and takes two options - ``reset`` (implictly add a reset  code at the end of message strings, defaults to true) and ``color_levels`` (a mapping of record level names to color names, defaults to ``colorlog.DEFAULT_COLOR_LEVELS``).
        
        ::
        
        	from colorlog import ColoredFormatter
        
        	formatstring = "%(bg_level)s%(levelname)-8s%(reset)s %(blue)%(message)s"
        
        	levels = {
        		'DEBUG':    'cyan',
        		'INFO':     'green',
        		'WARNING':  'yellow',
        		'ERROR':    'red',
        		'CRITICAL': 'red',
        	}
        
        	formatter = ColoredFormatter(formatstring, reset=True, color_levels=levels)
        
        The formatter can then be used in a normal ``logging`` setup.
        
        Codes
        =====
        
        The following values are made availible for use in the format string:
        
          - ``fg_{colorname}``, ``bg_{colorname}``: Foreground and background colors. The colors names are ``black``, ``red``, ``green``, ``yellow``, ``blue``, ``purple``, ``cyan`` and ``white``.
          - ``bold``: Bold output.
          - ``reset``: Clear all formatting (both foreground and background colors).
          - ``fg_level``, ``bg_level``: Return the color associated with the records level (from ``color_levels``).
        
        Compatibility
        =============
        
        `colorlog`` should work with both Python 2 and 3. At a minimum, it's been tested on Python 2.7 and 3.2.
        
        Licence
        =======
        
        ``colorlog`` is distributed under the MIT Licence.
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Terminals
Classifier: Topic :: Utilities
