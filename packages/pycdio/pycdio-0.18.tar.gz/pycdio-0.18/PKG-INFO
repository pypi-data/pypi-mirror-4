Metadata-Version: 1.1
Name: pycdio
Version: 0.18
Summary: Python OO interface to libcdio (CD Input and Control library)
Home-page: http://www.gnu.org/software/libcdio
Author: Rocky Bernstein
Author-email: rocky@gnu.org
License: GPL
Description: pycdio is a Python interface to the CD Input and Control library
        (libcdio).  You can get the source at the same place as libcdio:
          ftp://ftp.gnu.org:/pub/gnu/libcdio/pycdio-*
        
        The pycdio (and libcdio) libraries encapsulate CD-ROM reading and
        control. Python programs wishing to be oblivious of the OS- and
        device-dependent properties of a CD-ROM can use this library.
        
        - - - 
        Requirements: 
           You'll need a C compiler so the extension can be compiled when it is
        installed. 
        
           You'll also need libcdio
        (http://www.gnu.org/software/libcdio) and it's header files installed.
        
           You'll also need SWIG (http://www.swig.org).
        
           Finally you'll need pkg-config (http://pkg-config.freedesktop.org)
        
        To build on Debian (e.g. Ubuntu);   
           apt-get install python-dev
           apt-get install libcdio-dev
           apt-get install libiso9660-dev
           apt-get install swig pkg-config
        
        - - - 
        
        libcdio is rather large and yet may still grow a bit. (UDF support in
        libcdio may be on the horizon.)
        
        What is in pycdio is incomplete; over time it may grow to completion
        depending on various factors: e.g. interest, whether others help
        out.
        
        Sections of libcdio that are currently missing are the (SCSI) MMC
        commands, and the cdparanoia library. Of the audio controls, I put in
        those things that didn't require any thought. The ISO 9660 library is
        pretty complete, except file "stat" information which is at present is
        pretty minimal.
        
        That said, what's in there is very usable (It contains probably more
        access capabilities than what most media players that don't use
        libcdio have.)
        
        The encapsulation by SWIG is done in two parts. The lower-level python
        interface is called pycdio and is generated by SWIG.
        
        The more object-oriented module is cdio; it is a Python class that
        uses pycdio. Although pycdio is perfectly usable on its own, it is
        expected that cdio is what most people will use. As pycdio more
        closely models the C interface, it is conceivable (if unlikely) that
        diehard libcdio C users who are very familiar with that interface
        could prefer that.
        
        It is probably possible to change the SWIG in such a way to combine
        these pieces. However there are the problems. First, I'm not that much
        of a SWIG expert. Second it looks as though the resulting SWIG code
        would be more complex. Third the separation makes translation very
        straight forward to understand and maintain: first get what's in C
        into Python as a one-to-one translation. Then we implement some nice
        abstraction off of that. The abstraction can be modified without
        having to redo the underlying translation. (But the reverse is
        generally not true: usually changes to the C-to-python translation,
        pycdio, do result in small, but obvious and straightforward changes to
        the abstraction layer cdio.)
        
        There is much to be done - you want to help out, please do so!
        
        Standalone documentation is missing although many of the methods,
        classes and functions have some document strings. See also the
        programs in the example directory.
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Programming Language :: Python
