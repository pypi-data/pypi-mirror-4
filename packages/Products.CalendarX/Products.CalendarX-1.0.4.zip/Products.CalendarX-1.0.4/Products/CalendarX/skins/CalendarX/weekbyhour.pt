<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
      lang="en-US"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

<head>
  <metal:block fill-slot="top_slot"
                 tal:define="dummy python:request.set('disable_border', 1)" />
  <metal:block fill-slot="style_slot">
    <!-- NOTE: order is important for these CSS style sheets. -->
    <!-- Import COMMON CALENDAR CSS style sheet. -->
    <LINK href="calendar.css" type=text/css rel=stylesheet 
          tal:attributes="href string:calendar.css"/>
    <!-- Import VIEW-SPECIFIC CSS style sheet. -->
    <!-- UNIQUE FOR EACH CALENDAR VIEW. -->
    <LINK href="weekbyhour.css" type=text/css rel=stylesheet 
          tal:attributes="href string:weekbyhour.css"/>
    <!-- Import PRINTING CSS style sheet -->
    <LINK href="calendarPrint.css" type="text/css" media="print" rel="stylesheet" 
          tal:attributes="href string:calendarPrint.css" />
    <!-- Import COMMON JavaScript files (one for basic dhtml-functions, the other for calendar-application specific functions. -->
    <script type="text/javascript" src="dhtml.js" 
          tal:attributes="src string:dhtml.js"></script>
    <script type="text/javascript" src="calendar.js" 
          tal:attributes="src string:calendar.js"></script>
    <!-- Set VIEW-SPECIFIC JS parameter -->
    <script type="text/javascript">
<!--
    setMax(336);
-->
    </script>
  </metal:block>
</head>   

<body>
<!-- Defining global variables -->
<div metal:fill-slot="main"
       i18n:domain="calendarx"
       tal:define="
                 MODIFIED string:mod for 0.6.6 to use  tal:omit-tag in i18n date strings;
                 viewname string:weekbyhour;
                 context python:here;
                 DateTime python:modules['DateTime'].DateTime; 
                 Dict python:here.getDictWeekbyhour();
                 url here/absolute_url;
                 ampm Dict/ampm;
                 weekviewstarthour Dict/weekviewstarthour;
                 weekviewendhour Dict/weekviewendhour;
                 xmy Dict/xmy;
                 xsub Dict/xsub;
                 xpub Dict/xpub;
                 xcrt Dict/xcrt;
                 currentDate Dict/currentDate;
                 startDate Dict/startDate;
                 endDate Dict/endDate;
                 stForQuery Dict/stForQuery;
                 enForQuery Dict/enForQuery;
                 useHalfHours           python: here.getCXAttribute('useHalfHours');
                 periodFactor           python: test(useHalfHours,2,1);
                 showHighlightFullEvent python: here.getCXAttribute('showHighlightFullEvent');
                 useSubjectIcons        python: here.getCXAttribute('useSubjectIcons');
                 useSubjCSS             python: here.getCXAttribute('useSubjectCSSClasses');  
                 useEventTypeIcons      python: here.getCXAttribute('useEventTypeIcons');
                 useETCSS               python: here.getCXAttribute('useEventTypeCSSClasses');
                 bigQ             python: here.getCXEventsBetween(stForQuery, enForQuery, xmy, xsub, xpub, xcrt);
                 bigQB            python: here.getCXEventsBefore(stForQuery, xmy, xsub, xpub, xcrt, enForQuery);
                 continuingEvents python: here.getContLaterEventsWBH(bigQ,bigQB,Dict,continuing=1);
                 laterEvents      python: here.getContLaterEventsWBH(bigQ,bigQB,Dict,continuing=0);">
    

<!-- HEADSTUFF: the Title/ID, the Document Action icons (print,etc), and Description -->
<metal:block metal:use-macro="python:here.getCXMacro('headstuff')"/>


<!-- the main table -->
<table cellspacing="0" class="caltabs">


<!-- ROW: the tabs "month", "week", "week2", "day" -->
<metal:block metal:use-macro="python:here.getCXMacro('caltabsforviews')"/>


<!-- ROW: the "subject categories" options -->
<metal:block metal:use-macro="python:here.getCXMacro('subjectlinks')"/>


  <tr> 
    <td class="body">


<!-- "previous", "next" and current date string. -->
<metal:block metal:use-macro="python:here.getCXMacro('prevnextcurrentlinks')"/>



<table class="calall"  tal:condition="continuingEvents">
  <tr><th i18n:translate="heading_continuing_events">Continuing events, starting before this calendar begins.</th></tr>
  <tr class="noevent" 
      tal:define="
                  hourID python: 0;
                  start python: startDate;"
      tal:attributes="class python: test(continuingEvents, 'event', 'noevent');
	                  id python:'cal'+str(weekviewstarthour*periodFactor);">
    <td>
<!-- iterate through the events -->
       <metal:block tal:repeat="event continuingEvents"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${hourID}event${repeat/event/number};
                              eDict python:here.getEventDictWeekbyhour(event,type='C',cDate=currentDate);
                              eventstart  eDict/eventstart;
                              eventend  eDict/eventend;
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,context.getSubjectCSSClasses(event),'eventPrivate');   
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished'); ">

<!-- print the event text-->
<metal:block metal:use-macro="python:here.getCXMacro('eventlister')"/>

<!-- print the rollover popup text-->
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>

            </span>
       </metal:block>&nbsp;
    </td>
  </tr>
</table>




<!-- the weekbyhalfhour-calendar-view. -->
<table class="cal">
  <tr class="event" id="cal0">
    <th><span class="day" i18n:translate="heading_hour">Hour</span></th>
    <th tal:repeat="weekDay python:range(7)"
        tal:attributes="id string:calE${weekDay}">
        <a href="#" tal:define="day python:here.getStartOfDay(startDate) + weekDay;"
                       tal:attributes="href string: ${url}/day?currentDate=${day}&xmy=${xmy}&xsub=${xsub}">
          <span class="day">
            <span i18n:translate="heading_fmt_day_weekbyhour" tal:omit-tag="">
                <span i18n:name="dayName"><span i18n:translate="" tal:content="python: day.Day()" tal:omit-tag="">dayName</span></span>
                <span i18n:name="month3"><span i18n:translate="" tal:content="python: day.aMonth()+'_3'" tal:omit-tag="">month3</span></span>
                <span i18n:name="day" tal:content="python: day.day()" tal:omit-tag="">day</span>
            </span>
          </span>
        </a>
    </th>
  </tr>

<!-- iterate through the periods (start a new row (hour or halfhour) of the table) -->
  <metal:block tal:repeat="hourDay python:range(weekviewstarthour*periodFactor,weekviewendhour*periodFactor)">
  <tr tal:define="tempOnTheHour repeat/hourDay/even;
                  tempOnTheHalf repeat/hourDay/odd;
                  onTheHour python:test(useHalfHours,tempOnTheHour,True);
                  onTheHalf python:test(useHalfHours,tempOnTheHalf,False);
                  start python: DateTime(str(startDate.year())+'/'+str(startDate.month())+'/'+str(startDate.day())+' '+str(int(hourDay/periodFactor))+ test(onTheHour,':00:00',':30:00'));
                  end   python: DateTime(str(startDate.year())+'/'+str(startDate.month())+'/'+str(startDate.day())+' '+str(int(hourDay/periodFactor))+ test(onTheHour and useHalfHours,':29:59',':59:59'));" >

<metal:block metal:use-macro="python:here.getCXMacro('hoursdisplay')"/>

<!-- iterate through the days (start a new column (day) of the table) -->
    <metal:block tal:repeat="dayWeek2 python:range(7)">
    <td tal:define="
                  periodsInADay python: (weekviewendhour - weekviewstarthour)*periodFactor;
                  periodID python: (dayWeek2 * periodsInADay) + hourDay + 1;
                  startDH python: start + dayWeek2;
                  endDH python: end + dayWeek2;
                  COMMENT string: Old way:events python: here.getCXEventsBetween(startDH, endDH, xmy, xsub, xpub, xcrt);
                  events python: [ev for ev in bigQ if (ev.start >= startDH and ev.start <= endDH)];
                  COMMENT string: A one-minute time shift to make the eventsBefore query NOT find events starting in the following halfhour; 
                  COMMENT string: Old way: startForBefore python: DateTime(str(startDH.year())+'/'+str(startDH.month())+'/'+str(startDH.day())+' '+str(hourDay)+ ':01:00');
                  startForBefore python: startDH + (1.0/24.0/60.0);
                  COMMENT string: Old way: eventsBefore python: here.getCXEventsBefore(startForBefore, xmy, xsub, xpub, xcrt);
                  eventsBefore python: [ev for ev in bigQB if (ev.start < startForBefore and ev.end >= startForBefore)];
                  COMMENT string: tester determines whether to highlight full extent of events on the calendar; 
                  tester python: test(showHighlightFullEvent,(events or eventsBefore),events);"
        tal:attributes="class python:test(tester, 'event', 'noevent');
                        id string:cal${periodID}">
<!-- iterate through the events of the period -->
       <metal:block tal:repeat="event events"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${periodID}event${repeat/event/number};
                              eDict python:here.getEventDictWeekbyhour(event,type='E',periodID=periodID,cDate=currentDate);
                              eventstart  eDict/eventstart;
                              eventend  eDict/eventend;
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,context.getSubjectCSSClasses(event),'eventPrivate'); 
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished');  ">

<!-- print the event text-->
<metal:block metal:use-macro="python:here.getCXMacro('eventlister')"/>

<!-- print the rollover popup text-->
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>

            </span>
       </metal:block>&nbsp;
    </td>
    </metal:block>
  </tr>
  </metal:block>


  <tr>
    <th><span class="day" i18n:translate="heading_hour">Hour</span></th>
    <metal:block tal:repeat="weekDay python:range(7)">
    <th tal:define="
                    hoursInDay python: (weekviewendhour - weekviewstarthour)*periodFactor;
                    hoursInView python: 7*hoursInDay;
                    hourID python: weekviewstarthour*periodFactor + hoursInView + weekDay + 1;"
        tal:attributes="id string:cal${hourID}">
        <a href="#" tal:define="day python:here.getStartOfDay(startDate) + weekDay;"
                       tal:attributes="href string: ${url}/day?currentDate=${day}&xmy=${xmy}&xsub=${xsub}">
          <span class="day">
            <span i18n:translate="heading_fmt_day_weekbyhour" tal:omit-tag="">
                <span i18n:name="dayName"><span i18n:translate="" tal:content="python: day.Day()" tal:omit-tag="">dayName</span></span>
                <span i18n:name="month3"><span i18n:translate="" tal:content="python: day.aMonth()+'_3'" tal:omit-tag="">month3</span></span>
                <span i18n:name="day" tal:content="python: day.day()" tal:omit-tag="">day</span>
            </span>
          </span>
           </a>
    </th>
    </metal:block>
  </tr>
</table>






<table class="calall"  tal:condition="laterEvents">
  <tr><th i18n:translate="heading_later_events">Late Events, Starting after this calendar stops</th></tr>
  <tr class="noevent" 
      tal:define="
                  hoursInDay python: (weekviewendhour - weekviewstarthour)*periodFactor;
                  hoursInView python: 7*hoursInDay;
                  hourID python: weekviewstarthour*periodFactor + hoursInView + 1 + 7;
                  start python: startDate;"
      tal:attributes="class python: test(laterEvents, 'event', 'noevent');
	                  id string:cal${hourID}">
    <td>
<!-- iterate through the events -->
       <metal:block tal:repeat="event laterEvents"> 
            <span tal:omit-tag="" tal:define="eventID string:calinfo${hourID}event${repeat/event/number};
                              eDict python:here.getEventDictWeekbyhour(event,type='L',cDate=currentDate);
                              eventstart python: DateTime(str(event.start));
                              eventend python: DateTime(str(event.end));
                              jsStart eDict/jsStart;
                              jsEnd eDict/jsEnd; 
                              eventurl eDict/eventurl;
                              eventState eDict/eventState;
                              eventtitle eDict/eventtitle;
                              portaltype eDict/portaltype;
                              syear eDict/syear ;
                              smonth eDict/smonth ;
                              sday eDict/sday ;
                              stime eDict/stime ;
                              eyear eDict/eyear ;
                              emonth eDict/emonth ;
                              eday eDict/eday ;
                              etime eDict/etime ;
                              eventstring string:${eDict/eventstring};
                              classstate python: test(eventState == 'private', 'eventPrivate', test(eventState == 'published', 'eventPublished', test(eventState == 'visible', 'eventVisible', 'eventPending')));  
                              classsubject python:test(useSubjCSS,context.getSubjectCSSClasses(event),'eventPrivate');  
                              classeventtype python:test(useETCSS,here.getEventTypeCSSClasses(event,type=portaltype),'eventPublished'); ">

<!-- print the event text-->
<metal:block metal:use-macro="python:here.getCXMacro('eventlister')"/>

<!-- print the rollover popup text-->
<metal:block metal:use-macro="python:here.getCXMacro('popuptextbox')"/>

            </span>
       </metal:block>&nbsp;
    </td>
  </tr>
</table>





<!-- "previous", "next" and current date string. -->
<metal:block metal:use-macro="python:here.getCXMacro('prevnextcurrentlinks_nojump')"/>



    </td>
  </tr>
</table>


<metal:block metal:use-macro="python:here.getCXMacro('copyright')"/>

</div>


</body>
</html>


