NEXT
----

setup.py
- package_data={package.__name__: ['LICENSE', 'static/*', 'templates/*']},
- (?) include_package_data=True
- (?) classifiers=[
        'Development Status :: 4 - Beta',
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.5',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
        'Topic :: Software Development :: Libraries :: Python Modules'
    ],


* `Documentation <http://gitpress.com/docs>`_


"For more API examples check out the "examples" directory."


"A Gollum repository's contents are designed to be human editable"


Next steps: Presenting
- Hosting
- The CLI
  - Preprocessing
  - Compiling
  - Serving?
    -> Generates a static site each time you deploy, allowing you to dynamically handle requests as needed
    -> Listens for deploys

- The Python API
  - Pull blog content from repository
  - Callbacks for dynamic behavior
  - Render with themes and layout
  - Retrieve blog posts
  - Listen for deploys
  - Full server (?)


"Contributing" section


"Requirements" section


`gitpress present <command>`


"The configuration is also environment-based."


<table>
    <thead>
        <th>Environment Variable</th>
        <th>Default</th>
        <th>Description</th>
    </thead>
    <tbody>
        <tr>
            <td><code>GITPRESS_HOST</code></td>
            <td>5000</td>
            <td>The host address to serve Gitpress with.</td>
        </tr>
        <tr>
            <td><code>GITPRESS_PORT</code></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>



There's no command-line interface to fully serve a Gitpress website. This
is because the server requires its own directory structure to pull in a Git
repository, process it, and cache or output the result. The server can also
have its own set of dependencies which will be downloaded and unpacked there.



Running a server is simple too. Listen for pushes, Gitpress handles the rest:

    gitpress listen

Keep in mind, to take advantage of optimizations, you'll need to use the API.
