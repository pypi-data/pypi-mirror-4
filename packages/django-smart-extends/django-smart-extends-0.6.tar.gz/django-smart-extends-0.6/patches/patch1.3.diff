Index: template/base.py
===================================================================
--- template/base.py	(revisión: 15906)
+++ template/base.py	(copia de trabajo)
@@ -196,6 +196,7 @@
         else:
             token = Token(TOKEN_TEXT, token_string)
         token.lineno = self.lineno
+        token.source = self.origin
         self.lineno += token_string.count('\n')
         return token
 
@@ -268,6 +269,7 @@
                 raise TemplateSyntaxError("%r must be the first tag in the template." % node)
         if isinstance(nodelist, NodeList) and not isinstance(node, TextNode):
             nodelist.contains_nontext = True
+        node.source = token.source
         nodelist.append(node)
 
     def enter_command(self, command, token):
Index: template/loader.py
===================================================================
--- template/loader.py	(revisión: 15906)
+++ template/loader.py	(copia de trabajo)
@@ -78,12 +78,21 @@
     def reload(self):
         return self.loader(self.loadname, self.dirs)[0]
 
+
+class LoaderOriginFake(object):
+
+    def __init__(self, display_name, loader, name, dirs):
+        self.name = display_name
+        self.loader, self.loadname, self.dirs = loader, name, dirs
+
+
 def make_origin(display_name, loader, name, dirs):
     if settings.TEMPLATE_DEBUG and display_name:
         return LoaderOrigin(display_name, loader, name, dirs)
     else:
-        return None
+        return LoaderOriginFake(display_name, loader, name, dirs)
 
+
 def find_template_loader(loader):
     if isinstance(loader, (tuple, list)):
         loader, args = loader[0], loader[1:]
