# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sceneviewer', [dirname(__file__)])
        except ImportError:
            import _sceneviewer
            return _sceneviewer
        if fp is not None:
            try:
                _mod = imp.load_module('_sceneviewer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sceneviewer = swig_import_helper()
    del swig_import_helper
else:
    import _sceneviewer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import scene
import region
import fieldmodule
import timesequence
import optimisation
import field
import differentialoperator
import element
import node
import stream
import fieldcache
import graphicsfilter
import graphic
import tessellation
import graphicsmaterial
class SceneViewerInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneViewerInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneViewerInput, name)
    __repr__ = _swig_repr
    INPUT_EVENT_TYPE_INVALID = _sceneviewer.SceneViewerInput_INPUT_EVENT_TYPE_INVALID
    INPUT_EVENT_TYPE_MOTION_NOTIFY = _sceneviewer.SceneViewerInput_INPUT_EVENT_TYPE_MOTION_NOTIFY
    INPUT_EVENT_TYPE_BUTTON_PRESS = _sceneviewer.SceneViewerInput_INPUT_EVENT_TYPE_BUTTON_PRESS
    INPUT_EVENT_TYPE_BUTTON_RELEASE = _sceneviewer.SceneViewerInput_INPUT_EVENT_TYPE_BUTTON_RELEASE
    INPUT_EVENT_TYPE_KEY_PRESS = _sceneviewer.SceneViewerInput_INPUT_EVENT_TYPE_KEY_PRESS
    INPUT_EVENT_TYPE_KEY_RELEASE = _sceneviewer.SceneViewerInput_INPUT_EVENT_TYPE_KEY_RELEASE
    def __init__(self, *args): 
        this = _sceneviewer.new_SceneViewerInput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sceneviewer.delete_SceneViewerInput
    __del__ = lambda self : None;
    def isValid(self): return _sceneviewer.SceneViewerInput_isValid(self)
    def getId(self): return _sceneviewer.SceneViewerInput_getId(self)
    def setPosition(self, *args): return _sceneviewer.SceneViewerInput_setPosition(self, *args)
    def setButtonNumber(self, *args): return _sceneviewer.SceneViewerInput_setButtonNumber(self, *args)
    def setType(self, *args): return _sceneviewer.SceneViewerInput_setType(self, *args)
SceneViewerInput_swigregister = _sceneviewer.SceneViewerInput_swigregister
SceneViewerInput_swigregister(SceneViewerInput)

class SceneViewer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneViewer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneViewer, name)
    __repr__ = _swig_repr
    BUFFERING_MODE_ANY = _sceneviewer.SceneViewer_BUFFERING_MODE_ANY
    BUFFERING_MODE_SINGLE = _sceneviewer.SceneViewer_BUFFERING_MODE_SINGLE
    BUFFERING_MODE_DOUBLE = _sceneviewer.SceneViewer_BUFFERING_MODE_DOUBLE
    BUFFERING_MODE_RENDER_OFFSCREEN_AND_COPY = _sceneviewer.SceneViewer_BUFFERING_MODE_RENDER_OFFSCREEN_AND_COPY
    BUFFERING_MODE_RENDER_OFFSCREEN_AND_BLEND = _sceneviewer.SceneViewer_BUFFERING_MODE_RENDER_OFFSCREEN_AND_BLEND
    STEREO_MODE_ANY = _sceneviewer.SceneViewer_STEREO_MODE_ANY
    STEREO_MODE_MONO = _sceneviewer.SceneViewer_STEREO_MODE_MONO
    STEREO_MODE_STEREO = _sceneviewer.SceneViewer_STEREO_MODE_STEREO
    def __init__(self, *args): 
        this = _sceneviewer.new_SceneViewer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sceneviewer.delete_SceneViewer
    __del__ = lambda self : None;
    def isValid(self): return _sceneviewer.SceneViewer_isValid(self)
    def getId(self): return _sceneviewer.SceneViewer_getId(self)
    def setScene(self, *args): return _sceneviewer.SceneViewer_setScene(self, *args)
    def renderScene(self): return _sceneviewer.SceneViewer_renderScene(self)
    def setGraphicsBufferWidth(self, *args): return _sceneviewer.SceneViewer_setGraphicsBufferWidth(self, *args)
    def setGraphicsBufferHeight(self, *args): return _sceneviewer.SceneViewer_setGraphicsBufferHeight(self, *args)
    def setViewportSize(self, *args): return _sceneviewer.SceneViewer_setViewportSize(self, *args)
    def getInput(self): return _sceneviewer.SceneViewer_getInput(self)
    def setInput(self, *args): return _sceneviewer.SceneViewer_setInput(self, *args)
    def viewAll(self): return _sceneviewer.SceneViewer_viewAll(self)
SceneViewer_swigregister = _sceneviewer.SceneViewer_swigregister
SceneViewer_swigregister(SceneViewer)

class SceneViewerPackage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneViewerPackage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneViewerPackage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sceneviewer.new_SceneViewerPackage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sceneviewer.delete_SceneViewerPackage
    __del__ = lambda self : None;
    def isValid(self): return _sceneviewer.SceneViewerPackage_isValid(self)
    def getId(self): return _sceneviewer.SceneViewerPackage_getId(self)
    def createSceneViewer(self, *args): return _sceneviewer.SceneViewerPackage_createSceneViewer(self, *args)
SceneViewerPackage_swigregister = _sceneviewer.SceneViewerPackage_swigregister
SceneViewerPackage_swigregister(SceneViewerPackage)

# This file is compatible with both classic and new-style classes.


