Metadata-Version: 1.1
Name: Fiona
Version: 0.12.1
Summary: Fiona reads and writes spatial data files
Home-page: http://github.com/Toblerity/Fiona
Author: Sean Gillies
Author-email: sean.gillies@gmail.com
License: BSD
Description: =====
        Fiona
        =====
        
        Fiona is OGR's neat, nimble, no-nonsense API.
        
        Fiona provides a minimal, uncomplicated Python interface to the open source GIS
        community's most trusted geodata access library and integrates readily with
        other Python GIS packages such as pyproj_, Rtree_, and Shapely_.
        
        How minimal? Fiona can read feature records as mappings from shapefiles or
        other GIS vector formats and write mappings as records to files using the same
        formats. That's all. There aren't any feature or geometry classes. Records and
        their geometries are just data.
        
        For more details, see:
        
        * Fiona `home page <https://github.com/Toblerity/Fiona>`__
        * Fiona `docs and manual <http://toblerity.github.com/fiona/>`__
        * Fiona `examples <https://github.com/Toblerity/Fiona/tree/master/examples>`__
        
        Dependencies
        ============
        
        Fiona requires Python 2.6+ and libgdal 1.8+. To build from a source
        distribution or repository clone you will need a C compiler and GDAL and Python
        development headers and libraries. While there are no official binary
        distributions or Windows support at this time, you can find Windows installers
        at http://www.lfd.uci.edu/%7Egohlke/pythonlibs/#fiona.
        
        Installation
        ============
        
        Unix-like systems
        -----------------
        
        Assuming you're using a virtualenv (if not, skip to the 4th command) and
        GDAL/OGR libraries, headers, and `gdal-config`_ program are installed to well
        known locations on your system (via your system's package manager),
        installation is this simple::
        
          $ mkdir fiona_env
          $ virtualenv fiona_env
          $ source fiona_env/bin/activate
          (fiona_env)$ pip install Fiona
        
        If gdal-config is not available or if GDAL/OGR headers and libs aren't
        installed to a well known location, you must set include dirs, library dirs,
        and libraries options via the setup.cfg file or setup command line as shown
        below (using ``git``)::
        
          (fiona_env)$ git clone git://github.com/Toblerity/Fiona.git
          (fiona_env)$ cd Fiona
          (fiona_env)$ python setup.py build_ext -I/path/to/gdal/include -L/path/to/gdal/lib -lgdal install
        
        Windows
        -------
        
        Binary installers are available at http://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona and coming
        eventually to PyPI.
        
        Usage
        =====
        
        Records are read from and written to ``file``-like `Collection` objects. Records
        are mappings modeled on the GeoJSON format. They don't have any spatial methods
        of their own, so if you want to do anything fancy with them you will probably
        need Shapely or something like it. Here is an example of using Fiona to read
        some records from one data file, change their geometry attributes, and write
        them to a new data file.
        
        ::
        
          import fiona
        
          # Open a file for reading. We'll call this the "source."
          with fiona.open('docs/data/test_uk.shp', 'r') as source:
          
              # The file we'll write to, the "sink", must be initialized with a
              # coordinate system, a format driver name, and a record schema.
              sink_schema = source.schema.copy()
              sink_schema['geometry'] = 'Point'
              
              # Open an output file, using the same format driver and coordinate
              # reference system as the source.
              with fiona.open(
                      'test_write.shp', 'w',
                      crs=source.crs, driver=source.driver, schema=sink_schema,
                      ) as sink:
                  
                  # Process only the records intersecting a box.
                  for f in source.filter(bbox=(-5.0, 55.0, 0.0, 60.0)):
                  
                      # Get a point on the boundary of the record's geometry.
                      f['geometry'] = {
                          'type': 'Point',
                          'coordinates': f['geometry']['coordinates'][0][0]}
                      
                      # Write the record out.
                      sink.write(f)
                      
              # The sink's contents are flushed to disk and the file is closed
              # when its ``with`` block ends. This effectively executes 
              # ``sink.flush(); sink.close()``.
        
        Development and testing
        =======================
        
        Building from the source requires Cython. Tests require Nose. If the GDAL/OGR
        libraries, headers, and `gdal-config`_ program are installed to well known
        locations on your system (via your system's package manager), you can do this::
        
          (fiona_env)$ git clone git://github.com/Toblerity/Fiona.git
          (fiona_env)$ cd Fiona
          (fiona_env)$ python setup.py build_ext --inplace
          (fiona_env)$ python setup.py develop
          (fiona_env)$ python setup.py nosetests
        
        If you have a non-standard environment, you'll need to specify the include and
        lib dirs and GDAL library on the command line::
        
          (fiona_env)$ python setup.py build_ext -I/path/to/gdal/include -L/path/to/gdal/lib -lgdal develop
          (fiona_env)$ python setup.py nosetests
        
        .. _libgdal: http://www.gdal.org
        .. _pyproj: http://pypi.python.org/pypi/pyproj/
        .. _Rtree: http://pypi.python.org/pypi/Rtree/
        .. _Shapely: http://pypi.python.org/pypi/Shapely/
        .. _gdal-config: http://www.gdal.org/gdal-config.html
        
        
        Changes
        =======
        
        0.12.1 (2013-04-16)
        -------------------
        - Fix messed up linking of README in sdist (#39).
        
        0.12 (2013-04-15)
        -----------------
        - Fix broken installation of extension modules (#35).
        - Log CPL errors at their matching Python log levels.
        - Use upper case for encoding names within OGR, lower case in Python.
        
        0.11 (2013-04-14)
        -----------------
        - Cythonize .pyx files (#34).
        - Work with or around OGR's internal recoding of record data (#35).
        - Fix bug in serialization of int/float PROJ.4 params.
        
        0.10 (2013-03-23)
        -----------------
        - Add function to get the width of str type properties.
        - Handle validation and schema representation of 3D geometry types (#29).
        - Return {'geometry': None} in the case of a NULL geometry (#31).
        
        0.9.1 (2013-03-07)
        ------------------
        - Silence the logger in ogrext.so (can be overridden).
        - Allow user specification of record field encoding (like 'Windows-1252' for
          Natural Earth shapefiles) to help when OGR can't detect it.
        
        0.9 (2013-03-06)
        ----------------
        - Accessing file metadata (crs, schema, bounds) on never inspected closed files
          returns None without exceptions.
        - Add a dict of supported_drivers and their supported modes.
        - Raise ValueError for unsupported drivers and modes.
        - Remove asserts from ogrext.pyx.
        - Add validate_record method to collections.
        - Add helpful coordinate system functions to fiona.crs.
        - Promote use of fiona.open over fiona.collection.
        - Handle Shapefile's mix of LineString/Polygon and multis (#18).
        - Allow users to specify width of shapefile text fields (#20).
        
        0.8 (2012-02-21)
        ----------------
        - Replaced .opened attribute with .closed (product of collection() is always
          opened). Also a __del__() which will close a Collection, but still not to be
          depended upon.
        - Added writerecords method.
        - Added a record buffer and better counting of records in a collection.
        - Manage one iterator per collection/session.
        - Added a read-only bounds property.
        
        0.7 (2012-01-29)
        ----------------
        - Initial timezone-naive support for date, time, and datetime fields. Don't use
          these field types if you can avoid them. RFC 3339 datetimes in a string field
          are much better.
        
        0.6.2 (2012-01-10)
        ------------------
        - Diagnose and set the driver property of collection in read mode.
        - Fail if collection paths are not to files. Multi-collection workspaces are
          a (maybe) TODO.
        
        0.6.1 (2012-01-06)
        ------------------
        - Handle the case of undefined crs for disk collections.
        
        0.6 (2012-01-05)
        ----------------
        - Support for collection coordinate reference systems based on Proj4.
        - Redirect OGR warnings and errors to the Fiona log.
        - Assert that pointers returned from the ograpi functions are not NULL before
          using.
        
        0.5 (2011-12-19)
        ----------------
        - Support for reading and writing collections of any geometry type.
        - Feature and Geometry classes replaced by mappings (dicts).
        - Removal of Workspace class.
        
        0.2 (2011-09-16)
        ----------------
        - Rename WorldMill to Fiona.
        
        0.1.1 (2008-12-04)
        ------------------
        - Support for features with no geometry.
        
        
        Credits
        =======
        
        Fiona is written by:
        
        * Sean Gillies (https://github.com/sgillies)
        
        With contributions by:
        
        * Frédéric Junod (https://github.com/fredj)
        * Ariel Núñez (https://github.com/ingenieroariel)
        * Michael Weisman (https://github.com/mweisman)
        
        Fiona would not be possible without the great work of Frank Warmerdam and other
        GDAL/OGR developers.
        
        Some portions of this work were supported by a grant (for Pleiades_) from the
        U.S. National Endowment for the Humanities (http://www.neh.gov).
        
        .. _Pleiades: http://pleiades.stoa.org
        
        
Keywords: gis vector feature data
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Scientific/Engineering :: GIS
