# -*- encoding: utf-8 -*-
""" GSample GObj

.. autoclass:: GSample
    :members: start_up

"""

from ginsfsm.gobj import GObj


def ac_sample(self, event):
    self.broadcast_event('EV_OUTPUT_EVENT', data=event.data)  # echo data


GSAMPLE_FSM = {
    'event_list': (
        'EV_INPUT_EVENT:top input',
        'EV_OUTPUT_EVENT:top output',
    ),
    'state_list': (
        'ST_IDLE',
    ),
    'machine': {
        'ST_IDLE':
        (
            ('EV_INPUT_EVENT',      ac_sample,      None),
        ),
    }
}

GSAMPLE_GCONFIG = {
    'subscriber': [None, None, 0, None,
        "subcriber of all output-events."
        "Default is ``None``, i.e., the parent"
        ],

    # If some name is None then parent don't want receive it.
    'output_event_name': [str, 'EV_OUTPUT_EVENT', 0, None,
        "Name of the *sample output* event."
        " ``None`` if you want ignore the event"
        ],
}


class GSample(GObj):
    """  GSample GObj.
    A Simple gobj.

    .. ginsfsm::
       :fsm: GSAMPLE_FSM
       :gconfig: GSAMPLE_GCONFIG

    *Input-Events:*
        * :attr:`'EV_INPUT_EVENT'`: sample input event.

          Event attributes:

              * ``data``: sample event attribute.

    *Output-Events:*
        * :attr:`'EV_OUTPUT_EVENT'`: sample output event.

          Event attributes:

              * ``data``: sample event attribute.

    """
    def __init__(self):
        GObj.__init__(self, GSAMPLE_FSM, GSAMPLE_GCONFIG)

    def start_up(self):
        """ Initialization zone.
        """
        if self.subscriber is None:
            self.subscriber = self.parent
        self.subscribe_event(None, self.subscriber)
