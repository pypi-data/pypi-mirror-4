[transcodedaemon]
recipe = collective.transcode.recipe
listen_host = ${site:transcode-host}
listen_port = ${site:transcode-port}
videofolder = ${site:videofolder}
profiles = ${site:transcode-profiles}
secret = ${site:secret}
eggs = 
    collective.transcode.recipe
    collective.transcode.daemon

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${site:zeo-address}
zeo-var = ${buildout:directory}/var
blob-storage = ${zeoserver:zeo-var}/blobstorage
eggs = ZODB3
       plone.app.blob

[paster]
recipe = zc.recipe.egg
dependent-scripts = true
eggs = PasteScript
       ${uwsgi:eggs}

[uwsgi]
recipe = eqb.recipe.uwsgi
eggs =
    ${plone:eggs}
    uwsgitop
    PasteDeploy

[zserver-patch]
recipe = collective.recipe.patch
egg = Zope2==2.13.15
patches = ${buildout:directory}/patches/zserver.patch 
          ${buildout:directory}/patches/wsgipublisher.patch

[upgrade-patch]
recipe = collective.recipe.patch
egg = plone.app.upgrade==1.2
patches = ${buildout:directory}/patches/upgrade.patch

[navtree-patch]
recipe = collective.recipe.patch
egg = plone.app.layout==2.2.6
patches = ${buildout:directory}/patches/navtree.patch

[ploneftp]
recipe = unweb.recipe.ploneftp
zope_ftp_address = ${site:instance-ftp}
address = ${site:plumiftp-address}
path = /${site:portal-id}/Members/%s/videos
tmp_dir = ${buildout:directory}/var/ploneftp

############################################################################## 
# Build nginx & varnish for later configuration
##############################################################################

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
build-libxslt = true
build-libxml2 = true
static-build = true
force = false

[ngx_cache_purge]
recipe = hexagonit.recipe.download
url = http://labs.frickle.com/files/ngx_cache_purge-1.1.tar.gz
strip-top-level-dir = true

[nginx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
patches =
    ${buildout:directory}/patches/nginx-xslt.patch
    ${buildout:directory}/patches/nginx-xslt-options.patch
    ${buildout:directory}/patches/nginx-xslt-conf.patch
configure-options =
    --with-http_xslt_module
    --with-http_stub_status_module
    --with-libxml2=${buildout:directory}/parts/lxml/libxml2
    --with-libxslt=${buildout:directory}/parts/lxml/libxslt/lib
    --with-pcre=${pcre-source:location}
    --conf-path=${buildout:directory}/templates/nginx/default.conf
    --error-log-path=${buildout:directory}/var/log/main-error.log
    --pid-path=${buildout:directory}/var/main.pid
    --lock-path=${buildout:directory}/var/main.lock
    --add-module=${ngx_cache_purge:location}
environment =
    CFLAGS=-w


[pcre]
recipe = hexagonit.recipe.cmmi
url = http://ftp.exim.llorien.org/pcre/pcre-8.00.tar.gz

[pcre-source]
recipe = hexagonit.recipe.download
url = http://ftp.exim.llorien.org/pcre/pcre-8.00.tar.gz
strip-top-level-dir = true

[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}
configure-options =
    PCRE_CFLAGS=-I${buildout:directory}/parts/pcre/include
    PCRE_LIBS="-L${buildout:directory}/parts/pcre/lib -lpcre"

############################################################################## 
# Configure front-end web server
##############################################################################

[main-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/main.conf.template
output = ${buildout:directory}/templates/main.conf

##############################################################################
# Configure Varnish cache
##############################################################################

[cache-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/cache.conf.template
output = ${buildout:directory}/templates/cache.conf

[cache]
recipe = plone.recipe.varnish
daemon = ${buildout:directory}/parts/varnish-build/sbin/varnishd
mode = foreground
bind = ${site:cache-address}
cache-size = 1G
user = ${site:cache-user}
config = ${buildout:directory}/templates/cache.conf

############################################################################## 
# Set up supervisor to run it all
##############################################################################

[supervisor]
recipe = collective.recipe.supervisor
port = ${site:supervisor-host}:${site:supervisor-port}
user = ${site:supervisor-user}
password = ${site:supervisor-pass}
serverurl = http://${site:supervisor-host}:${site:supervisor-port}
programs =
    0   zeo             ${zeoserver:location}/bin/runzeo true ${site:zeo-user}
    10  uwsgi           ${buildout:directory}/bin/uwsgi   [ --ini-paste ${buildout:directory}/production.ini -x ${buildout:directory}/parts/uwsgi/uwsgi.xml --paste-logger]    true ${site:zope-user}
    20  worker          ${buildout:directory}/bin/worker   [ console ]                                      true ${site:zope-user}    
    30  transcodedaemon ${buildout:directory}/bin/transcodedaemon [fg]                                      true ${site:transcode-user}
    40  ploneftp        ${buildout:directory}/bin/ploneftp  [fg]                                            true ${site:ftp-user}
    50  cache           ${buildout:directory}/bin/cache                                                     true ${site:cache-user}
    60  nginx           ${nginx-build:location}/sbin/nginx  [-c ${buildout:directory}/templates/main.conf]         

############################################################################## 
# Log rotation
##############################################################################

[logrotate.conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/logrotate.conf.template
output = ${buildout:directory}/templates/logrotate.conf
    
############################################################################## 
# Debugging tools - preconfigured python interpreter, omelette
##############################################################################

[zopepy]
recipe = zc.recipe.egg
eggs = 
    ${instance-settings:eggs}

interpreter = zopepy
scripts = zopepy

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance-settings:eggs}

    
############################################################################## 
# Backups - pack - chown
##############################################################################

[backup]
recipe = collective.recipe.backup

[backup-daily]
recipe = z3c.recipe.usercrontab
times = 0 0 * * *
command = ${buildout:bin-directory}/bin/backup

[pack-monthly]
recipe = z3c.recipe.usercrontab
times = 0 0 1 * *
command = ${buildout:bin-directory}/bin/zeopack

[chown]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =
    echo Setting file permissions - root access required - you may be asked to enter your password
    touch ${buildout:directory}/var/log/plone.log ${buildout:directory}/var/log/plone-Z2.log ${buildout:directory}/var/zeoserver.pid ${buildout:directory}/var/log/zeoserver.log ${buildout:directory}/parts/transcodedaemon/transcodedaemon.log 
    chown ${site:zeo-user} ${buildout:directory}/var/log/zeoserver.log ${buildout:directory}/var/zeoserver.pid 
    chgrp -R ${site:zeo-user} ${buildout:directory}/var
    chown ${site:transcode-user} ${buildout:directory}/transcoded
    chmod 770 ${buildout:directory}/var
    chmod 775 ${buildout:directory}/var/log
    mkdir ${buildout:directory}/var/filestorage ${buildout:directory}/var/blobstorage
    mkdir ${buildout:directory}/torrents ${buildout:directory}/torrents_safe
    mkdir ~/.python-eggs 
    chmod o+rwx ~/.python-eggs 
    chown -R ${site:zope-user} ${buildout:directory}/eggs
    chown -R ${site:zope-user} ${buildout:directory}/torrents
    chown -R ${site:zope-user} ${buildout:directory}/torrents_safe
    chown -R ${site:zeo-user} ${buildout:directory}/var/filestorage 
    chown -R ${site:zeo-user} ${buildout:directory}/var/blobstorage
    chown -R ${site:zope-user} ${buildout:directory}/var/log/plone.log ${buildout:directory}/var/log/plone-Z2.log
    chown ${site:transcode-user} ${buildout:directory}/parts/transcodedaemon/transcodedaemon.log ${buildout:directory}/parts/transcodedaemon
    if [ -f ${buildout:directory}/ffmpeg/bin/ffmpeg ] ; then ln -s ${buildout:directory}/ffmpeg/bin/ffmpeg ${buildout:directory}/bin/; else ln -s `which ffmpeg` ${buildout:directory}/bin/; fi
    if [ -f ${buildout:directory}/ffmpeg/bin/qt-faststart ] ; then ln -s ${buildout:directory}/ffmpeg/bin/qt-faststart ${buildout:directory}/bin/; else ln -s `which qt-faststart` ${buildout:directory}/bin/; fi
    
update-command = ${chown:command}
stop-on-error = false
