Metadata-Version: 1.1
Name: rerun
Version: 1.0.17
Summary: Command-line executable Python script to re-run the given command every time
files are modified in the current directory or its subdirectories.
Home-page: http://pypi.python.org/pypi/rerun/
Author: Jonathan Hartley
Author-email: tartley@tartley.com
License: UNKNOWN
Description: Usage
        =====
        
        ::
        
            rerun [--help|-h] [--verbose|-v] [--ignore|-i=<file>] [--version] <command>
        
        Where::
        
            <command>           Command to execute
            --help|-h           Show this help message and exit.
            --ignore|-i=<file>  File or directory to ignore. Any directories of the
                                given name (and their subdirs) are excluded from the
                                search for changed files. Any modification to files of
                                the given name are ignored. The given value is
                                compared to basenames, so for example, "--ignore=def"
                                will skip the contents of directory "./abc/def/" and
                                will ignore file "./ghi/def". Can be specified multiple
                                times.
            --verbose|-v        Display the names of changed files before the command
                                output.
            --version           Show version number and exit.
        
        Description
        ===========
        
        Rerun detects changes to files by polling file modification times once per
        second. It looks in the current directory and all its subdirectories. On
        detecting any changes, it clears the terminal and reruns the given command.
        
        It always ignores directories called .svn, .git, .hg, .bzr, build and dist,
        unless given --ignore flags for user-specified ignores.
        
        It always ignores files ending with .pyc or .pyo. This isn't currently
        user-overrideable.
        
        e.g::
        
            rerun python -m unittest mypackage.mymodule
        
        will rerun your tests every time you save your source code, but it won't
        rerun the tests a second time when .pyo files get updated as a result of
        executing the tests. Handy for seeing the new test results in another console
        window after you hit 'save' in your editor, without having to change window
        focus.
        
        Dependencies
        ============
        
        Tested on MacOSX, Ubuntu, WindowsXP, Windows 7.
        
        Tested under Python2.7 or 3.2.
        May run under Python 2.6 or older with PyPI package 'argparse' installed.
        
        No other dependencies.
        
        Install
        =======
        
        ::
        
            pip install rerun
        
        Known Problems
        ==============
        
        It barfs on more complex Bash constructions like:
        
            rerun <rerun-options> ENVVAR=value <executable> <exe-args>
        
        But this can be fixed using:
        
            ENVVAR=value rerun <rerun-options> <executable> <exe-args>
        
        However, composite commands don't work, e.g:
        
            rerun <rerun-options> <exe1> | <exe2>
        
        This could be fixed by changing rerun to call subprocess with shell=True, and
        asking users to escape the '|' with a '\'. However, this will then break simple
        constructions like:
        
            rerun <rerun-options> echo 123
        
        Need to escape the space after 'echo'. Not sure how best to fix all this.
        
        
        Polling for modification times perhaps isn't ideal. Registering of OS-specific
        notifications of file system events might be better. In practice though, I
        haven't noticed it burden my machine in directories containing hundreds of
        files.
        
        
        It might be handy if '--ignore' accepted globs, e.g. "\*.tmp"
        
        
        See issues at https://bitbucket.org/tartley/rerun/issues?status=new&status=open
        
        
        Alternatives
        ============
        
        PyPI package 'watchdog' is a cross-platform library for handling file-system
        events, which includes script 'watchmedo', which looks like a more serious and
        heavy-duty version of 'Rerun'.
        
        Thanks
        ======
        
        The idea came from the Bash command 'watch', and inspiration for this
        implementation came from an old blog post by Jeff Winkler, whos website
        http://jeffwinkler.net seems to have now died.
        
        Contact
        =======
        
        :Documentation & download:
            http://pypi.python.org/pypi/rerun/
        
        :Souce code and issues:
            https://bitbucket.org/tartley/rerun
        
        :Contact the author:
            Jonathan Hartley, email: tartley at domain tartley.com, Twitter: @tartley.
        
        
Keywords: console command-line development testing tests
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Operating System :: Microsoft :: Windows :: Windows NT/2000
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: Implementation :: CPython
