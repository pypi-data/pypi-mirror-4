Metadata-Version: 1.1
Name: twentiment
Version: 0.1.0
Summary: Twitter sentiment analysis tool
Home-page: https://github.com/passy/twentiment
Author: Pascal Hartig
Author-email: phartig@rdrei.net
License: Licensed under the Apache License, Version 2.0 (the 'License');
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an 'AS IS' BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Description: twentiment
        ==========
        
        Research project on twitter sentiment analysis using the Na√Øve Bayes
        Classificator.
        
        Installation
        ------------
        
        Install from PyPI (soon) or github with::
        
            pip install -e git+https://github.com:passy/twentiment.git
        
        Usage
        -----
        
        First, start the twentiment server that loads the data from a JSON file. A
        sample is available `in the repository <https://github.com/passy/twentiment/blob/623f4064469850b40b50db4707f12a07047f022b/samples/few_tweets.json>`_.
        
        ::
        
            twentiment_server samples/few_tweets.json
        
        After that, you can use ``twentiment_client`` to query the server using the
        syntax ``GUESS my tweet to be scored``.
        
        Example
        -------
        
        ::
        
            twentiment> GUESS hello world
            OK 0.0
            twentiment> GUESS This car is amazing.
            OK 0.5
            twentiment> GUESS My best friend is great.
            OK 0.9285714285714286
            twentiment> GUESS Whatever.
            OK 0.0
            twentiment> GUESS This car is horrible.
            OK -0.5
            twentiment> GUESS I am not looking forward to my appointment tomorrow.
            OK -0.9852941176470597
        
        
        Wishlist
        --------
        
        (Ranked by importance)
        
            * Have a web-frontend that searches for tweets and rates their sentiment.
            * Give the server an option to fork the server process into the background
              and launch a shell like twentiment_client right away.
            * Restructure the Classifier to allow adaptive retraining, i.e. provide a
              TRAIN command that adds new samples at runtime.
                * At the moment, most of the calculations are done at start-up time, so
                  querying is rather cheap. Could be difficult to find a good balance.
        
            * Persistence of the server state. Maybe through redis? Only important with
              TRAIN functionality.
            * Add some sort of parallelism to the server, so querying doesn't block.
            * Add a way of importing live training data from twitter (like from
              analysing emoticons)
        
        Motivation
        ----------
        
        This is a project report for the Business Intelligence course. To increase the
        learning potential, I tried to reuse as little as possible from the excellent
        `NLTK <http://nltk.org/>`_ project and reimplemented the relevant parts myself.
        
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Operating System :: Unix
Classifier: Topic :: Communications
Classifier: Topic :: Internet :: WWW/HTTP
