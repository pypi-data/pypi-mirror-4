Metadata-Version: 1.1
Name: wirexfers
Version: 0.1
Summary: Simple API for IPizza Solo/TUPAS payment protocols.
Home-page: http://plaes.org/projects/wirexfers
Author: Priit Laes
Author-email: plaes@plaes.org
License: Copyright (c) 2012 Priit Laes.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Description: WireXfers [waɪə trænsfɜːz]
        ==========================
        
        WireXfers is an online payments library, written in Python, supporting
        various online payment protocols (IPizza, Solo/TUPAS) using a simple API.
        
        Features
        --------
        
        - Single API for different providers
        - Supported protocols:
        
          * IPizza
        
            * Estonia:
        
                * Danske Bank
                * Krediidipank
                * LHV Bank
                * SEB Bank
                * SwedBank
        
          * Solo/TUPAS
        
            * Estonia:
        
                * Nordea Bank (Estonia)
        
        Installation
        ------------
        
        To install WireXfers, simply: ::
        
            $ pip install wirexfers
        
        Or, if you absolutely must: ::
        
            $ easy_install wirexfers
        
        But, you really shouldn't do that.
        
        Usage example
        -------------
        
        Basic usage in pseudocode: ::
        
            # Create provider-specific keychain...
            keychain = PaymentProtocol.KeyChain(...)
        
            # ...and initialize the provider
            provider = PaymentProtocol(user, keychain, endpoint)
        
            # Creating the payment request
            payment = provider(payment_info, return_urls)
        
            # Parsing the payment response
            response = provider.parse_response(request.form)
            if response.successful:
                # do something
            else:
                # report failure
        
        
        .. :changelog:
        
        History
        -------
        
        0.1 (10.12.2012)
        ++++++++++++++++
        
        * First release!
        * Added Estonian banks:
          * Danske bank (IPizza)
          * Krediidipank (IPizza)
          * LHV pank  (IPizza)
          * Nordea (Solo/TUPAS)
          * SEB bank (IPizza)
          * Swedbank (IPizza)
        
Platform: UNKNOWN
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: ISC License (ISCL)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Software Development :: Libraries :: Python Modules
