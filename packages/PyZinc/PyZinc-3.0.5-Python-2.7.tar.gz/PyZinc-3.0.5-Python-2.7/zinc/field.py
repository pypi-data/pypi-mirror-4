# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_field', [dirname(__file__)])
        except ImportError:
            import _field
            return _field
        if fp is not None:
            try:
                _mod = imp.load_module('_field', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _field = swig_import_helper()
    del swig_import_helper
else:
    import _field
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import differentialoperator
import element
import node
import stream
import fieldmodule
import timesequence
import optimisation
import fieldcache
class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_Field(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_Field
    __del__ = lambda self : None;
    def isValid(self): return _field.Field_isValid(self)
    def getId(self): return _field.Field_getId(self)
    ATTRIBUTE_INVALID = _field.Field_ATTRIBUTE_INVALID
    ATTRIBUTE_IS_MANAGED = _field.Field_ATTRIBUTE_IS_MANAGED
    ATTRIBUTE_IS_COORDINATE = _field.Field_ATTRIBUTE_IS_COORDINATE
    ATTRIBUTE_NUMBER_OF_COMPONENTS = _field.Field_ATTRIBUTE_NUMBER_OF_COMPONENTS
    ATTRIBUTE_NUMBER_OF_SOURCE_FIELDS = _field.Field_ATTRIBUTE_NUMBER_OF_SOURCE_FIELDS
    ATTRIBUTE_COORDINATE_SYSTEM_FOCUS = _field.Field_ATTRIBUTE_COORDINATE_SYSTEM_FOCUS
    COORDINATE_SYSTEM_TYPE_INVALID = _field.Field_COORDINATE_SYSTEM_TYPE_INVALID
    COORDINATE_SYSTEM_TYPE_RECTANGULAR_CARTESIAN = _field.Field_COORDINATE_SYSTEM_TYPE_RECTANGULAR_CARTESIAN
    COORDINATE_SYSTEM_TYPE_CYLINDRICAL_POLAR = _field.Field_COORDINATE_SYSTEM_TYPE_CYLINDRICAL_POLAR
    COORDINATE_SYSTEM_TYPE_SPHERICAL_POLAR = _field.Field_COORDINATE_SYSTEM_TYPE_SPHERICAL_POLAR
    COORDINATE_SYSTEM_TYPE_PROLATE_SPHEROIDAL = _field.Field_COORDINATE_SYSTEM_TYPE_PROLATE_SPHEROIDAL
    COORDINATE_SYSTEM_TYPE_OBLATE_SPHEROIDAL = _field.Field_COORDINATE_SYSTEM_TYPE_OBLATE_SPHEROIDAL
    COORDINATE_SYSTEM_TYPE_FIBRE = _field.Field_COORDINATE_SYSTEM_TYPE_FIBRE
    VALUE_TYPE_INVALID = _field.Field_VALUE_TYPE_INVALID
    VALUE_TYPE_REAL = _field.Field_VALUE_TYPE_REAL
    VALUE_TYPE_STRING = _field.Field_VALUE_TYPE_STRING
    VALUE_TYPE_MESH_LOCATION = _field.Field_VALUE_TYPE_MESH_LOCATION
    def getAttributeInteger(self, *args): return _field.Field_getAttributeInteger(self, *args)
    def setAttributeInteger(self, *args): return _field.Field_setAttributeInteger(self, *args)
    def getAttributeReal(self, *args): return _field.Field_getAttributeReal(self, *args)
    def setAttributeReal(self, *args): return _field.Field_setAttributeReal(self, *args)
    def getCoordinateSystemType(self): return _field.Field_getCoordinateSystemType(self)
    def setCoordinateSystemType(self, *args): return _field.Field_setCoordinateSystemType(self, *args)
    def getNumberOfComponents(self): return _field.Field_getNumberOfComponents(self)
    def getName(self): return _field.Field_getName(self)
    def setName(self, *args): return _field.Field_setName(self, *args)
    def getSourceField(self, *args): return _field.Field_getSourceField(self, *args)
    def getValueType(self): return _field.Field_getValueType(self)
    def getFieldModule(self): return _field.Field_getFieldModule(self)
    def assignMeshLocation(self, *args): return _field.Field_assignMeshLocation(self, *args)
    def assignReal(self, *args): return _field.Field_assignReal(self, *args)
    def assignString(self, *args): return _field.Field_assignString(self, *args)
    def evaluateMeshLocation(self, *args): return _field.Field_evaluateMeshLocation(self, *args)
    def evaluateReal(self, *args): return _field.Field_evaluateReal(self, *args)
    def evaluateString(self, *args): return _field.Field_evaluateString(self, *args)
    def evaluateDerivative(self, *args): return _field.Field_evaluateDerivative(self, *args)
    def isDefinedAtLocation(self, *args): return _field.Field_isDefinedAtLocation(self, *args)
    def __add__(self, *args): return _field.Field___add__(self, *args)
    def __sub__(self, *args): return _field.Field___sub__(self, *args)
    def __mul__(self, *args): return _field.Field___mul__(self, *args)
    def __div__(self, *args): return _field.Field___div__(self, *args)
    def __gt__(self, *args): return _field.Field___gt__(self, *args)
    def __lt__(self, *args): return _field.Field___lt__(self, *args)
Field_swigregister = _field.Field_swigregister
Field_swigregister(Field)

class FieldIdentity(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldIdentity, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldIdentity, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldIdentity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldIdentity
    __del__ = lambda self : None;
FieldIdentity_swigregister = _field.FieldIdentity_swigregister
FieldIdentity_swigregister(FieldIdentity)

class FieldComponent(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldComponent, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldComponent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldComponent
    __del__ = lambda self : None;
FieldComponent_swigregister = _field.FieldComponent_swigregister
FieldComponent_swigregister(FieldComponent)

class FieldConcatenate(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldConcatenate, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldConcatenate, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldConcatenate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldConcatenate
    __del__ = lambda self : None;
FieldConcatenate_swigregister = _field.FieldConcatenate_swigregister
FieldConcatenate_swigregister(FieldConcatenate)

class FieldIf(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldIf, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldIf, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldIf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldIf
    __del__ = lambda self : None;
FieldIf_swigregister = _field.FieldIf_swigregister
FieldIf_swigregister(FieldIf)

class FieldConstant(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldConstant, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldConstant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldConstant
    __del__ = lambda self : None;
FieldConstant_swigregister = _field.FieldConstant_swigregister
FieldConstant_swigregister(FieldConstant)

class FieldStringConstant(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldStringConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldStringConstant, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldStringConstant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldStringConstant
    __del__ = lambda self : None;
FieldStringConstant_swigregister = _field.FieldStringConstant_swigregister
FieldStringConstant_swigregister(FieldStringConstant)

class FieldCoordinateTransformation(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldCoordinateTransformation, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldCoordinateTransformation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldCoordinateTransformation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldCoordinateTransformation
    __del__ = lambda self : None;
FieldCoordinateTransformation_swigregister = _field.FieldCoordinateTransformation_swigregister
FieldCoordinateTransformation_swigregister(FieldCoordinateTransformation)

class FieldVectorCoordinateTransformation(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldVectorCoordinateTransformation, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldVectorCoordinateTransformation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldVectorCoordinateTransformation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldVectorCoordinateTransformation
    __del__ = lambda self : None;
FieldVectorCoordinateTransformation_swigregister = _field.FieldVectorCoordinateTransformation_swigregister
FieldVectorCoordinateTransformation_swigregister(FieldVectorCoordinateTransformation)

class FieldFiniteElement(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldFiniteElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldFiniteElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldFiniteElement
    __del__ = lambda self : None;
FieldFiniteElement_swigregister = _field.FieldFiniteElement_swigregister
FieldFiniteElement_swigregister(FieldFiniteElement)

class FieldEmbedded(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldEmbedded, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldEmbedded, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldEmbedded()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldEmbedded
    __del__ = lambda self : None;
FieldEmbedded_swigregister = _field.FieldEmbedded_swigregister
FieldEmbedded_swigregister(FieldEmbedded)

class FieldFindMeshLocation(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldFindMeshLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldFindMeshLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldFindMeshLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    SEARCH_MODE_FIND_EXACT = _field.FieldFindMeshLocation_SEARCH_MODE_FIND_EXACT
    SEARCH_MODE_FIND_NEAREST = _field.FieldFindMeshLocation_SEARCH_MODE_FIND_NEAREST
    def getMesh(self): return _field.FieldFindMeshLocation_getMesh(self)
    def getSearchMode(self): return _field.FieldFindMeshLocation_getSearchMode(self)
    def setSearchMode(self, *args): return _field.FieldFindMeshLocation_setSearchMode(self, *args)
    __swig_destroy__ = _field.delete_FieldFindMeshLocation
    __del__ = lambda self : None;
FieldFindMeshLocation_swigregister = _field.FieldFindMeshLocation_swigregister
FieldFindMeshLocation_swigregister(FieldFindMeshLocation)

class FieldNodeValue(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNodeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNodeValue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNodeValue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNodeValue
    __del__ = lambda self : None;
FieldNodeValue_swigregister = _field.FieldNodeValue_swigregister
FieldNodeValue_swigregister(FieldNodeValue)

class FieldStoredMeshLocation(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldStoredMeshLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldStoredMeshLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldStoredMeshLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldStoredMeshLocation
    __del__ = lambda self : None;
FieldStoredMeshLocation_swigregister = _field.FieldStoredMeshLocation_swigregister
FieldStoredMeshLocation_swigregister(FieldStoredMeshLocation)

class FieldStoredString(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldStoredString, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldStoredString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldStoredString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldStoredString
    __del__ = lambda self : None;
FieldStoredString_swigregister = _field.FieldStoredString_swigregister
FieldStoredString_swigregister(FieldStoredString)

class FieldElementGroup(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldElementGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldElementGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldElementGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMesh(self): return _field.FieldElementGroup_getMesh(self)
    __swig_destroy__ = _field.delete_FieldElementGroup
    __del__ = lambda self : None;
FieldElementGroup_swigregister = _field.FieldElementGroup_swigregister
FieldElementGroup_swigregister(FieldElementGroup)

class FieldNodeGroup(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNodeGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNodeGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldNodeGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNodeset(self): return _field.FieldNodeGroup_getNodeset(self)
    __swig_destroy__ = _field.delete_FieldNodeGroup
    __del__ = lambda self : None;
FieldNodeGroup_swigregister = _field.FieldNodeGroup_swigregister
FieldNodeGroup_swigregister(FieldNodeGroup)

class FieldGroup(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def isEmpty(self): return _field.FieldGroup_isEmpty(self)
    def isEmptyLocal(self): return _field.FieldGroup_isEmptyLocal(self)
    def clear(self): return _field.FieldGroup_clear(self)
    def clearLocal(self): return _field.FieldGroup_clearLocal(self)
    def removeEmptySubgroups(self): return _field.FieldGroup_removeEmptySubgroups(self)
    def addLocalRegion(self): return _field.FieldGroup_addLocalRegion(self)
    def containsLocalRegion(self): return _field.FieldGroup_containsLocalRegion(self)
    def addRegion(self, *args): return _field.FieldGroup_addRegion(self, *args)
    def removeRegion(self, *args): return _field.FieldGroup_removeRegion(self, *args)
    def containsRegion(self, *args): return _field.FieldGroup_containsRegion(self, *args)
    def createSubregionGroup(self, *args): return _field.FieldGroup_createSubregionGroup(self, *args)
    def getSubregionGroup(self, *args): return _field.FieldGroup_getSubregionGroup(self, *args)
    def createNodeGroup(self, *args): return _field.FieldGroup_createNodeGroup(self, *args)
    def getNodeGroup(self, *args): return _field.FieldGroup_getNodeGroup(self, *args)
    def createElementGroup(self, *args): return _field.FieldGroup_createElementGroup(self, *args)
    def getElementGroup(self, *args): return _field.FieldGroup_getElementGroup(self, *args)
    def getSubobjectGroupforDomain(self, *args): return _field.FieldGroup_getSubobjectGroupforDomain(self, *args)
    def getFirstNonEmptyGroup(self): return _field.FieldGroup_getFirstNonEmptyGroup(self)
    __swig_destroy__ = _field.delete_FieldGroup
    __del__ = lambda self : None;
FieldGroup_swigregister = _field.FieldGroup_swigregister
FieldGroup_swigregister(FieldGroup)

class FieldImage(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldImage, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_FieldImage(*args)
        try: self.this.append(this)
        except: self.this = this
    COMBINE_INVALID = _field.FieldImage_COMBINE_INVALID
    COMBINE_BLEND = _field.FieldImage_COMBINE_BLEND
    COMBINE_DECAL = _field.FieldImage_COMBINE_DECAL
    COMBINE_MODULATE = _field.FieldImage_COMBINE_MODULATE
    COMBINE_ADD = _field.FieldImage_COMBINE_ADD
    COMBINE_ADD_SIGNED = _field.FieldImage_COMBINE_ADD_SIGNED
    COMBINE_MODULATE_SCALE_4 = _field.FieldImage_COMBINE_MODULATE_SCALE_4
    COMBINE_BLEND_SCALE_4 = _field.FieldImage_COMBINE_BLEND_SCALE_4
    COMBINE_SUBTRACT = _field.FieldImage_COMBINE_SUBTRACT
    COMBINE_ADD_SCALE_4 = _field.FieldImage_COMBINE_ADD_SCALE_4
    COMBINE_SUBTRACT_SCALE_4 = _field.FieldImage_COMBINE_SUBTRACT_SCALE_4
    COMBINE_INVERT_ADD_SCALE_4 = _field.FieldImage_COMBINE_INVERT_ADD_SCALE_4
    COMBINE_INVERT_SUBTRACT_SCALE_4 = _field.FieldImage_COMBINE_INVERT_SUBTRACT_SCALE_4
    FILTER_INVALID = _field.FieldImage_FILTER_INVALID
    FILTER_NEAREST = _field.FieldImage_FILTER_NEAREST
    FILTER_LINEAR = _field.FieldImage_FILTER_LINEAR
    FILTER_NEAREST_MIPMAP_NEAREST = _field.FieldImage_FILTER_NEAREST_MIPMAP_NEAREST
    FILTER_LINEAR_MIPMAP_NEAREST = _field.FieldImage_FILTER_LINEAR_MIPMAP_NEAREST
    FILTER_LINEAR_MIPMAP_LINEAR = _field.FieldImage_FILTER_LINEAR_MIPMAP_LINEAR
    HARDWARE_COMPRESSION_MODE_INVALID = _field.FieldImage_HARDWARE_COMPRESSION_MODE_INVALID
    HARDWARE_COMPRESSION_MODE_UNCOMPRESSED = _field.FieldImage_HARDWARE_COMPRESSION_MODE_UNCOMPRESSED
    HARDWARE_COMPRESSION_MODE_AUTOMATIC = _field.FieldImage_HARDWARE_COMPRESSION_MODE_AUTOMATIC
    IMAGE_ATTRIBUTE_INVALID = _field.FieldImage_IMAGE_ATTRIBUTE_INVALID
    IMAGE_ATTRIBUTE_RAW_WIDTH_PIXELS = _field.FieldImage_IMAGE_ATTRIBUTE_RAW_WIDTH_PIXELS
    IMAGE_ATTRIBUTE_RAW_HEIGHT_PIXELS = _field.FieldImage_IMAGE_ATTRIBUTE_RAW_HEIGHT_PIXELS
    IMAGE_ATTRIBUTE_RAW_DEPTH_PIXELS = _field.FieldImage_IMAGE_ATTRIBUTE_RAW_DEPTH_PIXELS
    IMAGE_ATTRIBUTE_PHYSICAL_WIDTH_PIXELS = _field.FieldImage_IMAGE_ATTRIBUTE_PHYSICAL_WIDTH_PIXELS
    IMAGE_ATTRIBUTE_PHYSICAL_HEIGHT_PIXELS = _field.FieldImage_IMAGE_ATTRIBUTE_PHYSICAL_HEIGHT_PIXELS
    IMAGE_ATTRIBUTE_PHYSICAL_DEPTH_PIXELS = _field.FieldImage_IMAGE_ATTRIBUTE_PHYSICAL_DEPTH_PIXELS
    def getAttributeInteger(self, *args): return _field.FieldImage_getAttributeInteger(self, *args)
    def getAttributeReal(self, *args): return _field.FieldImage_getAttributeReal(self, *args)
    def setAttributeReal(self, *args): return _field.FieldImage_setAttributeReal(self, *args)
    def read(self, *args): return _field.FieldImage_read(self, *args)
    def write(self, *args): return _field.FieldImage_write(self, *args)
    def getCombineMode(self): return _field.FieldImage_getCombineMode(self)
    def setCombineMode(self, *args): return _field.FieldImage_setCombineMode(self, *args)
    def getHardwareCompressionMode(self): return _field.FieldImage_getHardwareCompressionMode(self)
    def setHardwareCompressionMode(self, *args): return _field.FieldImage_setHardwareCompressionMode(self, *args)
    def getFilterMode(self): return _field.FieldImage_getFilterMode(self)
    def setFilterMode(self, *args): return _field.FieldImage_setFilterMode(self, *args)
    def getProperty(self, *args): return _field.FieldImage_getProperty(self, *args)
    def createStreamInformation(self): return _field.FieldImage_createStreamInformation(self)
    __swig_destroy__ = _field.delete_FieldImage
    __del__ = lambda self : None;
FieldImage_swigregister = _field.FieldImage_swigregister
FieldImage_swigregister(FieldImage)

class StreamInformationImage(stream.StreamInformation):
    __swig_setmethods__ = {}
    for _s in [stream.StreamInformation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamInformationImage, name, value)
    __swig_getmethods__ = {}
    for _s in [stream.StreamInformation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamInformationImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _field.new_StreamInformationImage(*args)
        try: self.this.append(this)
        except: self.this = this
    IMAGE_ATTRIBUTE_RAW_WIDTH_PIXELS = _field.StreamInformationImage_IMAGE_ATTRIBUTE_RAW_WIDTH_PIXELS
    IMAGE_ATTRIBUTE_RAW_HEIGHT_PIXELS = _field.StreamInformationImage_IMAGE_ATTRIBUTE_RAW_HEIGHT_PIXELS
    IMAGE_ATTRIBUTE_BITS_PER_COMPONENT = _field.StreamInformationImage_IMAGE_ATTRIBUTE_BITS_PER_COMPONENT
    IMAGE_ATTRIBUTE_COMPRESSION_QUALITY = _field.StreamInformationImage_IMAGE_ATTRIBUTE_COMPRESSION_QUALITY
    IMAGE_FILE_FORMAT_INVALID = _field.StreamInformationImage_IMAGE_FILE_FORMAT_INVALID
    IMAGE_FILE_FORMAT_BMP = _field.StreamInformationImage_IMAGE_FILE_FORMAT_BMP
    IMAGE_FILE_FORMAT_DICOM = _field.StreamInformationImage_IMAGE_FILE_FORMAT_DICOM
    IMAGE_FILE_FORMAT_JPG = _field.StreamInformationImage_IMAGE_FILE_FORMAT_JPG
    IMAGE_FILE_FORMAT_GIF = _field.StreamInformationImage_IMAGE_FILE_FORMAT_GIF
    IMAGE_FILE_FORMAT_PNG = _field.StreamInformationImage_IMAGE_FILE_FORMAT_PNG
    IMAGE_FILE_FORMAT_SGI = _field.StreamInformationImage_IMAGE_FILE_FORMAT_SGI
    IMAGE_FILE_FORMAT_TIFF = _field.StreamInformationImage_IMAGE_FILE_FORMAT_TIFF
    IMAGE_PIXEL_FORMAT_INVALID = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_INVALID
    IMAGE_PIXEL_FORMAT_LUMINANCE = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_LUMINANCE
    IMAGE_PIXEL_FORMAT_LUMINANCE_ALPHA = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_LUMINANCE_ALPHA
    IMAGE_PIXEL_FORMAT_RGB = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_RGB
    IMAGE_PIXEL_FORMAT_RGBA = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_RGBA
    IMAGE_PIXEL_FORMAT_ABGR = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_ABGR
    IMAGE_PIXEL_FORMAT_BGR = _field.StreamInformationImage_IMAGE_PIXEL_FORMAT_BGR
    def setAttributeInteger(self, *args): return _field.StreamInformationImage_setAttributeInteger(self, *args)
    def setAttributeReal(self, *args): return _field.StreamInformationImage_setAttributeReal(self, *args)
    def setFileFormat(self, *args): return _field.StreamInformationImage_setFileFormat(self, *args)
    def setPixelFormat(self, *args): return _field.StreamInformationImage_setPixelFormat(self, *args)
    __swig_destroy__ = _field.delete_StreamInformationImage
    __del__ = lambda self : None;
StreamInformationImage_swigregister = _field.StreamInformationImage_swigregister
StreamInformationImage_swigregister(StreamInformationImage)

class FieldAnd(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAnd, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAnd, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAnd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAnd
    __del__ = lambda self : None;
FieldAnd_swigregister = _field.FieldAnd_swigregister
FieldAnd_swigregister(FieldAnd)

class FieldEqualTo(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldEqualTo, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldEqualTo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldEqualTo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldEqualTo
    __del__ = lambda self : None;
FieldEqualTo_swigregister = _field.FieldEqualTo_swigregister
FieldEqualTo_swigregister(FieldEqualTo)

class FieldGreaterThan(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldGreaterThan, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldGreaterThan, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldGreaterThan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldGreaterThan
    __del__ = lambda self : None;
FieldGreaterThan_swigregister = _field.FieldGreaterThan_swigregister
FieldGreaterThan_swigregister(FieldGreaterThan)


def __gt__(*args):
  return _field.__gt__(*args)
__gt__ = _field.__gt__
class FieldLessThan(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldLessThan, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldLessThan, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldLessThan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldLessThan
    __del__ = lambda self : None;
FieldLessThan_swigregister = _field.FieldLessThan_swigregister
FieldLessThan_swigregister(FieldLessThan)


def __lt__(*args):
  return _field.__lt__(*args)
__lt__ = _field.__lt__
class FieldOr(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldOr, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldOr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldOr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldOr
    __del__ = lambda self : None;
FieldOr_swigregister = _field.FieldOr_swigregister
FieldOr_swigregister(FieldOr)

class FieldNot(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNot, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNot, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNot
    __del__ = lambda self : None;
FieldNot_swigregister = _field.FieldNot_swigregister
FieldNot_swigregister(FieldNot)

class FieldXor(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldXor, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldXor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldXor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldXor
    __del__ = lambda self : None;
FieldXor_swigregister = _field.FieldXor_swigregister
FieldXor_swigregister(FieldXor)

class FieldDeterminant(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldDeterminant, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldDeterminant, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldDeterminant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldDeterminant
    __del__ = lambda self : None;
FieldDeterminant_swigregister = _field.FieldDeterminant_swigregister
FieldDeterminant_swigregister(FieldDeterminant)

class FieldEigenvalues(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldEigenvalues, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldEigenvalues, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldEigenvalues()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldEigenvalues
    __del__ = lambda self : None;
FieldEigenvalues_swigregister = _field.FieldEigenvalues_swigregister
FieldEigenvalues_swigregister(FieldEigenvalues)

class FieldEigenvectors(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldEigenvectors, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldEigenvectors, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldEigenvectors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldEigenvectors
    __del__ = lambda self : None;
FieldEigenvectors_swigregister = _field.FieldEigenvectors_swigregister
FieldEigenvectors_swigregister(FieldEigenvectors)

class FieldMatrixInvert(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMatrixInvert, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMatrixInvert, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldMatrixInvert()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldMatrixInvert
    __del__ = lambda self : None;
FieldMatrixInvert_swigregister = _field.FieldMatrixInvert_swigregister
FieldMatrixInvert_swigregister(FieldMatrixInvert)

class FieldMatrixMultiply(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMatrixMultiply, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMatrixMultiply, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldMatrixMultiply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldMatrixMultiply
    __del__ = lambda self : None;
FieldMatrixMultiply_swigregister = _field.FieldMatrixMultiply_swigregister
FieldMatrixMultiply_swigregister(FieldMatrixMultiply)

class FieldProjection(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldProjection, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldProjection, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldProjection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldProjection
    __del__ = lambda self : None;
FieldProjection_swigregister = _field.FieldProjection_swigregister
FieldProjection_swigregister(FieldProjection)

class FieldTranspose(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldTranspose, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldTranspose, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldTranspose()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldTranspose
    __del__ = lambda self : None;
FieldTranspose_swigregister = _field.FieldTranspose_swigregister
FieldTranspose_swigregister(FieldTranspose)

class FieldNodesetSum(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNodesetSum, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNodesetSum, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNodesetSum()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNodesetSum
    __del__ = lambda self : None;
FieldNodesetSum_swigregister = _field.FieldNodesetSum_swigregister
FieldNodesetSum_swigregister(FieldNodesetSum)

class FieldNodesetMean(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNodesetMean, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNodesetMean, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNodesetMean()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNodesetMean
    __del__ = lambda self : None;
FieldNodesetMean_swigregister = _field.FieldNodesetMean_swigregister
FieldNodesetMean_swigregister(FieldNodesetMean)

class FieldNodesetSumSquares(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNodesetSumSquares, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNodesetSumSquares, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNodesetSumSquares()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNodesetSumSquares
    __del__ = lambda self : None;
FieldNodesetSumSquares_swigregister = _field.FieldNodesetSumSquares_swigregister
FieldNodesetSumSquares_swigregister(FieldNodesetSumSquares)

class FieldNodesetMeanSquares(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNodesetMeanSquares, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNodesetMeanSquares, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNodesetMeanSquares()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNodesetMeanSquares
    __del__ = lambda self : None;
FieldNodesetMeanSquares_swigregister = _field.FieldNodesetMeanSquares_swigregister
FieldNodesetMeanSquares_swigregister(FieldNodesetMeanSquares)

class FieldCrossProduct(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldCrossProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldCrossProduct, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldCrossProduct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldCrossProduct
    __del__ = lambda self : None;
FieldCrossProduct_swigregister = _field.FieldCrossProduct_swigregister
FieldCrossProduct_swigregister(FieldCrossProduct)

class FieldDotProduct(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldDotProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldDotProduct, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldDotProduct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldDotProduct
    __del__ = lambda self : None;
FieldDotProduct_swigregister = _field.FieldDotProduct_swigregister
FieldDotProduct_swigregister(FieldDotProduct)

class FieldMagnitude(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMagnitude, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMagnitude, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldMagnitude()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldMagnitude
    __del__ = lambda self : None;
FieldMagnitude_swigregister = _field.FieldMagnitude_swigregister
FieldMagnitude_swigregister(FieldMagnitude)

class FieldNormalise(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNormalise, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNormalise, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldNormalise()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldNormalise
    __del__ = lambda self : None;
FieldNormalise_swigregister = _field.FieldNormalise_swigregister
FieldNormalise_swigregister(FieldNormalise)

class FieldTimeLookup(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldTimeLookup, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldTimeLookup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldTimeLookup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldTimeLookup
    __del__ = lambda self : None;
FieldTimeLookup_swigregister = _field.FieldTimeLookup_swigregister
FieldTimeLookup_swigregister(FieldTimeLookup)

class FieldTimeValue(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldTimeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldTimeValue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldTimeValue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldTimeValue
    __del__ = lambda self : None;
FieldTimeValue_swigregister = _field.FieldTimeValue_swigregister
FieldTimeValue_swigregister(FieldTimeValue)

class FieldSin(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSin, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSin, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldSin()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldSin
    __del__ = lambda self : None;
FieldSin_swigregister = _field.FieldSin_swigregister
FieldSin_swigregister(FieldSin)

class FieldCos(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldCos, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldCos, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldCos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldCos
    __del__ = lambda self : None;
FieldCos_swigregister = _field.FieldCos_swigregister
FieldCos_swigregister(FieldCos)

class FieldTan(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldTan, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldTan, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldTan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldTan
    __del__ = lambda self : None;
FieldTan_swigregister = _field.FieldTan_swigregister
FieldTan_swigregister(FieldTan)

class FieldAsin(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAsin, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAsin, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAsin()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAsin
    __del__ = lambda self : None;
FieldAsin_swigregister = _field.FieldAsin_swigregister
FieldAsin_swigregister(FieldAsin)

class FieldAcos(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAcos, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAcos, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAcos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAcos
    __del__ = lambda self : None;
FieldAcos_swigregister = _field.FieldAcos_swigregister
FieldAcos_swigregister(FieldAcos)

class FieldAtan(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAtan, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAtan, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAtan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAtan
    __del__ = lambda self : None;
FieldAtan_swigregister = _field.FieldAtan_swigregister
FieldAtan_swigregister(FieldAtan)

class FieldAtan2(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAtan2, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAtan2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAtan2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAtan2
    __del__ = lambda self : None;
FieldAtan2_swigregister = _field.FieldAtan2_swigregister
FieldAtan2_swigregister(FieldAtan2)

class FieldAdd(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAdd, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAdd, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAdd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAdd
    __del__ = lambda self : None;
FieldAdd_swigregister = _field.FieldAdd_swigregister
FieldAdd_swigregister(FieldAdd)


def __add__(*args):
  return _field.__add__(*args)
__add__ = _field.__add__
class FieldPower(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldPower, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldPower, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldPower()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldPower
    __del__ = lambda self : None;
FieldPower_swigregister = _field.FieldPower_swigregister
FieldPower_swigregister(FieldPower)

class FieldMultiply(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMultiply, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMultiply, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldMultiply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldMultiply
    __del__ = lambda self : None;
FieldMultiply_swigregister = _field.FieldMultiply_swigregister
FieldMultiply_swigregister(FieldMultiply)


def __mul__(*args):
  return _field.__mul__(*args)
__mul__ = _field.__mul__
class FieldDivide(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldDivide, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldDivide, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldDivide()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldDivide
    __del__ = lambda self : None;
FieldDivide_swigregister = _field.FieldDivide_swigregister
FieldDivide_swigregister(FieldDivide)


def __div__(*args):
  return _field.__div__(*args)
__div__ = _field.__div__
class FieldSubtract(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSubtract, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSubtract, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldSubtract()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldSubtract
    __del__ = lambda self : None;
FieldSubtract_swigregister = _field.FieldSubtract_swigregister
FieldSubtract_swigregister(FieldSubtract)


def __sub__(*args):
  return _field.__sub__(*args)
__sub__ = _field.__sub__
class FieldSumComponents(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSumComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSumComponents, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldSumComponents()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldSumComponents
    __del__ = lambda self : None;
FieldSumComponents_swigregister = _field.FieldSumComponents_swigregister
FieldSumComponents_swigregister(FieldSumComponents)

class FieldLog(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldLog, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldLog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldLog
    __del__ = lambda self : None;
FieldLog_swigregister = _field.FieldLog_swigregister
FieldLog_swigregister(FieldLog)


def log(*args):
  return _field.log(*args)
log = _field.log
class FieldSqrt(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSqrt, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSqrt, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldSqrt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldSqrt
    __del__ = lambda self : None;
FieldSqrt_swigregister = _field.FieldSqrt_swigregister
FieldSqrt_swigregister(FieldSqrt)


def sqrt(*args):
  return _field.sqrt(*args)
sqrt = _field.sqrt
class FieldExp(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldExp, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldExp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldExp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldExp
    __del__ = lambda self : None;
FieldExp_swigregister = _field.FieldExp_swigregister
FieldExp_swigregister(FieldExp)


def exp(*args):
  return _field.exp(*args)
exp = _field.exp
class FieldAbs(Field):
    __swig_setmethods__ = {}
    for _s in [Field]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldAbs, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldAbs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _field.new_FieldAbs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _field.delete_FieldAbs
    __del__ = lambda self : None;
FieldAbs_swigregister = _field.FieldAbs_swigregister
FieldAbs_swigregister(FieldAbs)


def abs(*args):
  return _field.abs(*args)
abs = _field.abs


