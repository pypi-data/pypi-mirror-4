#!/usr/bin/env python3
#
#

""" ggz tornado dispatch handler.  dispatches remote commands.  """

import warnings
warnings.simplefilter("ignore")

## bootstrap

import os, sys
sys.path.insert(0, os.getcwd())
sys.path.insert(0, os.getcwd() + os.sep + '..')


from ggz.version import getversion

## command line parsing

from optparse import OptionParser
parser = OptionParser(usage='usage: %prog [options] <appid>', version='%prog ' + getversion())
parser.add_option('', '-r', type='string', default=False, dest='doresume',  metavar='PATH', help="resume the bot from the folder specified")
parser.add_option('-o', '--owner', type='string', default=False, dest='owner',  help="owner of the bot")
parser.add_option('-d', '--datadir', type='string', default=False, dest='datadir', help="datadir to use")
parser.add_option('-l', '--loglevel', type='string', default=False, dest='loglevel', help="logging level")
parser.add_option('-p', '--port', type='string', default=False, dest='port', help="servers listening port")
parser.add_option('-f', '--fleet', action="store_true", default=False, dest='fleet', help="enable the fleet")
parser.add_option('-b', '--bork', action="store_true", default=False, dest='bork', help="bork on exception")
parser.add_option('', '--nocolors', action="store_true", default=False, dest='nocolors', help="enable the use of colors in logging")
parser.add_option('', '--ssl', action="store_true", default=False, dest='ssl', help="enable ssl on the server")
parser.add_option('', '--nourl', action="store_true", default=False, dest='nourl', help="disable geturl functionality")


opts, args = parser.parse_args()
opts.args = args

if opts.bork:
    import ggz.utils.exception
    ggz.utils.exception.bork = True

if opts.datadir:
    if not os.path.isdir(opts.datadir): os.mkdir(opts.datadir)
    from ggz.lib.datadir import setdatadir
    setdatadir(opts.datadir)

from ggz.lib.datadir import getdatadir

if opts.ssl:
    if os.path.exists(os.getcwd() + os.sep + "ggz.crt"):
        ssl_options={
            "certfile": os.getcwd() + os.sep + "ggz.crt",
            "keyfile": os.getcwd() + os.sep + "ggz.key",
        }
    elif os.path.exists(getdatadir() + os.sep + "ggz.crt"):
        ssl_options={
            "certfile": getdatadir() + os.sep + "ggz.crt",
            "keyfile": getdatadir() + os.sep + "ggz.key",
        }
    else: print("can't find ggz.crt and ggz.key file - run jsb-makecert <hostname> first.") ; os._exit(1)

print(getversion('TORNADO'))

if opts.nourl:
    from ggz.utils.url import url_disable
    url_disable()

from ggz.utils.log import setloglevel
setloglevel(opts.loglevel or "warn", not opts.nocolors)

## boot

from ggz.lib.boot import boot
boot()

if opts.owner:
    from ggz.lib.users import users_boot
    u = users_boot()
    u.make_owner(opts.owner)

## jsb imports

from ggz.utils.generic import fromenc, toenc
from ggz.version import getversion
from ggz.utils.xmpp import stripped
from ggz.utils.url import getpostdata, useragent
from ggz.lib.plugins import plugs
from ggz.lib.persist import Persist
from ggz.utils.exception import handle_exception, exceptionmsg
from ggz.lib.fleet import getfleet
from ggz.lib.errors import NoSuchCommand, NoInput
from ggz.utils.lazydict import LazyDict
from ggz.lib.threads import start_new_thread
from ggz.drivers.tornado.bot import TornadoBot
from ggz.drivers.tornado.event import TornadoEvent
from ggz.lib.datadir import getdatadir
from ggz.imports import gettornado
from ggz.utils.source import getsource
from ggz.lib.partyline import partyline
from ggz.lib.exit import globalshutdown
from ggz.lib.commands import cmnds
from ggz.lib.floodcontrol import floodcontrol

tornado = gettornado()
fleet = getfleet()

## tornado import

import tornado.web
import tornado.ioloop
import tornado.auth
import tornado.httpserver
import tornado.websocket

## basic imports

import sys
import time
import types
import os
import logging
import urllib.parse
import urllib.request, urllib.parse, urllib.error
import socket
import ssl
import select

bot = TornadoBot(botname="tornado-bot")
logging.warn("tornado bot type %s" % bot.type)
ddir = getsource("ggz.data")
if not ddir: logging.warn("can't find ggz.data dir") ; os._exit(1)
else: logging.error("ggz.data is at %s" % ddir)


## jsb specific ioloop

class JSBLoop(tornado.ioloop.IOLoop):

    def __init__(self, *args):
        logging.warn("using Select IOLoop.")
        tornado.ioloop.IOLoop.__init__(self, tornado.ioloop._Select(), *args)
        
## server part

class TornadoServer(tornado.httpserver.HTTPServer):

    pass

## web socket

class WebSocket(tornado.websocket.WebSocketHandler):

    def get_current_user(self):
        user = str(self.get_secure_cookie("user"), "utf-8")
        if not user: user = "demouser" + "@" + self.request.remote_ip
        return user

    @tornado.web.asynchronous
    def open(self):
        user = self.current_user
        logging.warn("opening channel for %s" % user)
        if user not in bot.websockets: bot.websockets[user] = []
        if not self in bot.websockets[user]: bot.websockets[user].append(self)
        logging.warn("websocket open - %s" % user)

    def on_message(self, message):
        try:
            user = self.current_user
            if not user: logging.warn("no user found - %s" % message) ; return
            logging.warn("< %s (%s) - %s" % (user, self.request.remote_ip, message))
            event = TornadoEvent(bot=bot)
            event.parsesocket(self, message)
            bot.gatekeeper.allow(event.userhost)
            event.showall = True
            event.bind(bot)
            bot.put(event)
        except Exception as ex:
            handle_exception()
            if opts.bork: os._exit(1)
            
    @tornado.web.asynchronous
    def on_close(self):
        user = self.current_user
        try: bot.websockets[user].remove(self) ; logging.warn("websocket closed")
        except (KeyError, ValueError): logging.warn("no user %s found in websockets" % user)

## handlers

class GoogleHandler(tornado.web.RequestHandler, tornado.auth.GoogleMixin):

    @tornado.web.asynchronous
    def get(self):
        if self.get_argument("openid.mode", None):
            self.get_authenticated_user(self.async_callback(self._on_auth))
            return
        self.authenticate_redirect()

    @tornado.web.asynchronous
    def _on_auth(self, user):
        logging.warn(str(user))
        if not user: raise tornado.web.HTTPError(500, "Google auth failed")
        self.set_secure_cookie("user", user['email'])
        self.redirect("/")

class BaseHandler(tornado.web.RequestHandler):

    def get_current_user(self):
        user  = self.get_secure_cookie("user")
        if not user: user = "demouser" + "@" + self.request.remote_ip
        if user: return tornado.escape.xhtml_escape(user)

class LoginHandler(BaseHandler):

    def get(self):
        host = self.request.host
        if 'localhost' in host: url = "http://%s" % host
        else: url = "http://%s" % host
        logging.warn("using %s" % url)
        t = {'url': url, 'appname': "GGZBOT", 'version': getversion(), 'who': "not logged in yet", 'host': host, 'color': "#AD6666", "logouturl": 'logout', "loginurl": "login"}
        logging.warn(t)
        self.render(ddir + os.sep + "templates" + os.sep + "login.html", title="GGZBOT", **t)

class LogoutHandler(BaseHandler):

    def get(self):
        self.clear_cookie("user")
        host = self.request.host
        if 'localhost' in host: url = "http://%s" % host
        else: url = "http://%s" % host
        logging.warn("using %s" % url)
        t = {'url': url, 'appname': "GGZBOT", 'version': getversion(), 'who': "not logged in yet", 'host': host, 'color': "#C48B55", "logouturl": 'logout', "loginurl": "login"}
        logging.warn(t)
        self.render(ddir + os.sep + "templates" + os.sep + "login.html", title="GGZBOT", **t)


class DispatchHandler(BaseHandler):

    """ the bots remote command dispatcher. """

    @tornado.web.authenticated
    def get(self):
        """ show basic page. """
        try:
            if not self.current_user:
                self.redirect("/login")
                return
            user = tornado.escape.xhtml_escape(self.current_user)
            if not user: self.redirect("/login") ; return
            host = self.request.host
            if user:
                if opts.ssl: url = "wss://%s/websocket" % host
                else: url = "ws://%s/websocket" % host
                logging.warn("using url %s" % url)
                t = {'validate_cert': False, 'url': url, 'appname': "GGZBOT", 'version': getversion(), 'who': user, 'host': host, 'color': "#C48B44", "logouturl": "/logout", "loginurl": "/login"}
                self.render(ddir + os.sep + "templates" + os.sep + "console.html", title="GGZBOT", **t)
        except Exception as ex:
            handle_exception()
            if opts.bork: os._exit(1)

    @tornado.web.authenticated
    def post(self):
        """ this is where the command get disaptched. """
        try:
            logging.warn("DISPATCH incoming: %s - %s" % (self.request.get('content'), self.request.remote_addr))
            if not self.current_user:
                logging.warn("denied access for %s - %s" % (self.request.remote_addr, self.request.get('content')))
                self.response.out.write("acess denied .. plz login")
                self.response.set_status(400)
                return
            event = TornadoEvent(bot=bot)
            event.parsesocket(self, message)
            #bot.gatekeeper.allow(event.userhost)
            event.showall = True
            event.bind(bot)
            bot.put(event)
        except NoSuchCommand: 
            self.response.out.write("no such command: %s" % event.usercmnd)
        except Exception as ex:
            self.response.out.write("the command had an eror: %s" % exceptionmsg())
            handle_exception()

class DemoHandler(BaseHandler):

    """ the bots remote command dispatcher. """

    @tornado.web.authenticated
    def get(self):
        """ show basic page. """
        try:
            user = tornado.escape.xhtml_escape(self.current_user)
            if not user: self.redirect("/login") ; return
            user = self.current_user
            host = self.request.host
            if user:
                url = "ws://%s/websocket" % host
                logging.warn("using %s" % url)
                t = {"url": url, 'appname': "GGZBOT DEMO", 'version': getversion(), 'who': user, 'host': host, 'color': "#C48B11", "logouturl": 'logout', "loginurl": "login"}
                self.render(ddir + os.sep + "templates" + os.sep + "console.html", title="GGZBOT", **t)
        except Exception as ex:
            handle_exception()

class WarpHandler(BaseHandler):

    """ the bots remote command dispatcher. """

    @tornado.web.authenticated
    def get(self, path):
        """ show basic page. """
        try:
            user = tornado.escape.xhtml_escape(self.current_user)
            if not user: self.redirect("/login") ; return
            user = self.current_user
            host = self.request.host
            if user:
                if opts.ssl: url = "wss://%s/websocket" % host
                else: url = "ws://%s/websocket" % host
                logging.warn("using url %s" % url)
                t = {"url": url, 'appname': "GGZBOT WARP !", 'version': getversion(), 'who': user, 'host': host, 'color': "#C48B11", "logouturl": 'logout', "loginurl": "login" }
                self.render(ddir + os.sep + "templates" + os.sep + "warp.html", title="GGZBOT", **t)
        except Exception as ex:
            handle_exception()

    @tornado.web.authenticated
    def post(self):
        """ this is where the command get disaptched. """
        try:
            logging.warn("DISPATCH incoming: %s - %s" % (self.request.get('content'), self.request.remote_addr))
            if not self.current_user:
                logging.warn("denied access for %s - %s" % (self.request.remote_addr, self.request.get('content')))
                self.response.out.write("acess denied .. plz login")
                self.response.set_status(400)
                return
            event = TornadoEvent(bot=bot)
            event.parsesocket(self, message)
            #bot.gatekeeper.allow(event.userhost)
            event.bind(bot)
            bot.put(event)
        except NoSuchCommand: 
            self.response.out.write("no such command: %s" % event.usercmnd)
        except Exception as ex:
            self.response.out.write("the command had an eror: %s" % exceptionmsg())
            handle_exception()

## the application 

settings = {
    "static_path": ddir + os.sep + "static",
    "cookie_secret": "661oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=",
    "login_url": "/login",
}

application = tornado.web.Application([(r"/", DispatchHandler),
                                       (r"/warp/(.*)", WarpHandler),
                                       (r"/demo", DemoHandler),
                                       (r'/login_required', GoogleHandler),
                                       (r"/login", LoginHandler),
                                       (r"/logout", LogoutHandler),
                                       (r"/websocket", WebSocket),
                                       (r"/(.*)", tornado.web.StaticFileHandler, dict(path=settings['static_path'])),], **settings)

## runtime

if opts.ssl: server = TornadoServer(application, ssl_options=ssl_options)
else: server = TornadoServer(application)

def main(dofleet=True):
    global bot
    bot.server = server
    if opts.fleet and dofleet: start_new_thread(fleet.boot, ([], ["tornado", "console", ]))
    bot.start(connect=False)
    if not bot in fleet.bots: fleet.bots.append(bot)

if __name__ == "__main__":
    if opts.doresume and os.path.isfile(opts.doresume):
        main(False)
        if opts.fleet:
            logging.warn("resuming from %s" % opts.doresume)
            fleet = getfleet()
            fleet.resume(opts.doresume, exclude=["tornado"])
            fleet.startok.wait()
            partyline.resume(opts.doresume)
            os.unlink(opts.doresume)
    else: main(opts.fleet)
    try:
         if not opts.ssl:
             bot.server.bind(int(opts.port) or 10102)
             logging.warn("starting tornando server on port %s" % (opts.port or 10102))
         else:
             bot.server.bind(int(opts.port) or 10103)
             logging.warn("starting tornando server on port %s" % (opts.port or 10103))
             logging.warn(ssl_options)
         #bot.server.io_loop = JSBLoop()
         bot.server.start()
         bot.server.io_loop.start()
    except KeyboardInterrupt: globalshutdown()
    except Exception as ex: handle_exception() ; os._exit(1)
    else: globalshutdown()
