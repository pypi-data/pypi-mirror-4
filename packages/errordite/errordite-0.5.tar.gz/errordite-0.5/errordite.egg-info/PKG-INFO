Metadata-Version: 1.1
Name: errordite
Version: 0.5
Summary: Errordite exception logging.
Home-page: https://github.com/hugorodgerbrown/python-errordite
Author: Hugo Rodger-Brown
Author-email: hugo@rodger-brown.com
License: Copyright (c) 2013, Hugo Rodger-Brown
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Description: Python-Errordite
        ================
        
        This app provides integration between Python and Errordite, a centralised
        error logging and management service, not unlike Sentry, but with more
        functionality around the classification and management of errors.
        
        The application is provided in the form of a standard Python logging handler.
        In order to log exceptions with Errorite, you simply use ``logging.error`` or
        ``logging.exception`` in your ``except`` block::
        
            >>> import logging
            >>> import errordite
            >>> logger = logging.getLogger(__name__)
            >>> logger.addHandler(errordite.ErrorditeHandler('token'))
            >>> try:
            ...    raise Exception()
            ... except:
            ...    # handler uses sys.exc_info() so no need to pass
            ...    # exception info explicitly.
            ...    logging.error("Something went wrong")
            >>>
        
        Details of the implementation are best found in the code itself - it's fairly
        self-explanatory.
        
        Installation
        ------------
        
        The library is available at pypi as 'errordite', and can therefore be
        installed using pip::
            
            $ pip install errordite
        
        Once installed you can import the handler::
        
            >>> import errordite
            >>> handler = errordite.ErrorditeHandler("your_errordite_token")
        
        Configuration
        -------------
        
        In order to set up a valid **ErrorditeHandler** you must pass in an
        Errordite API token, which you can get by signing up at http://www.errordite.com
        
        Tests
        -----
        
        There are tests in the package - they can be run using ``unittest``::
        
            $ python -m unittest errordite.tests
        
        NB These tests do log real exceptions over the wire, so you will need to be
        connected to the web to run them. You will also need to set a local environment
        variable (**ERRORDITE_TOKEN**), which is picked up in the test suite.
        
        If you are \*nix you can pass this in on the command line::
        
            $ ERRORDITE_TOKEN=123 python -m unittest errordite.tests
        
        If you are on Windows you'll need to set it up explicitly as an env var::
        
            c:\> set ERRORDITE_TOKEN=123
            c:\> python -m unittest errordite.tests
        
        (This is a technique used to prevent having to have sensitive information in
        the public repo.)
        
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
