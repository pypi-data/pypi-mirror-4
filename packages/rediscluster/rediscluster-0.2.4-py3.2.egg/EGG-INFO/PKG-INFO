Metadata-Version: 1.1
Name: rediscluster
Version: 0.2.4
Summary: Python client for Cluster of Redis key-value store
Home-page: http://github.com/salimane/rediscluster-py
Author: Salimane Adjao Moustapha
Author-email: me@salimane.com
License: Copyright (c) 2012 Salimane Adjao Moustapha

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.

Download-URL: http://pypi.python.org/packages/source/r/rediscluster/rediscluster-0.2.4.tar.gz
Description: rediscluster-py
        ===============
        
        a Python interface to a Cluster of Redis key-value store.
        
        Project Goals
        -------------
        
        The goal is to be a drop in replacement of redis-py when you would like
        to shard your data into a cluster of redis servers. rediscluster-py is
        based on the awesome
        `redis-py <https://github.com/andymccurdy/redis-py.git>`_ StrictRedis
        Api, thus the original api commands would work without problems within
        the context of a cluster of redis servers
        
        Travis CI
        ---------
        
        Currently, rediscluster-py is being tested via travis ci for python
        version 2.6, 2.7 and 3.2: |Build Status|
        
        Installation
        ------------
        
        ::
        
            $ sudo pip install rediscluster
        
        or alternatively (you really should be using pip though):
        
        ::
        
            $ sudo easy_install rediscluster
        
        From source:
        
        ::
        
            $ sudo python setup.py install
        
        Running Tests
        -------------
        
        ::
        
            $ git clone https://github.com/salimane/rediscluster-py.git
            $ cd rediscluster-py
            $ vi tests/config.py
            $ ./run_tests
        
        Getting Started
        ---------------
        
        ::
        
            >>> import rediscluster
            >>> cluster = {
            ...          'nodes' : {
            ...                      'node_1' : {'host' : '127.0.0.1', 'port' : 63791},
            ...                      'node_2' : {'host' : '127.0.0.1', 'port' : 63792},
            ...                      'node_5' : {'host' : '127.0.0.1', 'port' : 63795},
            ...                      'node_6' : {'host' : '127.0.0.1', 'port' : 63796}
            ...                    },
            ...          'master_of' : {
            ...                          'node_1' : 'node_6', #node_6 slaveof node_1 in redis6.conf
            ...                          'node_2' : 'node_5'  #node_5 slaveof node_2 in redis5.conf
            ...                        },
            ...          'default_node' : 'node_1'
            ...     }
            >>> r = rediscluster.StrictRedis(cluster=cluster, db=0)
            >>> r.set('foo', 'bar')
            True
            >>> r.get('foo')
            'bar'
        
        Tagged keys
        -----------
        
        In order to specify your own hash key (so that related keys can all land
        on a given node), you pass a list where you’d normally pass a scalar.
        The first element of the list is the key to use for the hash and the
        second is the real key that should be fetched/modify:
        
        ::
        
            >>> r.get(["userinfo", "foo"])
        
        In that case “userinfo” is the hash key but “foo” is still the name of
        the key that is fetched from the redis node that “userinfo” hashes to.
        
        Information
        -----------
        
        -  Code: ``git clone git://github.com/salimane/rediscluster-py.git``
        -  Home: http://github.com/salimane/rediscluster-py
        -  Bugs: http://github.com/salimane/rediscluster-py/issues
        
        Author
        ------
        
        rediscluster-py is developed and maintained by Salimane Adjao Moustapha
        (me@salimane.com). It can be found here:
        http://github.com/salimane/rediscluster-py
        
        .. |Build Status| image:: https://secure.travis-ci.org/salimane/rediscluster-py.png?branch=master
           :target: http://travis-ci.org/salimane/rediscluster-py
        
Keywords: rediscluster,redis,nosql,cluster,key value
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
