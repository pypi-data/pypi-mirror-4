# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_timekeeper', [dirname(__file__)])
        except ImportError:
            import _timekeeper
            return _timekeeper
        if fp is not None:
            try:
                _mod = imp.load_module('_timekeeper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _timekeeper = swig_import_helper()
    del swig_import_helper
else:
    import _timekeeper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import timenotifier
class TimeKeeper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeKeeper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeKeeper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _timekeeper.new_TimeKeeper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _timekeeper.delete_TimeKeeper
    __del__ = lambda self : None;
    def isValid(self): return _timekeeper.TimeKeeper_isValid(self)
    def getId(self): return _timekeeper.TimeKeeper_getId(self)
    PLAY_INVALID = _timekeeper.TimeKeeper_PLAY_INVALID
    PLAY_FORWARD = _timekeeper.TimeKeeper_PLAY_FORWARD
    PLAY_BACKWARD = _timekeeper.TimeKeeper_PLAY_BACKWARD
    REPEAT_MODE_INVALID = _timekeeper.TimeKeeper_REPEAT_MODE_INVALID
    REPEAT_MODE_PLAY_ONCE = _timekeeper.TimeKeeper_REPEAT_MODE_PLAY_ONCE
    REPEAT_MODE_PLAY_LOOP = _timekeeper.TimeKeeper_REPEAT_MODE_PLAY_LOOP
    REPEAT_MODE_PLAY_SWING = _timekeeper.TimeKeeper_REPEAT_MODE_PLAY_SWING
    FRAME_MODE_INVALID = _timekeeper.TimeKeeper_FRAME_MODE_INVALID
    FRAME_MODE_PLAY_REAL_TIME = _timekeeper.TimeKeeper_FRAME_MODE_PLAY_REAL_TIME
    FRAME_MODE_PLAY_EVERY_FRAME = _timekeeper.TimeKeeper_FRAME_MODE_PLAY_EVERY_FRAME
    ATTRIBUTE_INVALID = _timekeeper.TimeKeeper_ATTRIBUTE_INVALID
    ATTRIBUTE_MINIMUM_TIME = _timekeeper.TimeKeeper_ATTRIBUTE_MINIMUM_TIME
    ATTRIBUTE_MAXIMUM_TIME = _timekeeper.TimeKeeper_ATTRIBUTE_MAXIMUM_TIME
    ATTRIBUTE_SPEED = _timekeeper.TimeKeeper_ATTRIBUTE_SPEED
    def getAttributeReal(self, *args): return _timekeeper.TimeKeeper_getAttributeReal(self, *args)
    def setAttributeReal(self, *args): return _timekeeper.TimeKeeper_setAttributeReal(self, *args)
    def createNotifierRegular(self, *args): return _timekeeper.TimeKeeper_createNotifierRegular(self, *args)
    def addTimeNotifier(self, *args): return _timekeeper.TimeKeeper_addTimeNotifier(self, *args)
    def removeTimeNotifier(self, *args): return _timekeeper.TimeKeeper_removeTimeNotifier(self, *args)
    def getFrameMode(self): return _timekeeper.TimeKeeper_getFrameMode(self)
    def setFrameMode(self, *args): return _timekeeper.TimeKeeper_setFrameMode(self, *args)
    def getPlayDirection(self): return _timekeeper.TimeKeeper_getPlayDirection(self)
    def play(self, *args): return _timekeeper.TimeKeeper_play(self, *args)
    def isPlaying(self): return _timekeeper.TimeKeeper_isPlaying(self)
    def stop(self): return _timekeeper.TimeKeeper_stop(self)
TimeKeeper_swigregister = _timekeeper.TimeKeeper_swigregister
TimeKeeper_swigregister(TimeKeeper)

# This file is compatible with both classic and new-style classes.


