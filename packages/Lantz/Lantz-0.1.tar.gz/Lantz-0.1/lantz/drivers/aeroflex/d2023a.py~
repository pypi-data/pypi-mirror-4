from lantz.base import tproperty
from lantz.serial import SerialDriver

class _d2023a(SerialDriver):

    WRITE_TERMINATION = '\r\n'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    idn = tproperty('*IDN?', doc='Identification query')
    opt = tproperty('*OPT?', doc='Option Identification query')
        self_test = tproperty('*TST?',
                            doc='Self test query. Returns 0 when the GPIB '
                                'interface and processor are operating')
    operation_complete = tproperty('*OPC', '*OPC?',
                                   doc='')
    status_byte = tproperty('*STB?', get_parser='{0:d}',
                            doc='Status byte, a number between 0-255')
    service_request =

    enable = tproperty

    frequency = tproperty('CFRQ?', 'CFRQ:VALUE {0}KHZ',
                          get_parser=':CFRQ:VALUE {0:f};INC {_}; MODE; {_}',
                          doc='Carrier frequency [kHz]')

    frequency_inc = tproperty

    @dproperty
    def sweep(self, (lower, upper, step)):
        """Range of frequencies to sweep



    def reset(self):
        """Set the instrument functions to the factory default power up state
        """
        self.send('*RST')

    def wait(self):
        self.send('*WAI')

    def trigger(self):
        self.send('*TRG')

    def clear_status(self)
        self.send('*CLS')

    def remote(self):
        self.send('^A')

    def local(self):
        self.send('^D')


class d2023aSerial( _d2023a, SerialDriver)
    pass

class d2023aTCP(_d2023a, TCPDriver)
    pass


