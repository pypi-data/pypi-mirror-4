[buildout]
extensions =
    mr.developer
    buildout.dumppickedversions

sources = sources
auto-checkout = *
unzip = true
verbose-security = on
versions = versions

#sources-base = git git@github.com:
sources-base = git https://github.com/

parts +=
    transcodedaemon
    instance
    zeoserver
    worker
    supervisor
    test
    coverage
    report
    report-xml
    zopepy

# Change the number here to change the version of Plone being used
extends =
    ffmpeg.cfg
    http://dist.plone.org/release/4.2/versions.cfg
    versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.2
    http://dist.plone.org/thirdparty

# Add additional eggs here
eggs =

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop = .
          src/*

[site]
local-ip = 127.0.0.1
zeo-address = ${site:local-ip}:8100
user = admin:admin
supervisor-port = 9999

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${site:zeo-address}
zeo-var = ${buildout:directory}/var
blob-storage = ${zeoserver:zeo-var}/blobstorage
eggs = ZODB3
       plone.app.blob


[instance]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2instance
user = ${site:user}
zeo-client = true
zeo-address = ${site:zeo-address}
shared-blob = on

recipe = plone.recipe.zope2instance
http-address = 8080
blob-storage = ${zeoserver:zeo-var}/blobstorage
# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs =
    Zope2
    Plone
    PILwoTK
    plumi.content
    plone.reload
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =
zcml-additional =
    <include package="plone.app.async" file="single_db_instance.zcml" />
environment-vars =
    ZC_ASYNC_UUID ${buildout:directory}/var/instance-uuid.txt


[worker]
user = ${site:user}
zeo-client = true
zeo-address = ${site:zeo-address}
zeo-address = ${site:zeo-address}
http-address = 127.0.0.1:8079
recipe = plone.recipe.zope2instance
eggs = ${instance:eggs}
zcml = ${instance:zcml}
zcml-additional =
    <include package="plone.app.async" file="single_db_worker.zcml" />
environment-vars =
    ZC_ASYNC_UUID ${buildout:directory}/var/worker-uuid.txt


[transcodedaemon]
recipe = collective.transcode.recipe
listen_host = localhost
listen_port = 8888
videofolder = videos
secret = 1771d99931264d538e75eeb19da7d6a0

# set default_supported_mimetypes (or supported_mimetypes in the profile) to an empty
# list [] to ignore mimetype checks
default_supported_mimetypes = ['application/ogg',\
                                'video/ogg',\
                                'video/x-ogg',\
                                'video/x-ogm+ogg',\
                                'video/flv',\
                                'video/x-flv',\
                                'video/mpeg',\
                                'video/3gpp',\
                                'video/x-ms-wmv',\
                                'video/quicktime',\
                                'video/x-la-asf',\
                                'video/x-ms-asf',\
                                'video/x-msvideo',\
                                'video/mp4',\
                                'video/webm',\
                                ]

# supported transcoding profiles
profiles = [\
            {'id': 'iso',\
             'cmd': 'scripts/iso %s %s',\
             'supported_mime_types': 'text/xml',\
             'output_mime_type': 'application/octet-stream',\
             'output_extension': 'iso' },\
            {'id': 'jpeg',\
             'cmd': 'scripts/jpeg %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'image/jpeg',\
             'output_extension': 'jpg' },\
            {'id': 'mpeg2',\
             'cmd': 'scripts/mpeg2 %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/mpeg', 'output_extension': 'mpg' },\
            {'id': 'mp4-high',\
             'cmd': 'scripts/mp4-high %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/mp4', 'output_extension': 'mp4' },\
            {'id': 'mp4-low',\
             'cmd': 'scripts/mp4-low %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/mp4', 'output_extension': 'mp4' },\
            {'id': 'webm-high',\
             'cmd': 'scripts/webm-high %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/webm', 'output_extension': 'webm' },\
            {'id': 'webm-low',\
             'cmd': 'scripts/webm-low %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/webm', 'output_extension': 'webm' },\
            ]
eggs=
   collective.transcode.recipe
   collective.transcode.daemon

[sources]
#plumi.skin = ${buildout:sources-base}plumi/plumi.skin.git
#plumi.locales = ${buildout:sources-base}plumi/plumi.locales.git
#collective.transcode.star = ${buildout:sources-base}plumi/collective.transcode.star.git
#collective.transcode.daemon = ${buildout:sources-base}plumi/collective.transcode.daemon.git
#collective.piwik.mediaelement = ${buildout:sources-base}plumi/collective.piwik.mediaelement.git
#collective.seeder = ${buildout:sources-base}plumi/collective.seeder.git
#collective.mediaelementjs = ${buildout:sources-base}plumi/collective.mediaelementjs.git
#collective.piwik.core = ${buildout:sources-base}plumi/collective.piwik.core.git
#collective.contentlicensing = ${buildout:sources-base}collective/collective.contentlicensing.git

[test]
recipe = collective.xmltestreport
eggs =
    ${instance:eggs}
    plumi.content[test]
defaults = ['--auto-color', '--auto-progress']

[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    include = '--source=${buildout:directory}/plumi'
    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '-s','plumi.content']

[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    sys.argv = sys.argv[:] + ['html', '-i']

[report-xml]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report-xml
initialization =
    sys.argv = sys.argv[:] + ['xml', '-i']

[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# Set up supervisor to run it all
[supervisor]
recipe = collective.recipe.supervisor
port = ${site:local-ip}:${site:supervisor-port}
#user = ${site:supervisor-user}
#password = ${site:supervisor-pass}
#serverurl = http://${site:supervisor-host}:${site:supervisor-port}
programs =
    0   zeo             ${zeoserver:location}/bin/runzeo                true 
    10  instance        ${buildout:directory}/bin/instance [ console ]  true 
    20  worker          ${buildout:directory}/bin/worker   [ console ]  true   
    30  transcodedaemon ${buildout:directory}/bin/transcodedaemon [fg]  true   
