$hr
# Project specific settings
$hr

#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if
#if $with_ploneproduct_fss
#set $fsscomment=''
#else
#set $fsscomment='#'
#end if
#if $with_ploneproduct_ploneappblob
#set $blobcomment=''
#else
#set $blobcomment='#'
#end if
#if $with_no_zcml
#set $zcmlcomment='#'
#else
#set $zcmlcomment=''
#end if
#if $with_ploneproduct_paasync
#set $asynccomment=''
#else
#set $asynccomment='#'
#end if
#if $with_ploneproduct_etherpad
#set $etherpadcomment=''
#else:
#set $etherpadcomment='#'
#end if  

[buildout]
sources=sources
auto-checkout = 
versions = versions
develop = \${buildout:directory}/src.mrdeveloper/zopelib
sources-dir=\${buildout:directory}/src.mrdeveloper
find-links =
    http://dist.plone.org/release/${plone_version}
    http://pypi.python.org/simple/ZODB4
# FOR PILWTOK
    http://download.zope.org/distribution/
# project packages
eggs=
    Pillow
zcml=
# extra directories oto add to the python path
extra-paths=

# see http://pypi.python.org/pypi/mr.developer for documentation
sources = sources
# auto tracked developement products, see project/sources.cfg
[sources] 

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
build-libxslt=true
build-libxml2=true

#if $major < 4
# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
url = \${versions:zope2-url}
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    pytz
    Zope2
    Acquisition
    zope.testing
skip-fake-eggs =
    pytz
    ZConfig
    ZODB3
# inter zope2.10 / zope 2.12
    five.localsitemanager
    zope.app.publisher
    zope.component
    zope.container
    zope.lifecycleevent
    zope.i18n
    zope.interface
    zope.location
    zope.proxy
    zope.publisher
    zope.schema
    zope.sendmail
    zope.site
    zope.testing
#end if
 
# here is defined the Zope instance running your plone site
# beware that zopepy part must run before isntance in order to have the right version
# pinned for relstorage 
[instance]
recipe = plone.recipe.zope2instance
#if $major < 4
zope2-location = \${zope2:location}
#end if
http-address = \${hosts:instance}:\${ports:instance}
user = \${zope:user}:\${zope:password}
session-timeout-minutes = \${cache:session-timeout-minutes}
verbose-security = \${zope:verbose-security}
debug-mode = \${zope:debug-mode}
event-log-level = \${zope:event-log-level}
z2-log-level = \${zope:z2-log-level}
#webdav-address = \${hosts:webdav}:\${ports:webdav}
zodb-cache-size = 50000
zeo-client-cache-size = 5MB

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths = \${buildout:extra-paths}
eggs = \${buildout:eggs}
    zopelib
# security hotfixes
#    Products.PloneHotfix20110720
#for $product in $additional_eggs:
#if product.startswith('#'):
$product
#else:
    ${product}
#end if
#end for

products =
    \${buildout:directory}/products
    \${productdistros:location}

zcml =
    \${buildout:zcml}

#for $product in $plone_zcml:
#if product.startswith('#'):
${product}
#else:
${zcmlcomment}    ${product}
#end if
#end for
#zope-conf-additional=

# plone.app.async instance if any
${asynccomment}zcml-additional =
${asynccomment}    <include package="plone.app.async" file="multi_db_instance.zcml" />
environment-vars =
    zope_i18n_compile_mo_files = true
    TMPDIR = \${locations:tmp}
${asynccomment}    ZC_ASYNC_UUID \${buildout:directory}/var/instance-uuid.txt
${asynccomment}zope-conf-additional =
${asynccomment}    <zodb_db async>
${asynccomment}        cache-size \${instance:zodb-cache-size}
${asynccomment}        <zeoclient>
${asynccomment}            server \${zeoserver:zeo-address}
${asynccomment}            storage 2
${asynccomment}            name asyncstorage
${asynccomment}            blob-dir \${zeoserver:blob-storage}
${asynccomment}            shared-blob-dir on
${asynccomment}            var \${buildout:parts-directory}/instance/var
${asynccomment}            cache-size \${instance:zeo-client-cache-size}
${asynccomment}        </zeoclient>
${asynccomment}        mount-point /zasync
${asynccomment}    </zodb_db>


# plone.app.async instance if any
${asynccomment}[instance-worker]
${asynccomment}<= instance
${asynccomment}webdav-address =
${asynccomment}http-address = \${hosts:instance-worker}:\${ports:instance-worker}
${asynccomment}zcml-additional =
${asynccomment}    <include package="plone.app.async" file="multi_db_worker.zcml"/>
${asynccomment}environment-vars =
${asynccomment}    zope_i18n_compile_mo_files = true
${asynccomment}    ZC_ASYNC_UUID \${buildout:directory}/var/worker-uuid.txt
${asynccomment}zope-conf-additional =
${asynccomment}    <zodb_db async>
${asynccomment}        cache-size \${instance-worker:zodb-cache-size}
${asynccomment}        <zeoclient>
${asynccomment}            server \${zeoserver:zeo-address}
${asynccomment}            storage 2
${asynccomment}            name asyncstorage
${asynccomment}            blob-dir \${zeoserver:blob-storage}
${asynccomment}            shared-blob-dir on
${asynccomment}            var \${buildout:parts-directory}/worker/var
${asynccomment}            cache-size \${instance-worker:zeo-client-cache-size}
${asynccomment}        </zeoclient>
${asynccomment}        mount-point /zasync
${asynccomment}    </zodb_db>
${asynccomment}    <product-config zc.z3monitor>
${asynccomment}        port \${ports:workermonitor}
${asynccomment}    </product-config> 
${asynccomment}zserver-threads = 2
${asynccomment}zeo-address = \${zeoserver:zeo-address}
${asynccomment}blob-storage = \${zeoserver:blob-storage}

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls=\${groups:products-urls}
version-suffix-packages = \${groups:version-suffix-packages}
nested-packages = \${groups:nested-packages} 

# eggs & scripts installation
[zopepy]
recipe = minitage.recipe.scripts
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
#if not $inside_minitage:
urls=http://download.zope.org/distribution/PIL-1.1.7.tar.gz
#end if
interpreter = zopepy
env-file=\${buildout:directory}/etc/${project}.env
eggs =
# release helpers
    zest.releaser
    jarn.mkrelease
    z3c.checkversions [buildout] 
    \${instance:eggs}
# Scripts generated filtering
scripts =
#z3c.checkversions
    checkversions
#jarn.mkrelease
    mkrelease
#zest.releaser
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd #slurp
#for $product in $plone_scripts:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for
extra-paths = 
    \${instance:extra-paths}
#if $major < 4
    \${zope2:location}/lib/python
#end if

# zope.testing testrunner support
[testenv]
INSTANCE_HOME=\${instance:location}
CONFIG_FILE=\${instance:location}/etc/zope.conf

# This testrunner is a zc.recipe.testrunner like
# See http://pypi.python.org/pypi/zc.recipe.testrunner/
# It can do xml reports addon if you supply -x as a command line argument
# It is useful for generating reports for hudson or other contineous integration
[${sane_name}.test]
recipe = collective.xmltestreport
eggs = 
    ${project} [test]
    \${instance:eggs}
extra-paths = \${instance:extra-paths}
#if $major < 4
    \${zope2:location}/lib/python
#end if
defaults = ['--exit-with-status', '--auto-color', '--auto-progress', '-s', '${project}']
environment = testenv
extra-paths = \${zopepy:extra-paths}

# Plone site creation if no other plonesite preset
[plonesite]
# http://pypi.python.org/pypi/collective.recipe.plonesite/
recipe = collective.recipe.plonesite
site-id = \${plone:site}
site-replace=false
enabled=true
instance = instance
# products to autoinstall
products-initial=
# profils to autorun
profiles-initial=
#   ${default_plone_profile}
${zeocomment}zeoserver = zeoserver

# Plone site (re)creation
[newplonesite]
<= plonesite
site-replace=true

[get-datafs]
recipe = plone.recipe.command
update-command = \${get-datafs:command}
command =
     rsync -av --partial --progress               \${users:staging}@\${hosts:staging}:\${locations:staging}/backups/                \${buildout:directory}/var/backups/;
     rsync -av --partial --progress               \${users:staging}@\${hosts:staging}:\${locations:staging}/snapshotbackups/        \${buildout:directory}/var/snapshotbackups/;
${blobcomment}     rsync -av --partial --progress \${users:staging}@\${hosts:staging}:\${locations:staging}/blobstorage/            \${buildout:directory}/var/blobstorage/;
${fsscomment}     rsync -av --partial --progress  \${users:staging}@\${hosts:staging}:\${locations:staging}/fss_${project}/  \${locations:fss}/;

[cg.devmode]
recipe=minitage.recipe.scripts
eggs=\${instance:eggs}
    collective.generic.devmode
scripts=cg.devmode
mail = foo@localhost
extra-paths = \${zopepy:extra-paths}

[devmode]
recipe=minitage.recipe.scripts
scripts=cg.devmode=devmode
mail = foo@localhost
extra-paths = \${zopepy:extra-paths}
initialization=
    import sys
    sys.argv[1:] = ['-m', '\${devmode:mail}', '-p', '--password', '\${zope:password}', '-l', '\${plone:site}', '-u', '\${zope:user}']
eggs=\${instance:eggs}
    collective.generic.devmode

[omelette]
recipe = collective.recipe.omelette
eggs = \${instance:eggs}
products = \${instance:products}
packages = #slurp
#if $major < 4
\${zope2:location}/lib/python #slurp
#end if
    ./
    \${instance:extra-paths} 

# Command below is important
# if not, fss tests or tests using fss in their configuration will fail
[mkdirs]
recipe = plone.recipe.command
update-command = \${mkdirs:command}
command = 
    mkdir -pv \${locations:tmp};
    mkdir -pv \${buildout:directory}/var/log/apache;
    mkdir -pv \${buildout:directory}/var/log/nginx;


 
[chmod]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = \${chmod:command} 
command =
    chmod 600 .installed.cfg
    find \${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 \${buildout:directory}/bin/*;
    chmod -R 740 \${buildout:directory}/parts/;

[chown]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = \${chown:command} 
command =
    find \${buildout:directory} -type d -name var -exec chown -R \${users:zope} {} \;
    find \${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R \${users:zope} {} \;
    find \${buildout:eggs-directory}/Products.kupu* -type d -name i18n -exec chown -R \${users:zope} {} \;
    find \${buildout:directory} -name runzope -exec chown \${users:zope} {} \;


[backup]
recipe = collective.recipe.backup
blobbackuplocation=\${locations:blob-backup}/backups
blobsnapshotlocation=\${locations:blob-backup}/snapshots 
keep=\${crons:nb_fullbackups_to_keep} 
keep_blob_days=\${crons:nb_backups_to_keep} 
      

[touch]
recipe = plone.recipe.command
update-command = \${touch:command}
command =  
    touch \${buildout:directory}/var/log/instance1.log;
    touch \${buildout:directory}/var/log/instance.log;
    touch \${buildout:directory}/var/log/instance2.log;
    touch \${buildout:directory}/var/log/instance3.log;
    touch \${buildout:directory}/var/log/instance4.log;
    touch \${buildout:directory}/var/log/main.log;
    touch \${buildout:directory}/var/log/transform.log;

${etherpadcomment}[etherpad-lite]
${etherpadcomment}recipe=hexagonit.recipe.download
${etherpadcomment}url=https://github.com/ether/etherpad-lite/archive/\${versions:etherpad}.zip
${etherpadcomment}strip-top-level-dir=true
${etherpadcomment}
${etherpadcomment}[etherpad-sh]
${etherpadcomment}recipe=collective.recipe.template
${etherpadcomment}output = \${buildout:directory}/bin/etherpad.sh
${etherpadcomment}mode = 755
${etherpadcomment}input = inline:
${etherpadcomment}    #! /bin/sh
${etherpadcomment}    export PATH=\${buildout:directory}/bin:\$PATH
${etherpadcomment}    cd \${etherpad-lite:location}
${etherpadcomment}    ./bin/run.sh
${etherpadcomment}
${etherpadcomment}[etherpad-config]
${etherpadcomment}recipe=collective.recipe.template
${etherpadcomment}input = \${buildout:directory}/etc/templates/pad.settings.json.template
${etherpadcomment}output = \${etherpad-lite:location}/settings.json
${etherpadcomment}title=Etherpad for Plone
${etherpadcomment}ip=\${hosts:etherpad}
${etherpadcomment}port=\${ports:etherpad}
${etherpadcomment}dbType=dirty
${etherpadcomment}dbSettings={"filename" : "var/dirty.db"}
${etherpadcomment}requireSession=true
${etherpadcomment}editOnly=false
${etherpadcomment}adminPassword=\${zope:password}
${etherpadcomment}
${etherpadcomment}[etherpad-apikey]
${etherpadcomment}recipe=collective.recipe.template
${etherpadcomment}output = \${etherpad-lite:location}/APIKEY.txt
${etherpadcomment}input = inline:
${etherpadcomment}    PLONEAPIKEY
${etherpadcomment}
${etherpadcomment}

[nodejs]
recipe = gp.recipe.node
npms = coffee-script less
scripts = coffee lessc npm
url = http://nodejs.org/dist/v\${versions:nodejs}/node-v\${versions:nodejs}.tar.gz
# vim:set ft=cfg:
