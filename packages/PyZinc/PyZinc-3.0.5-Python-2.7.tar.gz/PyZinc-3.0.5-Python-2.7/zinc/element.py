# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_element', [dirname(__file__)])
        except ImportError:
            import _element
            return _element
        if fp is not None:
            try:
                _mod = imp.load_module('_element', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _element = swig_import_helper()
    del swig_import_helper
else:
    import _element
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import field
import differentialoperator
import stream
import fieldmodule
import timesequence
import optimisation
import fieldcache
import node
class Element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _element.new_Element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _element.delete_Element
    __del__ = lambda self : None;
    def isValid(self): return _element.Element_isValid(self)
    SHAPE_TYPE_INVALID = _element.Element_SHAPE_TYPE_INVALID
    SHAPE_LINE = _element.Element_SHAPE_LINE
    SHAPE_SQUARE = _element.Element_SHAPE_SQUARE
    SHAPE_TRIANGLE = _element.Element_SHAPE_TRIANGLE
    SHAPE_CUBE = _element.Element_SHAPE_CUBE
    SHAPE_TETRAHEDRON = _element.Element_SHAPE_TETRAHEDRON
    SHAPE_WEDGE12 = _element.Element_SHAPE_WEDGE12
    SHAPE_WEDGE13 = _element.Element_SHAPE_WEDGE13
    SHAPE_WEDGE23 = _element.Element_SHAPE_WEDGE23
    def getId(self): return _element.Element_getId(self)
    def getDimension(self): return _element.Element_getDimension(self)
    def getIdentifier(self): return _element.Element_getIdentifier(self)
    def getShapeType(self): return _element.Element_getShapeType(self)
    def merge(self, *args): return _element.Element_merge(self, *args)
Element_swigregister = _element.Element_swigregister
Element_swigregister(Element)

class ElementBasis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementBasis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementBasis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _element.new_ElementBasis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _element.delete_ElementBasis
    __del__ = lambda self : None;
    def isValid(self): return _element.ElementBasis_isValid(self)
    FUNCTION_TYPE_INVALID = _element.ElementBasis_FUNCTION_TYPE_INVALID
    FUNCTION_CONSTANT = _element.ElementBasis_FUNCTION_CONSTANT
    FUNCTION_LINEAR_LAGRANGE = _element.ElementBasis_FUNCTION_LINEAR_LAGRANGE
    FUNCTION_QUADRATIC_LAGRANGE = _element.ElementBasis_FUNCTION_QUADRATIC_LAGRANGE
    FUNCTION_CUBIC_LAGRANGE = _element.ElementBasis_FUNCTION_CUBIC_LAGRANGE
    FUNCTION_LINEAR_SIMPLEX = _element.ElementBasis_FUNCTION_LINEAR_SIMPLEX
    FUNCTION_QUADRATIC_SIMPLEX = _element.ElementBasis_FUNCTION_QUADRATIC_SIMPLEX
    def getId(self): return _element.ElementBasis_getId(self)
    def getDimension(self): return _element.ElementBasis_getDimension(self)
    def getFunctionType(self, *args): return _element.ElementBasis_getFunctionType(self, *args)
    def setFunctionType(self, *args): return _element.ElementBasis_setFunctionType(self, *args)
    def getNumberOfNodes(self): return _element.ElementBasis_getNumberOfNodes(self)
ElementBasis_swigregister = _element.ElementBasis_swigregister
ElementBasis_swigregister(ElementBasis)

class ElementTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementTemplate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _element.new_ElementTemplate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _element.delete_ElementTemplate
    __del__ = lambda self : None;
    def isValid(self): return _element.ElementTemplate_isValid(self)
    def getId(self): return _element.ElementTemplate_getId(self)
    def getShapeType(self): return _element.ElementTemplate_getShapeType(self)
    def setShapeType(self, *args): return _element.ElementTemplate_setShapeType(self, *args)
    def getNumberOfNodes(self): return _element.ElementTemplate_getNumberOfNodes(self)
    def setNumberOfNodes(self, *args): return _element.ElementTemplate_setNumberOfNodes(self, *args)
    def defineFieldSimpleNodal(self, *args): return _element.ElementTemplate_defineFieldSimpleNodal(self, *args)
    def getNode(self, *args): return _element.ElementTemplate_getNode(self, *args)
    def setNode(self, *args): return _element.ElementTemplate_setNode(self, *args)
ElementTemplate_swigregister = _element.ElementTemplate_swigregister
ElementTemplate_swigregister(ElementTemplate)

class ElementIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _element.new_ElementIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _element.delete_ElementIterator
    __del__ = lambda self : None;
    def isValid(self): return _element.ElementIterator_isValid(self)
    def next(self): return _element.ElementIterator_next(self)
ElementIterator_swigregister = _element.ElementIterator_swigregister
ElementIterator_swigregister(ElementIterator)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _element.new_Mesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _element.delete_Mesh
    __del__ = lambda self : None;
    def isValid(self): return _element.Mesh_isValid(self)
    def getId(self): return _element.Mesh_getId(self)
    def containsElement(self, *args): return _element.Mesh_containsElement(self, *args)
    def createElementTemplate(self): return _element.Mesh_createElementTemplate(self)
    def createElement(self, *args): return _element.Mesh_createElement(self, *args)
    def createElementIterator(self): return _element.Mesh_createElementIterator(self)
    def defineElement(self, *args): return _element.Mesh_defineElement(self, *args)
    def destroyAllElements(self): return _element.Mesh_destroyAllElements(self)
    def destroyElement(self, *args): return _element.Mesh_destroyElement(self, *args)
    def destroyElementsConditional(self, *args): return _element.Mesh_destroyElementsConditional(self, *args)
    def findElementByIdentifier(self, *args): return _element.Mesh_findElementByIdentifier(self, *args)
    def getChartDifferentialOperator(self, *args): return _element.Mesh_getChartDifferentialOperator(self, *args)
    def getDimension(self): return _element.Mesh_getDimension(self)
    def getMaster(self): return _element.Mesh_getMaster(self)
    def getName(self): return _element.Mesh_getName(self)
    def getSize(self): return _element.Mesh_getSize(self)
    def match(self, *args): return _element.Mesh_match(self, *args)
Mesh_swigregister = _element.Mesh_swigregister
Mesh_swigregister(Mesh)

class MeshGroup(Mesh):
    __swig_setmethods__ = {}
    for _s in [Mesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Mesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeshGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _element.new_MeshGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getId(self): return _element.MeshGroup_getId(self)
    def addElement(self, *args): return _element.MeshGroup_addElement(self, *args)
    def removeAllElements(self): return _element.MeshGroup_removeAllElements(self)
    def removeElement(self, *args): return _element.MeshGroup_removeElement(self, *args)
    def removeElementsConditional(self, *args): return _element.MeshGroup_removeElementsConditional(self, *args)
    __swig_destroy__ = _element.delete_MeshGroup
    __del__ = lambda self : None;
MeshGroup_swigregister = _element.MeshGroup_swigregister
MeshGroup_swigregister(MeshGroup)



