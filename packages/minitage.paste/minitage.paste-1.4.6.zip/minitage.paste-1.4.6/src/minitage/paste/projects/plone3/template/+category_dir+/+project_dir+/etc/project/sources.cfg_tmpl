$hr
# Externals mr.developer products & software not packaged as python eggs.
$hr

[buildout]
sources=sources
auto-checkout +=
#if $with_ploneproduct_ploneappblob and ($major < 4)
    Products.CMFEditions
# else
#    Products.CMFEditions
#end if
# $autocheckout.sort()
#for $item in $autocheckout:
    $item
#end for

[remotes]
# Plone
plone = git://github.com/plone
plone_push = git@github.com:plone
svn_plone = https://svn.plone.org/svn/plone
#svn_plone = http://svn.plone.org/svn/plone

# Collective
collective = git://github.com/collective
collective_push = git@github.com:collective
svn_collective = https://svn.plone.org/svn/collective
#svn_collective = http://svn.plone.org/svn/collective
 

[sources]
zopeskel=svn https://svn.plone.org/svn/collective/ZopeSkel/trunk
experimental.catalogqueryplan = svn https://svn.plone.org/svn/collective/experimental.catalogqueryplan/trunk
Products.MemoryProfiler = svn https://svn.plone.org/svn/collective/Products.MemoryProfiler/trunk
Products.Gloworm = git https://github.com/kiorky/Products.Gloworm.git
templer.core                = git \${remotes:collective}/templer.core.git pushurl=\${remotes:collective_push}/templer.core.git
templer.buildout            = git \${remotes:collective}/templer.buildout.git pushurl=\${remotes:collective_push}/templer.buildout.git
templer.zope                = git \${remotes:collective}/templer.zope.git pushurl=\${remotes:collective_push}/templer.zope.git
templer.plone               = git \${remotes:collective}/templer.plone.git pushurl=\${remotes:collective_push}/templer.plone.git
templer.dexterity           = git \${remotes:collective}/templer.dexterity.git pushurl=\${remotes:collective_push}/templer.dexterity.git
templer.plonebuildout       = git \${remotes:collective}/templer.plonebuildout.git pushurl=\${remotes:collective_push}/templer.plonebuildout.git
templer.silva               = git \${remotes:collective}/templer.silva.git pushurl=\${remotes:collective_push}/templer.silva.git
templer.localcommands       = git \${remotes:collective}/templer.localcommands.git pushurl=\${remotes:collective_push}/templer.localcommands.git
templer.plone.localcommands = git \${remotes:collective}/templer.plone.localcommands.git pushurl=\${remotes:collective_push}/templer.plone.localcommands.git
templer.plonecore           = svn https://svn.plone.org/svn/collective/templer.plonecore/trunk
#set $psources_keys = $plone_sources.keys()
# $psources_keys.sort()
#for $item in $psources_keys:
#set source=$plone_sources[item]
$source['name'] = $source['type'] $source['url'] $source['path'] $source['asegg'] $source['opt_arg'] 
#end for

#if $with_ploneproduct_ploneappblob and ($major < 4)
# one plone3 we need this branch with blob storage
Products.CMFEditions = svn http://svn.plone.org/svn/collective/Products.CMFEditions/branches/1.2
#else
#Products.CMFEditions = svn http://svn.plone.org/svn/collective/Products.CMFEditions/branches/1.2
#end if


[groups]
# OLD ZOPE2 PRODUCTS SUPPORT
products-urls = #slurp
#for $product in $plone_products:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for


version-suffix-packages = #slurp
#for $product in $plone_vsp:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for

nested-packages = #slurp
#for $product in $plone_np:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for

vaporization=http://svn.plone.org/svn/collective/Vaporisation/trunk


# vim:set ft=cfg:
