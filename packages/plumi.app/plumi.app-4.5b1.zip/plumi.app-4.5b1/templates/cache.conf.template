/* This is the default varnish cache server configuration. It uses will
   proxy Plone, which should have Products.CacheSetup installed and
   configured.
   

   Note that cache.conf is generated from cache.conf.template.
 */

/* Configure gunicorn server as back end */
backend transform {
     .host = "${site:localhost}";
     .port = "${site:wsgi-port}";
}

/* Only allow PURGE from localhost */
acl purge {
    "localhost";
}

sub vcl_recv {
    
    /* Send to backend upon receive */
    
    set req.grace = 120s;
    set req.backend = transform;
    
    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        return(lookup);
    }

    if (req.request != "GET" &&
        req.request != "HEAD" &&
        req.request != "PUT" &&
        req.request != "POST" &&
        req.request != "TRACE" &&
        req.request != "OPTIONS" &&
        req.request != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return(pipe);
    }

    # don't bother caching large files
    if(req.url ~ "\.(mp3|flv|mov|mp4|mpg|mpeg|avi|m4v|mkv|wmv)") {
        return(pipe);
    }


    # dont't cache serve_daemon view
    if(req.url ~ "serve_daemon"){
        return(pipe);
    }


    if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return(pass);
    }

    if (req.http.If-None-Match) {
        return(pass);
    }

    return(lookup);
}

sub vcl_pipe {
    /* This is not necessary if you do not do any request rewriting. */
    set req.http.connection = "close";
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge_url(req.url);
        error 200 "Purged";
    }

    if (!obj.cacheable) {
        return(pass);
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        error 404 "Not in cache";
    }

}

sub vcl_fetch {
    set beresp.grace = 120s;

    if (!beresp.cacheable) {
        return(pass);
    }
    if (beresp.http.Set-Cookie) {
        return(pass);
    }
    if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        return(pass);
    }
    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        return(pass);
    }
    
}

sub vcl_hash {
    set req.hash += req.url;
    set req.hash += req.http.host;

    if (req.http.Accept-Encoding ~ "gzip") {
        set req.hash += "gzip";
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
        set req.hash += "deflate";
    }
}
