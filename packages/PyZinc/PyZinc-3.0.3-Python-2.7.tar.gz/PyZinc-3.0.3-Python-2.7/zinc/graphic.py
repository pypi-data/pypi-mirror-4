# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_graphic', [dirname(__file__)])
        except ImportError:
            import _graphic
            return _graphic
        if fp is not None:
            try:
                _mod = imp.load_module('_graphic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _graphic = swig_import_helper()
    del swig_import_helper
else:
    import _graphic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import field
import differentialoperator
import element
import node
import stream
import fieldmodule
import timesequence
import optimisation
import fieldcache
import tessellation
import graphicsmaterial
class Graphic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graphic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _graphic.new_Graphic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _graphic.delete_Graphic
    __del__ = lambda self : None;
    def isValid(self): return _graphic.Graphic_isValid(self)
    RENDER_TYPE_INVALID = _graphic.Graphic_RENDER_TYPE_INVALID
    RENDER_TYPE_SHADED = _graphic.Graphic_RENDER_TYPE_SHADED
    RENDER_TYPE_WIREFRAME = _graphic.Graphic_RENDER_TYPE_WIREFRAME
    COORDINATE_SYSTEM_INVALID = _graphic.Graphic_COORDINATE_SYSTEM_INVALID
    COORDINATE_SYSTEM_LOCAL = _graphic.Graphic_COORDINATE_SYSTEM_LOCAL
    COORDINATE_SYSTEM_WORLD = _graphic.Graphic_COORDINATE_SYSTEM_WORLD
    COORDINATE_SYSTEM_NORMALISED_WINDOW_FILL = _graphic.Graphic_COORDINATE_SYSTEM_NORMALISED_WINDOW_FILL
    COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_CENTRE = _graphic.Graphic_COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_CENTRE
    COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_LEFT = _graphic.Graphic_COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_LEFT
    COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_RIGHT = _graphic.Graphic_COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_RIGHT
    COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_BOTTOM = _graphic.Graphic_COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_BOTTOM
    COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_TOP = _graphic.Graphic_COORDINATE_SYSTEM_NORMALISED_WINDOW_FIT_TOP
    COORDINATE_SYSTEM_WINDOW_PIXEL_BOTTOM_LEFT = _graphic.Graphic_COORDINATE_SYSTEM_WINDOW_PIXEL_BOTTOM_LEFT
    COORDINATE_SYSTEM_WINDOW_PIXEL_TOP_LEFT = _graphic.Graphic_COORDINATE_SYSTEM_WINDOW_PIXEL_TOP_LEFT
    GLYPH_TYPE_INVALID = _graphic.Graphic_GLYPH_TYPE_INVALID
    GLYPH_TYPE_POINT = _graphic.Graphic_GLYPH_TYPE_POINT
    GLYPH_TYPE_AXES = _graphic.Graphic_GLYPH_TYPE_AXES
    GRAPHIC_TYPE_INVALID = _graphic.Graphic_GRAPHIC_TYPE_INVALID
    GRAPHIC_NODE_POINTS = _graphic.Graphic_GRAPHIC_NODE_POINTS
    GRAPHIC_DATA_POINTS = _graphic.Graphic_GRAPHIC_DATA_POINTS
    GRAPHIC_LINES = _graphic.Graphic_GRAPHIC_LINES
    GRAPHIC_CYLINDERS = _graphic.Graphic_GRAPHIC_CYLINDERS
    GRAPHIC_SURFACES = _graphic.Graphic_GRAPHIC_SURFACES
    GRAPHIC_ISO_SURFACES = _graphic.Graphic_GRAPHIC_ISO_SURFACES
    GRAPHIC_ELEMENT_POINTS = _graphic.Graphic_GRAPHIC_ELEMENT_POINTS
    GRAPHIC_STREAMLINES = _graphic.Graphic_GRAPHIC_STREAMLINES
    GRAPHIC_POINT = _graphic.Graphic_GRAPHIC_POINT
    def getId(self): return _graphic.Graphic_getId(self)
    def setCoordinateField(self, *args): return _graphic.Graphic_setCoordinateField(self, *args)
    def setTextureCoordinateField(self, *args): return _graphic.Graphic_setTextureCoordinateField(self, *args)
    def setMaterial(self, *args): return _graphic.Graphic_setMaterial(self, *args)
    def setSelectedMaterial(self, *args): return _graphic.Graphic_setSelectedMaterial(self, *args)
    def getTessellation(self): return _graphic.Graphic_getTessellation(self)
    def setTessellation(self, *args): return _graphic.Graphic_setTessellation(self, *args)
    def getRenderType(self): return _graphic.Graphic_getRenderType(self)
    def setRenderType(self, *args): return _graphic.Graphic_setRenderType(self, *args)
    def getVisibilityFlag(self): return _graphic.Graphic_getVisibilityFlag(self)
    def setVisibilityFlag(self, *args): return _graphic.Graphic_setVisibilityFlag(self, *args)
    def getCoordinateSystem(self): return _graphic.Graphic_getCoordinateSystem(self)
    def setCoordinateSystem(self, *args): return _graphic.Graphic_setCoordinateSystem(self, *args)
    def getName(self): return _graphic.Graphic_getName(self)
    def setName(self, *args): return _graphic.Graphic_setName(self, *args)
    def setGlyphType(self, *args): return _graphic.Graphic_setGlyphType(self, *args)
Graphic_swigregister = _graphic.Graphic_swigregister
Graphic_swigregister(Graphic)

class GraphicIsoSurface(Graphic):
    __swig_setmethods__ = {}
    for _s in [Graphic]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicIsoSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [Graphic]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicIsoSurface, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _graphic.new_GraphicIsoSurface(*args)
        try: self.this.append(this)
        except: self.this = this
    def setScalarField(self, *args): return _graphic.GraphicIsoSurface_setScalarField(self, *args)
    def setIsoValues(self, *args): return _graphic.GraphicIsoSurface_setIsoValues(self, *args)
    def setIsoRange(self, *args): return _graphic.GraphicIsoSurface_setIsoRange(self, *args)
    __swig_destroy__ = _graphic.delete_GraphicIsoSurface
    __del__ = lambda self : None;
GraphicIsoSurface_swigregister = _graphic.GraphicIsoSurface_swigregister
GraphicIsoSurface_swigregister(GraphicIsoSurface)



