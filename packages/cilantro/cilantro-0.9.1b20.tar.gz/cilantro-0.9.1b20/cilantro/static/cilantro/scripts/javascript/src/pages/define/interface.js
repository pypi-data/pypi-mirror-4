// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'cilantro/define/criteriamanager', 'cilantro/define/conceptmanager'], function(Backbone, CriteriaManager, ConceptManager) {
  var ConceptInterfaceView;
  ConceptInterfaceView = (function(_super) {

    __extends(ConceptInterfaceView, _super);

    function ConceptInterfaceView() {
      this.activate = __bind(this.activate, this);
      return ConceptInterfaceView.__super__.constructor.apply(this, arguments);
    }

    ConceptInterfaceView.prototype.el = '#plugin-panel';

    ConceptInterfaceView.prototype.initialize = function() {
      return App.hub.subscribe('concept/active', this.activate);
    };

    ConceptInterfaceView.prototype.activate = function(model) {
      var condition,
        _this = this;
      condition = CriteriaManager.retrieveCriteriaDS(model.id);
      if (ConceptManager.isConceptLoaded(model.id)) {
        return ConceptManager.show({
          id: model.id
        }, condition);
      } else {
        return model.fetch({
          beforeSend: function() {
            return _this.el.block();
          },
          complete: function() {
            return _this.el.unblock();
          },
          success: function() {
            return ConceptManager.show(model.get('viewset'), condition);
          }
        });
      }
    };

    return ConceptInterfaceView;

  })(Backbone.View);
  return {
    ConceptInterfaceView: ConceptInterfaceView
  };
});
