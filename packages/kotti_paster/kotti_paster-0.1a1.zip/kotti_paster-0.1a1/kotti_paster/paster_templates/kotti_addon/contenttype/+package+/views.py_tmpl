import colander
from kotti.views.edit import (
    ContentSchema,
    generic_edit,
    generic_add,
)
from kotti.views.util import (
    ensure_view_selector,
    template_api,
)
from ${package} import _
from ${package}.resources import ContentType


class ContentTypeSchema(ContentSchema):
    example_text = colander.SchemaNode(colander.String())


@ensure_view_selector
def edit_content_type(context, request):
    return generic_edit(context, request, ContentTypeSchema())


def add_content_type(context, request):
    return generic_add(context, request, ContentTypeSchema(), ContentType, u'content_type')


def view_content_type(context, request):
    return {
        'api': template_api(context, request),  # this bounds context and request variables to the api in the template
        'example_text': context.example_text,  # this can be called directly in the template as example_text
        }


def includeme_edit(config):

    config.add_view(
        edit_content_type,
        context=ContentType,
        name='edit',
        permission='edit',
        renderer='kotti:templates/edit/node.pt',
        )

    config.add_view(
        add_content_type,
        name=ContentType.type_info.add_view,
        permission='add',
        renderer='kotti:templates/edit/node.pt',
        )


def includeme_view(config):
    config.add_view(
        view_content_type,
        context=ContentType,
        name='view',
        permission='view',
        renderer='templates/view.pt',
        )

    config.add_static_view('static-${package}', '${package}:static')


def includeme(config):
    includeme_edit(config)
    includeme_view(config)
